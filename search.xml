<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础语法</title>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="1-JDK和JRE的区别"><a href="#1-JDK和JRE的区别" class="headerlink" title="1 JDK和JRE的区别"></a>1 JDK和JRE的区别</h3><ul>
<li><p>JRE：JavaRuntimeEnvironment，运行Java程序，包含JVM、Java基础类库。</p>
</li>
<li><p>JDK：Java Development Kit，提供开发环境和运行环境。</p>
<p>包含JRE、编译源文件的编译器Javac、监控工具jconsole和分析工具jvisualvm。</p>
</li>
</ul>
<h3 id="2-x3D-x3D-和equals-的区别"><a href="#2-x3D-x3D-和equals-的区别" class="headerlink" title="2 &#x3D;&#x3D; 和equals()的区别"></a>2 &#x3D;&#x3D; 和equals()的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ==和equals的区别</span></span><br><span class="line"><span class="comment"> *  ==解读：</span></span><br><span class="line"><span class="comment"> *      1.基本类型：值比较</span></span><br><span class="line"><span class="comment"> *      2.引用类型：引用比较(内存地址)</span></span><br><span class="line"><span class="comment"> *      3.不能比较没有父子关系的两个对象</span></span><br><span class="line"><span class="comment"> * equals解读：</span></span><br><span class="line"><span class="comment"> *      1.没有重写equals方法则同==,调用Object类中的equals,引用比较</span></span><br><span class="line"><span class="comment"> *      2.JDK中的类一般重写了equals，值比较</span></span><br><span class="line"><span class="comment"> *      3.String和Integer默认重写了equals方法：值比较</span></span><br><span class="line"><span class="comment"> *      4.重写对象的equals，一般须重写hashcode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kuroneko</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sx</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sy</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * String是引用类型，==引用比较，</span></span><br><span class="line"><span class="comment">         * 值为string的sx指向常量区中的一个位置xab123</span></span><br><span class="line"><span class="comment">         * y的值为string，和sx一样指向常量区中的xab123</span></span><br><span class="line"><span class="comment">         * so:</span></span><br><span class="line"><span class="comment">         *      true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx == sy);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * String和Cat是引用类型，==引用比较，Cat没有重写equals，引用比较</span></span><br><span class="line"><span class="comment">         * new关键字会重新开辟内存空间，值虽相同但引用不同</span></span><br><span class="line"><span class="comment">         * so:</span></span><br><span class="line"><span class="comment">         *      都为false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx == sz);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;黑猫&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;黑猫&quot;</span>);</span><br><span class="line">        System.out.println(c1.equals(c2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String和Integer重写了equals，equals值比较</span></span><br><span class="line"><span class="comment">         *  so：</span></span><br><span class="line"><span class="comment">         *      都为true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx.equals(sy));</span><br><span class="line">        System.out.println(sx.equals(sz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object类中equals方法的声明：同&#x3D;&#x3D;，引用比较</p>
<img src="/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20220506174814415.png" class="">

<p>String类中equals方法的声明：重写了Object的equals方法，把引用比较改成了值比较</p>
<img src="/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20220506180546883.png" class="">

<h3 id="3-hashCode-相同则equals-为true吗"><a href="#3-hashCode-相同则equals-为true吗" class="headerlink" title="3 hashCode()相同则equals()为true吗"></a>3 hashCode()相同则equals()为true吗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个对象的hashCode相同，equals不一定为true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;通话&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;重地&quot;</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;str1：%d | str2：%d&quot;</span>,  str1.hashCode(),str2.hashCode()));</span><br><span class="line">        System.out.println(str1.equals(str2)); <span class="comment">// String重写了equals,值比较</span></span><br><span class="line">        <span class="comment">/**console</span></span><br><span class="line"><span class="comment">         * str1：1179395 | str2：1179395</span></span><br><span class="line"><span class="comment">         * false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-基本类型和包装类对象使用-x3D-x3D-和equals进行比较"><a href="#4-基本类型和包装类对象使用-x3D-x3D-和equals进行比较" class="headerlink" title="4 基本类型和包装类对象使用&#x3D;&#x3D;和equals进行比较"></a>4 基本类型和包装类对象使用&#x3D;&#x3D;和equals进行比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/** 基本类型和包装类对象使用==和equals比较 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ib</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==：基本类型-基本类型、基本类型-包装对象是值比较&quot;</span>);</span><br><span class="line">        System.out.println(ia == ib);      <span class="comment">// true</span></span><br><span class="line">        System.out.println(ia == i1);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==：包装对象-包装对象是引用比较：&quot;</span>);</span><br><span class="line">        System.out.println(i1 == i2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(i3 == i4); <span class="comment">// false</span></span><br><span class="line">        System.out.println(i1 == i3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;equals: 包装对象-基本类型、包装对象-包装对象是值比较,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;JVM会缓存部分基本类型常用的包装类对象，如Integer的值在-128~127是被缓存的，所以i1和i2是相同引用&quot;</span>);</span><br><span class="line">        System.out.println(i1.equals(ia)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(i3.equals(ia)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(i1.equals(i2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(i1.equals(i3)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;JDK1.8,实验代码:&quot;</span>);</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>(<span class="string">&quot;127&quot;</span>);</span><br><span class="line">        <span class="type">Byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>(<span class="string">&quot;127&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 基本类型和包装对象使用 == 比较 : &quot;</span> + (b1 == b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 基本类型和包装对象使用 equals 比较 : &quot;</span> + b2.equals(b1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 包装对象和包装对象使用 == 比较 : &quot;</span> + (b2 == b3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 包装对象和包装对象使用 equals 比较 : &quot;</span> + b2.equals(b3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        <span class="type">Short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Short</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        <span class="type">Short</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Short</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 基本类型和包装对象使用 == 比较 : &quot;</span> + (s1 == s2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 基本类型和包装对象使用 equals 比较 : &quot;</span> + s2.equals(s1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 包装对象和包装对象使用 == 比较 : &quot;</span> + (s2 == s3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 包装对象和包装对象使用 equals 比较 : &quot;</span> + s2.equals(s3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">Character</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        <span class="type">Character</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 基本类型和包装对象使用 == 比较 : &quot;</span> + (c1 == c2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 基本类型和包装对象使用 equals 比较 : &quot;</span> + c2.equals(c1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 包装对象和包装对象使用 == 比较 : &quot;</span> + (c2 == c3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 包装对象和包装对象使用 equals 比较 : &quot;</span> + c2.equals(c3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 基本类型和包装对象使用 == 比较 : &quot;</span> + (i1 == i2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 基本类型和包装对象使用 equals 比较 : &quot;</span> + i2.equals(i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 包装对象和包装对象使用 == 比较 : &quot;</span> + (i2 == i3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 包装对象和包装对象使用 equals 比较 : &quot;</span> + i2.equals(i3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">1000000000000000L</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="string">&quot;1000000000000000&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">l3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="string">&quot;1000000000000000&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 基本类型和包装对象使用 == 比较 : &quot;</span> + (l1 == l2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 基本类型和包装对象使用 equals 比较 : &quot;</span> + l2.equals(l1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 包装对象和包装对象使用 == 比较 : &quot;</span> + (l2 == l3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 包装对象和包装对象使用 equals 比较 : &quot;</span> + l2.equals(l3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">10000.111F</span>;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 基本类型和包装对象使用 == 比较 : &quot;</span> + (f1 == f2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 基本类型和包装对象使用 equals 比较 : &quot;</span> + f2.equals(f1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 包装对象和包装对象使用 == 比较 : &quot;</span> + (f2 == f3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 包装对象和包装对象使用 equals 比较 : &quot;</span> + f2.equals(f3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">10000.111</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 基本类型和包装对象使用 == 比较 : &quot;</span> + (d1 == d2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 基本类型和包装对象使用 equals 比较 : &quot;</span> + d2.equals(d1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 包装对象和包装对象使用 == 比较 : &quot;</span> + (d2 == d3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 包装对象和包装对象使用 equals 比较 : &quot;</span> + d2.equals(d3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bl1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bl3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 基本类型和包装对象使用 == 比较 : &quot;</span> + (bl1 == bl2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 基本类型和包装对象使用 equals 比较 : &quot;</span> + bl2.equals(bl1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 包装对象和包装对象使用 == 比较 : &quot;</span> + (bl2 == bl3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 包装对象和包装对象使用 equals 比较 : &quot;</span> + bl2.equals(bl3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDK1<span class="number">.8</span>,实验代码:</span><br><span class="line">Byte 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Byte 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Byte 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Byte 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Short 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Short 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Short 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Short 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Character 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Character 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Character 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Character 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Integer 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Integer 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Integer 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Integer 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Long 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Long 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Long 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Long 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Float 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Float 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Float 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Float 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Double 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Double 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Double 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Double 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Boolean 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Boolean 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Boolean 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Boolean 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-装箱、拆箱的执行过程"><a href="#5-装箱、拆箱的执行过程" class="headerlink" title="5 装箱、拆箱的执行过程"></a>5 装箱、拆箱的执行过程</h3><p>装箱是基本类型转包装器类型，拆箱反之。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/** 装箱、拆箱的执行过程 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// JDK1.5之前不支持自动拆装箱，定义Integer对象必须</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.拆装箱的执行过程：</span></span><br><span class="line"><span class="comment">         * 装：调用包装器类的valueOf方法</span></span><br><span class="line"><span class="comment">         * 拆：调用包装器类的xxxValue方法，xxx代表对应的基本类型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 就是编译器帮我们自动调用了拆装箱的方法，以 Integer 类型变成 int 类型为例子，自动装箱就是编译器自动调用了Integer.valueOf(int i) 方法；自动拆箱就是自动调用了Integer.intValue() 方法,其他基本类型类推。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// JDK1.5开始，支持自动拆装箱</span></span><br><span class="line">        <span class="comment">// int装箱隐式的调用: xw = Integer.valueOf(1)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">xw</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 自动拆箱,Integer拆箱隐式的调用: x1 = xw.intValue</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> xw;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.包装器类装箱返回的对象</span></span><br><span class="line">        <span class="comment">/** Integer.valueOf返回对象时，在-128~127范围内会返回缓存对象 */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">/** Double.valueOf返回新的对象 */</span></span><br><span class="line">        <span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d4</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line">        System.out.println(d1 == d2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(d3 == d4);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">/* Boolean.valueOf返回Boolean类的静态常量TRUE|FALSE */</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        System.out.println(b1 == b2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b3 == b4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b1 == b3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.性能问题：若存在大量的自动装箱，且返回的包装对象不是从缓存中获取，会创建大量新的对象，消耗内存，加重垃圾回收的工作量，我们要正确地声明变量类型，避免因为自动装箱引起的性能问题。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 再举一个例子，在 Java 中的 HashMap 的性能也受到自动拆装箱的影响。</span></span><br><span class="line"><span class="comment">         * 因为 HashMap 默认接收的参数类型是HashMap &lt;Object, Object&gt;，所以在增删改查的时候，都会对 Key 值进行大量的自动拆装箱，为了解决这个问题，Java提供了 SparseArray，包括 SparseBoolMap, SparseIntMap, SparseLongMap, LongSparseMap。</span></span><br><span class="line"><span class="comment">         * 他们的 Key 值都是基本类型的值，例如 SparseIntMap 就是SparseIntMap&lt;int, Object&gt;,在避免了大量自动拆装箱的同时，还降低了内存消耗。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span> * <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  s1 = s1 + i，在 s1 被+操作符操作的时候，会对 s1 进行自动拆箱操作，进行数值相加操作，最后发生自动装箱操作转换成 Integer 对象。</span></span><br><span class="line"><span class="comment">             *  s1 = s1.intValue() + i;</span></span><br><span class="line"><span class="comment">             * Integer s1 = new Integer(result);</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            s1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Integer，递增相加耗时：&quot;</span> + (t2 - t1));<span class="comment">//使用Integer，递增相加耗时：44</span></span><br><span class="line">        <span class="comment">// 正常情况，不拆装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t3</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span> * <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            s2 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t4</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用int，递增相加耗时：&quot;</span> + (t4 - t3));<span class="comment">//使用int，递增相加耗时：5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-final、finally、finalize-区别"><a href="#6-final、finally、finalize-区别" class="headerlink" title="6 final、finally、finalize()区别"></a>6 final、finally、finalize()区别</h3><ul>
<li><p>被final修饰的类不能够被继承，被修饰的方法不能重写，能重载。</p>
<p>被修饰的成员变量必须初始化，赋初值后不能直接重新赋值。</p>
</li>
<li><p>finally是异常处理的一部分，只能用在try&#x2F;catch语句中，finally语句块中的代码最后被执行。除了JVM意外结束、在finallt语句块之前直接return或抛出异常、System.exit(0)（系统退出）。<br>抛出异常未执行到 try-finally 语句块<br>系统退出未执行到 finally 语句块</p>
</li>
<li><p>finalize()在java.lang.Object定义，GC回收对象之前自动由JVM调用finalize方法。可重写finalize方法，当对象被回收时释放一些资源，须调用super.finalize()。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;<span class="comment">//直接返回未执行到finally语句块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    i = i / <span class="number">0</span>;<span class="comment">//抛出异常未执行到finally语句块</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);<span class="comment">//系统退出未执行到finally语句块</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3>]]></content>
      <categories>
        <category>Java面试题</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/05/07/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Java有哪些常用容器（集合）"><a href="#Java有哪些常用容器（集合）" class="headerlink" title="Java有哪些常用容器（集合）"></a>Java有哪些常用容器（集合）</h3><p>Java容器分为Collection与Map两大接口。</p>
<img src="/2022/05/07/%E9%9B%86%E5%90%88/20191002072124515__20191013143527.jpg" class="">

<ul>
<li>List：有序，可重复</li>
<li>Set：不重复，linkedHashSet按插入排序，SortedSet可排序，HashSet无序</li>
<li>Map：存储键、值和之间的映射，key唯一，继承自Object类</li>
</ul>
<h3 id="哪些集合类是线程安全的"><a href="#哪些集合类是线程安全的" class="headerlink" title="哪些集合类是线程安全的"></a>哪些集合类是线程安全的</h3><p>Vector、Stack、Hashtable、java.util.concurrent包下所有集合类（ArrayBlockingQueue、ConcurrentHashMap、ConcurrentLinkedQueue、ConcurrentLinkedDeque…）</p>
<h3 id="ArrayList和Vector的联系和区别"><a href="#ArrayList和Vector的联系和区别" class="headerlink" title="ArrayList和Vector的联系和区别"></a>ArrayList和Vector的联系和区别</h3><ul>
<li><p>底层都使用数组实现</p>
</li>
<li><p>ArrayList是新版本JDK替代Vector的</p>
</li>
<li><p>默认初始化容量都是10</p>
</li>
<li><p>Vector扩容翻倍，ArrayList扩容增加50%</p>
</li>
</ul>
<h3 id="Collection和Collections"><a href="#Collection和Collections" class="headerlink" title="Collection和Collections"></a>Collection和Collections</h3><ul>
<li>Collection是集合的顶级接口，定义了集合类的基本方法。</li>
<li>Collections是集合的工具类，包含集合操作的静态多态方法，不能实例化。</li>
</ul>
<h3 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h3><p>JDK1.8中</p>
<ul>
<li>HashMap非线程安全；Hashtable中方法是synchronized线程安全的</li>
<li>HashMap继承自AbstractMap；Hashtable继承自Dictionary</li>
<li>HashMap的Iterator是fail-fast迭代器；Hashtable还使用enumerator迭代器</li>
<li>HashMap计算hash值；Hashtable使用key的hashCode方法</li>
<li>HashMap默认初始容量16，扩容时翻倍；Hashtable默认初始容量11，扩容时2n+1</li>
</ul>
<h3 id="HashMap、TreeMap"><a href="#HashMap、TreeMap" class="headerlink" title="HashMap、TreeMap"></a>HashMap、TreeMap</h3><ul>
<li>HashMap基于数组和链表实现；TreeMap基于红黑树实现</li>
<li>HashMap不支持排序;TreeMap默认按Key升序排序，可指定比较器Comparator用于在存入数据时对元素自动排序</li>
<li>HashMap有更好的性能</li>
</ul>
<h3 id="ArrayList、LinkedList"><a href="#ArrayList、LinkedList" class="headerlink" title="ArrayList、LinkedList"></a>ArrayList、LinkedList</h3><ul>
<li>都是非线程安全的；ArrayList基于数组；LinkedList基于双向链表</li>
<li>ArrayList默认初始化数组长度10，扩容时复制数组元素到新数组，新数组长度为原数组的1.5倍；LinkedList新增元素放到集合尾部，修改相应的指针节点即可，所以LinkedList的插入性能高</li>
<li>LinkedList更占内存，因为LinkedList为每一个节点存储了两个引用节点，一个指向前一个元素，一个指向下一个元素</li>
<li>对于随机index访问的get和set方法，ArrayList速度优于LinkedList。因为ArrayList直接通过数组下标找到元素；LinkedList移动指针遍历每个元素直到找到为止。</li>
<li>新增、删除元素，LinkedList速度优于ArrayList；因为ArrayList可能扩容和复制数组；LinkedList只需要修改节点指正即可</li>
<li>ArrayList的空间浪费体现在List列表的结尾预留一定的容量空间；LinkedList的每一个元素都需要空间存储指针节点对象</li>
</ul>
<h3 id="Array、ArrayList"><a href="#Array、ArrayList" class="headerlink" title="Array、ArrayList"></a>Array、ArrayList</h3><ul>
<li>定义一个Array时，必须指定数组的类型及长度，即元素固定</li>
<li>ArrayList是动态数组，自动扩容，不使用泛型时可添加不同类型元素</li>
</ul>
<h3 id="如何实现数组和List之间的转换"><a href="#如何实现数组和List之间的转换" class="headerlink" title="如何实现数组和List之间的转换"></a>如何实现数组和List之间的转换</h3><ul>
<li>数组转List：java.util.Arrays工具类的asList方法</li>
<li>List转数组：List的toArray方法</li>
</ul>
<h3 id="Queue的add-和offer-方法"><a href="#Queue的add-和offer-方法" class="headerlink" title="Queue的add()和offer()方法"></a>Queue的add()和offer()方法</h3><ul>
<li>都用来向队列添加一个元素</li>
<li>容量已满时，add抛出IllegalStateException异常，offer返回false</li>
</ul>
<h3 id="Queue的remove-和poll-方法"><a href="#Queue的remove-和poll-方法" class="headerlink" title="Queue的remove()和poll()方法"></a>Queue的remove()和poll()方法</h3><ul>
<li>都用来从队列头部删除一个元素</li>
<li>队列为空时，remove抛出NoSuchElementException异常；poll返回null</li>
</ul>
<h3 id="Queue的element-和peek-方法"><a href="#Queue的element-和peek-方法" class="headerlink" title="Queue的element()和peek()方法"></a>Queue的element()和peek()方法</h3><ul>
<li>都用来返回队列的头元素</li>
<li>队列为空时，element抛出NoSuchElementExcetpion异常，peek放回null</li>
</ul>
<h3 id="迭代器Iterator"><a href="#迭代器Iterator" class="headerlink" title="迭代器Iterator"></a>迭代器Iterator</h3><ul>
<li>迭代器模式是设计模式，用于顺序访问集合对象的元素，无序知道集合对象的底层实现</li>
<li>Iterator是可以遍历集合的对象，为各种容器提供了公共的操作接口。</li>
<li>迭代器类与集合类成对增加</li>
</ul>
<h3 id="Iterator的特点，怎么使用"><a href="#Iterator的特点，怎么使用" class="headerlink" title="Iterator的特点，怎么使用"></a>Iterator的特点，怎么使用</h3><ul>
<li>java.util.Collection接口继承了java.lang.Iterable接口，Iterator()方法返回一个Iterator对象</li>
<li>next()方法获得集合中的下一个元素</li>
<li>hashNext()检查集合中是否还有元素</li>
<li>remove()方法删除迭代器新返回的元素</li>
<li>forEachRemaining(Consumer&lt;?super E&gt;action)方法，遍历所有元素</li>
</ul>
<h3 id="Iterator、ListIterator"><a href="#Iterator、ListIterator" class="headerlink" title="Iterator、ListIterator"></a>Iterator、ListIterator</h3><ul>
<li>ListIterator继承自Iterator，并扩展了许多方法</li>
</ul>
<h3 id="怎么确保一个集合不能被修改"><a href="#怎么确保一个集合不能被修改" class="headerlink" title="怎么确保一个集合不能被修改"></a>怎么确保一个集合不能被修改</h3><ul>
<li>使用java.util.Collections类的unmodifiable***方法赋值原集合</li>
<li>guava工具类</li>
</ul>
<h3 id="为什么基本数据类型不能作为HashMap的键值"><a href="#为什么基本数据类型不能作为HashMap的键值" class="headerlink" title="为什么基本数据类型不能作为HashMap的键值"></a>为什么基本数据类型不能作为HashMap的键值</h3><ul>
<li>Java使用泛型来约束HashMap中的key和value类型，HashMap&lt;K,V&gt;</li>
<li>泛型规定必须是对象Object类型的，基本数据类型不是Object类型，不能作为键值</li>
<li>map.put（0，“ConstXiong”）中编译器已将key值0进行装箱，成为Integer类型</li>
</ul>
<h3 id="HashMap的键值需要注意什么"><a href="#HashMap的键值需要注意什么" class="headerlink" title="HashMap的键值需要注意什么"></a>HashMap的键值需要注意什么</h3><p>自定义类作为HashMap的key，需要注意按照自己的设计逻辑，重写自定义类的hashCode和equals方法。</p>
<ul>
<li>key的哈希值相同</li>
<li>内存中是同一个对象</li>
</ul>
<h3 id="数组和集合的区别"><a href="#数组和集合的区别" class="headerlink" title="数组和集合的区别"></a>数组和集合的区别</h3><ul>
<li>数组的效率优于集合</li>
<li>数组能存基本类型和对象；集合只能存对象</li>
<li>数组长度固定；集合容量动态改变</li>
<li>集合以类的形式存在，符合面向对象，通过简单的方法和属性调用可实现各种复杂操作</li>
<li>集合弥补了数组的一些缺点，比数组跟灵活</li>
</ul>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><ul>
<li>TreeSet基于TreeMap实现，TreeMap基于红黑树</li>
<li>有序，非重复；增删元素效率高</li>
<li>TreeSet默认构造，调用add方法时会调用对象类实现的Comparable接口的compareTo()方法和集合中的对象比较，根据方法返回的结果有序存储。若存入对象的类未实现Comparable接口则抛出ClassCastException</li>
<li>TreeSet支持构造方法指定Comparator接口，按照Comparator实现类的比较逻辑进行有序存储</li>
</ul>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul>
<li>HashSet基于HashMap实现，查询速度快，key可为null</li>
<li>无序、不可重复</li>
</ul>
<h3 id="HashSet和HashMap"><a href="#HashSet和HashMap" class="headerlink" title="HashSet和HashMap"></a>HashSet和HashMap</h3><ul>
<li>HashMap实现Map接口，put(K key, V value)新增元素，底层通过对key进行hash，使用数组+链表或红黑树对键值存储</li>
<li>HashSet实现Set接口，add(E e)新增元素对象，底层使用HashMap，大部分方法通过调用HashMap实现。</li>
</ul>
<h3 id="HashMap实现原理"><a href="#HashMap实现原理" class="headerlink" title="HashMap实现原理"></a>HashMap实现原理</h3><p>JDK1.7的HashMap基于数组+链表实现，所以Hash冲突时链表的查询效率低。</p>
<p><strong>JDK1.8的HashMap:</strong></p>
<ul>
<li><p>基于Hash算法实现，通过put(key, value)存储，get(key)获取value</p>
</li>
<li><p>当传入key时，根据key调用hash(Object key)方法计算出hash值，再根据hash值将value保存在Node对象里，Node对象有存放在数组中</p>
</li>
<li><p>计算出的hash值相同时，称之为Hash冲突，HashMap的做法是用链表和红黑树存储相同hash值的value</p>
</li>
<li><p>当hash冲突的个数&lt;&#x3D;8时维护一张链表；&gt;&#x3D;8且hash表length&gt;&#x3D;64时，转为红黑树</p>
</li>
<li><p>hash(Object key)方法的具体算法：</p>
<p>(h &#x3D; key.hashCode())^(h &gt;&gt;&gt; 16)使计算的hash值分布更均匀</p>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>Java面试题</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑商城</title>
    <url>/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/</url>
    <content><![CDATA[<h2 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h2><p>1.项目功能：登录、注册、热销商品、用户管理（密码、个人信息、头像、收获地址）、购物车（展示、增加、删除）、订单模块。</p>
<p>2.开发顺序：注册、登录、用户管理、购物车、商品、订单模块。</p>
<p>3.某一个模块的开发：</p>
<ul>
<li><p>持久层开发：依据前端页面的设置规划相关的SQL语句，以及进行配置</p>
</li>
<li><p>业务层开发：核心功能控制、业务操作以及异常的处理</p>
</li>
<li><p>控制层开发：接受请求、处理响应</p>
</li>
<li><p>前端开发：JS、Query、Ajax这些技术来连接后台</p>
</li>
</ul>
<h3 id="1-项目环境"><a href="#1-项目环境" class="headerlink" title="1 项目环境"></a>1 项目环境</h3><p>1.JDK：1.8版本及以上的版本</p>
<p>2.Maven：3.6.3版本</p>
<p>3.数据库：Mysql8</p>
<p>4.开发平台：idea2021.3.3</p>
<h3 id="2-搭建项目"><a href="#2-搭建项目" class="headerlink" title="2 搭建项目"></a>2 搭建项目</h3><p>1.项目名称：store，表示商城</p>
<p>2.结构：com.kuroneko.store</p>
<p>3.资源文件：resources文件夹下（static、templates）</p>
<p>4.单元测试：test.com.kuroneko.store</p>
<p>5.在yml文件中配置数据库的连接源信息</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="comment"># DataSource Config</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kuroneko_mall_datasource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/store?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>6.运行数据库脚本</p>
<p>7.测试连接：</p>
<ul>
<li>启动SpringBoot主类，是否有对应的Spring图形输出</li>
<li>在单元测试类中测试数据库的连接是否可以正常的加载</li>
</ul>
<p>8.访问项目的静态资源是否可以正常的架子啊。所有的静态资源放到static目录下。</p>
<blockquote>
<p>注意：idea对于Js代码的兼容性较差，编写了Js代码但是有时候不能正常加载。</p>
<p>1.idea缓存清理</p>
<p>2.clear-install</p>
<p>3.rebuild出现构建</p>
<p>4.重启idea和操作系统</p>
</blockquote>
<h2 id="用户注册"><a href="#用户注册" class="headerlink" title="用户注册"></a>用户注册</h2><h3 id="数据库表的创建"><a href="#数据库表的创建" class="headerlink" title="数据库表的创建"></a>数据库表的创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_user (</span><br><span class="line">	uid INT AUTO_INCREMENT COMMENT &#x27;用户id&#x27;,</span><br><span class="line">	username VARCHAR(20) NOT NULL UNIQUE COMMENT &#x27;用户名&#x27;,</span><br><span class="line">	password CHAR(32) NOT NULL COMMENT &#x27;密码&#x27;,</span><br><span class="line">	salt CHAR(36) COMMENT &#x27;盐值&#x27;,</span><br><span class="line">	phone VARCHAR(20) COMMENT &#x27;电话号码&#x27;,</span><br><span class="line">	email VARCHAR(30) COMMENT &#x27;电子邮箱&#x27;,</span><br><span class="line">	gender INT COMMENT &#x27;性别:0-女，1-男&#x27;,</span><br><span class="line">	avatar VARCHAR(50) COMMENT &#x27;头像&#x27;,</span><br><span class="line">	is_delete INT COMMENT &#x27;是否删除：0-未删除，1-已删除&#x27;,</span><br><span class="line">	created_user VARCHAR(20) COMMENT &#x27;日志-创建人&#x27;,</span><br><span class="line">	created_time DATETIME COMMENT &#x27;日志-创建时间&#x27;,</span><br><span class="line">	modified_user VARCHAR(20) COMMENT &#x27;日志-最后修改执行人&#x27;,</span><br><span class="line">	modified_time DATETIME COMMENT &#x27;日志-最后修改时间&#x27;,</span><br><span class="line">	PRIMARY KEY (uid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="1-创建用户的实体类"><a href="#1-创建用户的实体类" class="headerlink" title="1 创建用户的实体类"></a>1 创建用户的实体类</h3><p>1.通过表达结构提取出表的公共字段，放在一个实体类的基类中，起名BaseEntity基类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 作为实体类的基类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String createdUser;     <span class="comment">//日志-创建人</span></span><br><span class="line">    <span class="keyword">private</span> Date createdTime;       <span class="comment">//日志-创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String modifiedUser;    <span class="comment">//日志-最后修改执行人</span></span><br><span class="line">    <span class="keyword">private</span> Date modifiedTime;      <span class="comment">//日志-最后修改时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCreatedUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedUser</span><span class="params">(String createdUser)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdUser = createdUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getCreatedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedTime</span><span class="params">(Date createdTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdTime = createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getModifiedUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> modifiedUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModifiedUser</span><span class="params">(String modifiedUser)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.modifiedUser = modifiedUser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getModifiedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> modifiedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setModifiedTime</span><span class="params">(Date modifiedTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.modifiedTime = modifiedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> BaseEntity)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">BaseEntity</span> <span class="variable">that</span> <span class="operator">=</span> (BaseEntity) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getCreatedUser() != <span class="literal">null</span> ? !getCreatedUser().equals(that.getCreatedUser()) : that.getCreatedUser() != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getCreatedTime() != <span class="literal">null</span> ? !getCreatedTime().equals(that.getCreatedTime()) : that.getCreatedTime() != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getModifiedUser() != <span class="literal">null</span> ? !getModifiedUser().equals(that.getModifiedUser()) : that.getModifiedUser() != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> getModifiedTime() != <span class="literal">null</span> ? getModifiedTime().equals(that.getModifiedTime()) : that.getModifiedTime() == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> getCreatedUser() != <span class="literal">null</span> ? getCreatedUser().hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (getCreatedTime() != <span class="literal">null</span> ? getCreatedTime().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getModifiedUser() != <span class="literal">null</span> ? getModifiedUser().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getModifiedTime() != <span class="literal">null</span> ? getModifiedTime().hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;BaseEntity&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;createdUser=&#x27;&quot;</span> + createdUser + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, createdTime=&quot;</span> + createdTime +</span><br><span class="line">                <span class="string">&quot;, modifiedUser=&#x27;&quot;</span> + modifiedUser + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, modifiedTime=&quot;</span> + modifiedTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.创建用户的实体类。需要继承BaseEntity基类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户的实体类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;        <span class="comment">//用户id</span></span><br><span class="line">    <span class="keyword">private</span> String username;    <span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;    <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String salt;        <span class="comment">//盐值</span></span><br><span class="line">    <span class="keyword">private</span> String phone;       <span class="comment">//电话号码</span></span><br><span class="line">    <span class="keyword">private</span> String email;       <span class="comment">//电子邮箱</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;     <span class="comment">// 性别:0-女，1-男</span></span><br><span class="line">    <span class="keyword">private</span> String avatar;      <span class="comment">//头像</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;  <span class="comment">//是否删除：0-未删除，1-已删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.uid = uid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSalt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalt</span><span class="params">(String salt)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salt = salt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(Integer gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAvatar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAvatar</span><span class="params">(String avatar)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.avatar = avatar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getIsDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsDelete</span><span class="params">(Integer isDelete)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isDelete = isDelete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">super</span>.equals(o)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getUid() != <span class="literal">null</span> ? !getUid().equals(user.getUid()) : user.getUid() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getUsername() != <span class="literal">null</span> ? !getUsername().equals(user.getUsername()) : user.getUsername() != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getPassword() != <span class="literal">null</span> ? !getPassword().equals(user.getPassword()) : user.getPassword() != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getSalt() != <span class="literal">null</span> ? !getSalt().equals(user.getSalt()) : user.getSalt() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getPhone() != <span class="literal">null</span> ? !getPhone().equals(user.getPhone()) : user.getPhone() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getEmail() != <span class="literal">null</span> ? !getEmail().equals(user.getEmail()) : user.getEmail() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getGender() != <span class="literal">null</span> ? !getGender().equals(user.getGender()) : user.getGender() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (getAvatar() != <span class="literal">null</span> ? !getAvatar().equals(user.getAvatar()) : user.getAvatar() != <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> getIsDelete() != <span class="literal">null</span> ? getIsDelete().equals(user.getIsDelete()) : user.getIsDelete() == <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">        result = <span class="number">31</span> * result + (getUid() != <span class="literal">null</span> ? getUid().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getUsername() != <span class="literal">null</span> ? getUsername().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getPassword() != <span class="literal">null</span> ? getPassword().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getSalt() != <span class="literal">null</span> ? getSalt().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getPhone() != <span class="literal">null</span> ? getPhone().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getEmail() != <span class="literal">null</span> ? getEmail().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getGender() != <span class="literal">null</span> ? getGender().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getAvatar() != <span class="literal">null</span> ? getAvatar().hashCode() : <span class="number">0</span>);</span><br><span class="line">        result = <span class="number">31</span> * result + (getIsDelete() != <span class="literal">null</span> ? getIsDelete().hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uid=&quot;</span> + uid +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, salt=&#x27;&quot;</span> + salt + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&quot;</span> + gender +</span><br><span class="line">                <span class="string">&quot;, avatar=&#x27;&quot;</span> + avatar + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, isDelete=&quot;</span> + isDelete +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-注册-持久层"><a href="#2-注册-持久层" class="headerlink" title="2 注册-持久层"></a>2 注册-持久层</h3><p>通过MyBatis来操作数据库。在做mybatis开发的流程。</p>
<h4 id="2-1-规划需要执行的SQL语句"><a href="#2-1-规划需要执行的SQL语句" class="headerlink" title="2.1 规划需要执行的SQL语句"></a>2.1 规划需要执行的SQL语句</h4><p>1.用户的注册功能，相当于在做数据的插入操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_user(username, password) values(值列表)</span><br></pre></td></tr></table></figure>

<p>2.在用户注册时首先要先去查询当前的用户名是否存在，如果存在则不能进行注册。相当于是一条查询语句。</p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/image-20220411171556029.png" class="" title="image-20220411171556029">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_user where username=?</span><br></pre></td></tr></table></figure>

<h4 id="2-2-设计接口和抽象方法"><a href="#2-2-设计接口和抽象方法" class="headerlink" title="2.2 设计接口和抽象方法"></a>2.2 设计接口和抽象方法</h4><p>定义Mapper接口。在项目的目录结构下首先创建一个mapper包，在这个包下再根据不同的功能模块来创建mapper接口。创建一个UserMapper的接口。要在接口中定义这这两个SQL语句抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户模块的持久层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数(增删改都受影响的行数作为返回值，可以根据返回值来判断是否执行成功)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名来查询用户的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  如果找到对应的用户则返回这个用户的数据，否者返回null值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.在启动类配置mapper接口文件的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// MapperScan注解指定当前项目中的Mapper接口路径的位置，在项目启动时会自动加载所有的接口</span><br><span class="line">@MapperScan(&quot;com.kuroneko.mapper&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-编写映射"><a href="#2-3-编写映射" class="headerlink" title="2.3 编写映射"></a>2.3 编写映射</h4><p>1.定义xml映射文件，与对应的接口进行关联。所有的映射文件需要放置在resources目录下，在这个目录下创建一个mapper文件夹，然后在这个文件夹存放Mapper的映射文件。</p>
<p>2.创建接口对应的映射文件，遵循和接口的名称保存一致即可。创建一个UserMapper.xml文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace属性：用于指定当前的映射文件和哪个接口进行映射，需要指定接口的文件路径，需要标注包的完整路径接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuroneko.store.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.配置接口中的方法对应上SQL语句。需要借助标签来完成，insert\update\delete\select，对应的是SQL语句的增删改查。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--自定义映射规则：resultMap标签来完成映射规则的定义--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        id属性：表示给这个映射规则分配一个唯一的id，对应的就是resultMap=&quot;id属性的值&quot;属性的取值</span></span><br><span class="line"><span class="comment">        type属性：表示取值是一个类，表示的是数据库中的查询结果与Java中哪个实体类进行结果集的映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuroneko.store.entity.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--将表和类的属性不一致的字段进行匹配指定,名称一致的字段可以省略不写--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            配合完成名称不一致的映射:</span></span><br><span class="line"><span class="comment">            column属性：表示表中的字段名称</span></span><br><span class="line"><span class="comment">            property属性：表示类中的属性名称</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--注意：在定义映射规则时主键不可以省略,因为把唯一一条记录存放在唯一的一个对象中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;uid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;uid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_delete&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDelete&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--id属性：表示映射的接口中方法的名称，直接在标签的内部来编写SQL语句--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        useGeneratedKeys属性：表示开启某个字段的值递增（主键设置为递增）</span></span><br><span class="line"><span class="comment">        keyProperty属性：表示将表中的哪个字段作为主键递增</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;uid&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_user (</span><br><span class="line">            username, password, salt, phone, email, gender, avatar, is_delete,</span><br><span class="line">            created_user, created_time, modified_user, modified_time</span><br><span class="line">        )</span><br><span class="line">        VALUES (</span><br><span class="line">                   #&#123;username&#125;, #&#123;password&#125;, #&#123;salt&#125;, #&#123;phone&#125;, #&#123;email&#125;, #&#123;gender&#125;, #&#123;avatar&#125;,</span><br><span class="line">                   #&#123;isDelete&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;</span><br><span class="line">               )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--select语句在执行时，查询的结果是一个对象或者多个对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        resultType: 表示查询的结果集类型，表的字段和映射类的对象属性名称需要保存一致</span></span><br><span class="line"><span class="comment">        resultMap: 当表的字段和映射类的对象属性名称不一致时，来自定义查询结果集的映射规则</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserEntityMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE username = #&#123;username&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.注意：将mapper文件的位置注册到yml或者properties对应的配置文件中</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注册mapper</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure>

<p>3.单元测试：每个独立的层编写完毕后需要编写单元测试方法，来测试当前的功能。在test包结构下创建一个mapper包，在这个包下再创建持久层的功能测试。</p>
<h3 id="3-注册-业务层"><a href="#3-注册-业务层" class="headerlink" title="3 注册-业务层"></a>3 注册-业务层</h3><h4 id="3-1-规划异常"><a href="#3-1-规划异常" class="headerlink" title="3.1 规划异常"></a>3.1 规划异常</h4><p>1.RuntimeException异常作为项目所有异常的父类。去ex包下定义具体的异常类型来继承RuntimeException异常。业务层异常的基类，ServiceException异常。这个异常继承RutimeException异常。具体的异常去继承我们定义的ServiceException异常。异常机制的建立。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 业务层异常的基类: throws new ServiceException(&quot;业务层产生未知的异常&quot;) */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceExcetion</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceExcetion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceExcetion</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceExcetion</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceExcetion</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ServiceExcetion</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据业务层不同的功能来详细定义具体的异常的类型，统一的去继承ServiceException异常类。</p>
</blockquote>
<p>2.用户在进行注册的时候可能会产生用户名被占用的错误，抛出一个异常：UsernameDuplicatedException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户名被占用的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UsernameDuplicatedException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">UsernameDuplicatedException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.正在执行数据插入操作的时候，服务器、数据库宕机。处于正在执行插入的过程中所产生的异常InsertException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数据在插入过程中所产生的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InsertException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InsertException</span><span class="params">(Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">InsertException</span><span class="params">(String message, Throwable cause, <span class="type">boolean</span> enableSuppression, <span class="type">boolean</span> writableStackTrace)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause, enableSuppression, writableStackTrace);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-2-设计接口和抽象方法"><a href="#3-2-设计接口和抽象方法" class="headerlink" title="3.2 设计接口和抽象方法"></a>3.2 设计接口和抽象方法</h4><p>1.在service包下创建一个IUserService接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户模块业务层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户的数据对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.创建一个实现类UserServiceImpl类，需要实现这个接口，并且实现抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.UsernameDuplicatedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 用户模块业务层的实现类 */</span></span><br><span class="line"><span class="meta">@Service</span> <span class="comment">// @Service注解：将当前类的对象交给Springioc管理，自动创建对象以及对象的维护</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IUserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 通过user参数来获取传递过来的username</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> user.getUsername();</span><br><span class="line">        <span class="comment">// 调用findByUsername(username)判断用户是否被注册过</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line">        <span class="comment">// 判断结果集是否不为null,则抛出用户名被占用的异常</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameDuplicatedException</span>(<span class="string">&quot;用户名被占用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// md5加密，连续加工3次 ---- （盐值 + password + 盐值）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldPassword</span> <span class="operator">=</span> user.getPassword();</span><br><span class="line">        <span class="comment">// UUID生成盐值（随机生成一个盐值）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase();</span><br><span class="line">        <span class="comment">// 补全数据：盐值的记录</span></span><br><span class="line">        user.setSalt(salt);</span><br><span class="line">        <span class="comment">// 将密码和盐值作为一个整体进行加密,忽略原有密码强度提升了数据的安全性</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">md5Password</span> <span class="operator">=</span> getMD5Password(oldPassword, salt);</span><br><span class="line">        <span class="comment">// 将加密之后的密码重新补全设置到user对象中</span></span><br><span class="line">        user.setPassword(md5Password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 补全数据：is_delete设置成0</span></span><br><span class="line">        user.setIsDelete(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 补全数据：4个日志字段信息</span></span><br><span class="line">        user.setCreatedUser(username);</span><br><span class="line">        user.setModifiedUser(username);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        user.setCreatedTime(date);</span><br><span class="line">        user.setModifiedTime(date);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行注册业务功能的实现(rows==1)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.insert(user);</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;在用户注册过程中产生了未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 定义一个md5算法的加密处理 */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getMD5Password</span><span class="params">(String password, String salt)</span>&#123;</span><br><span class="line">        <span class="comment">// md5加密算法的调用（进行三次加密）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>; i&lt;<span class="number">3</span>; i++)&#123;</span><br><span class="line">            password = DigestUtils.md5DigestAsHex((salt + password + salt).getBytes()).toUpperCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回加密后的密码</span></span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.在单元测试包下创建一个UserServiceTest类，在这个类中添加单元测试的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImplTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            user.setUsername(<span class="string">&quot;neko2&quot;</span>);</span><br><span class="line">            user.setPassword(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">            userService.reg(user);</span><br><span class="line">            System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            <span class="comment">// 获取类的对象再获取类的名称</span></span><br><span class="line">            System.out.println(e.getClass().getSimpleName());</span><br><span class="line">            <span class="comment">// 获取异常的具体描述</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-注册-控制层"><a href="#4-注册-控制层" class="headerlink" title="4 注册-控制层"></a>4 注册-控制层</h3><h4 id="4-1-创建响应"><a href="#4-1-创建响应" class="headerlink" title="4.1 创建响应"></a>4.1 创建响应</h4><p>状态码、状态描述信息、数据。这部分功能封装在一个类中。将这个类作为方法返回值，返回给前端浏览器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Json格式的数据进行响应 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonResult</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/** 状态码 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">/** 描述信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">/** 数据：查询要返回数据，而注册不需要返回数据 */</span></span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Integer code, E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JsonResult</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = e.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4-2-设计请求"><a href="#4-2-设计请求" class="headerlink" title="4.2 设计请求"></a>4.2 设计请求</h4><p>依据当前的业务功能模块进行请求的设计。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求路径：/users/reg</span><br><span class="line">请求参数：user user</span><br><span class="line">请求类型：POST</span><br><span class="line">响应结果：JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-处理请求"><a href="#4-3-处理请求" class="headerlink" title="4.3 处理请求"></a>4.3 处理请求</h4><p>1.创建一个控制层对应的类UserController。依赖于业务层的接口。</p>
<h4 id="4-4-控制层优化设计"><a href="#4-4-控制层优化设计" class="headerlink" title="4.4 控制层优化设计"></a>4.4 控制层优化设计</h4><p>在控制层抽离一个父类，在这个父类中统一去处理关于异常的相关操作。编写一个BaseControler类。统一处理异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.UsernameDuplicatedException;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 控制层类的基类，统一处理异常 */</span></span><br><span class="line"><span class="comment">// 当BaseControler的子类（其他继承了本类的控制器）抛出了异常，会被统一拦截到此方法中，这个方法此时充当的是请求处理的方法，方法的返回值直接给到前台</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseControler</span> &#123;</span><br><span class="line">    <span class="comment">/** 操作成功的状态码 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求处理方法,这个方法的返回值就是需要传递给前台的数据</span></span><br><span class="line">    <span class="comment">// 自动将异常对象传递给此方法的参数列表上</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ServiceException.class)</span> <span class="comment">// 用于统一处理抛出的异常</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">handleException</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        JsonResult&lt;Void&gt; result = <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(e);</span><br><span class="line">        <span class="comment">//判断具体的异常返回给前台</span></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> UsernameDuplicatedException) &#123;</span><br><span class="line">            result.setCode(<span class="number">4000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户名已被占用&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> InsertException) &#123;</span><br><span class="line">            result.setCode(<span class="number">5000</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;注册时产生未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>重新构建了reg()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Controller</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="comment">//相当于@Controller + @ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;reg&quot;)</span></span><br><span class="line">    <span class="comment">// @ResponseBody // 表示此方法的响应结果以Json格式响应给前台</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">reg</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userService.reg(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Void&gt;(OK);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    @RequestMapping(&quot;reg&quot;)</span></span><br><span class="line"><span class="comment">    // @ResponseBody // 表示此方法的响应结果以Json格式响应给前台</span></span><br><span class="line"><span class="comment">    public JsonResult&lt;Void&gt; reg(User user)&#123;</span></span><br><span class="line"><span class="comment">        // 创建响应结果对象</span></span><br><span class="line"><span class="comment">        JsonResult&lt;Void&gt; result = new JsonResult&lt;&gt;();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            userService.reg(user);</span></span><br><span class="line"><span class="comment">            result.setCode(200);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;用户注册成功&quot;);</span></span><br><span class="line"><span class="comment">        &#125;catch (UsernameDuplicatedException e)&#123;</span></span><br><span class="line"><span class="comment">            result.setCode(4000);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;用户名被占用&quot;);</span></span><br><span class="line"><span class="comment">        &#125;catch (InsertException e)&#123;</span></span><br><span class="line"><span class="comment">            result.setCode(5000);</span></span><br><span class="line"><span class="comment">            result.setMessage(&quot;注册时产生未知的异常&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        return result;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>启动项目打开浏览器访问<a href="http://localhost:8081/users/reg?username=neko2&amp;password=2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95">http://localhost:8081/users/reg?username=neko2&amp;password=2进行测试</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;code&quot;: 200,</span><br><span class="line">    &quot;message&quot;: &quot;用户注册成功&quot;,</span><br><span class="line">    &quot;data&quot;: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-注册-前端页面"><a href="#5-注册-前端页面" class="headerlink" title="5 注册-前端页面"></a>5 注册-前端页面</h3><p>1.在register页面中编写发送请求的方法，点击事件来完成。选中对应的按钮（$(“选择器”)），再去添加点击的事件，$.ajax()函数发送异步请求。</p>
<p>2.异步加载。通常在页面上需要去请求服务器相关的数据，在页面上有很多的布局，而我们只想去把页面的某个局部加载。Jquery的ajax()函数可以把页面中的某个局部作为一个独立的整体，而在这个独立整体发送请求，在不刷新整体页面的视觉效果，但是页面动态的数据也加载过来了。</p>
<p>3.Jquery封装了一个函数，称为$.ajax()函数，Jquery把$定义为一个对象，通过对象调用调用ajax()函数，可以异步加载相关的请求。依靠的是JavaScript提供的一个对象XHR（XmlHttpResponse），封装了这个对象。</p>
<p>4.ajax()使用方式。需要传递一个方法体作为方法的参数来使用，一对大括号称之为方法体。ajax接受多个参数，参数与参数之间要求使用逗号分割，每一组参数之间使用冒号分隔，参数的组成部分一个是参数的名称（不能随意的定义），另一个是参数的值，参数的值要求是字符串来标识。参数的声明顺序没有要求。用语法结构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">	<span class="attr">url</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>5.ajax()函数参数的含义：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>标识请求的url地址,不能包含参数列表部分的内容。例如：url：”localhost:8080&#x2F;users&#x2F;reg”</td>
</tr>
<tr>
<td>type</td>
<td>请求的类型（GET和POST）。例如：type： “POST”</td>
</tr>
<tr>
<td>data</td>
<td>向指定的请求url地址提交的数据。例如： data: “username&#x3D;neko&amp;pwd&#x3D;123”</td>
</tr>
<tr>
<td>dataType</td>
<td>提交的数据的类型。数据的类型一般指定为json类型。dataType: “json”</td>
</tr>
<tr>
<td>success</td>
<td>当服务器正常响应客户端或浏览器时，会自动调用success参数的方法，并且将服务器返回的数据以参数的形式传递给这个方法的参数上</td>
</tr>
<tr>
<td>error</td>
<td>当服务器未正常响应客户端或浏览器时，会自动调用error参数的方法，并且将服务器返回的数据以参数的形式传递给这个方法的参数上</td>
</tr>
</tbody></table>
<p>6.js代码可以独立声明在一个js的文件里或者声明在一个script标签中。</p>
<p>7.js代码无法正常被服务器解析执行，体现在点击页面中的按钮没有任何响应。解决方案：</p>
<ul>
<li>在项目的maven下clear清理项目-install重新部署</li>
<li>在项目的file选项下-cash清理缓存</li>
<li>重新去构建项目：build选项下-rebuild选项</li>
</ul>
<h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><p>用户输入用户名和密码将数据提交给后台数据库进行查询，若存在对应的用户名和密码则登录成功，登录成功之后跳转到系统的主页就是index.html，跳转在前端使用jquery来完成。</p>
<h3 id="1-登录-持久层"><a href="#1-登录-持久层" class="headerlink" title="1 登录-持久层"></a>1 登录-持久层</h3><h4 id="1-1-规划需要执行的SQL语句"><a href="#1-1-规划需要执行的SQL语句" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>依据用户提交的用户名和密码做select查询。密码的校验在业务层执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * frome t_user where username=?</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：如果在分析过程中发现某个功能模块已经开发完成，那么就可以省略当前的开发步骤，这个分析过程不能省略。</p>
</blockquote>
<h4 id="1-2-接口设计和方法"><a href="#1-2-接口设计和方法" class="headerlink" title="1.2 接口设计和方法"></a>1.2 接口设计和方法</h4><blockquote>
<p>已经有了mapper映射，不用重复开发。单元测试也是无需单独执行了。</p>
</blockquote>
<h3 id="2-登录-业务层"><a href="#2-登录-业务层" class="headerlink" title="2 登录-业务层"></a>2 登录-业务层</h3><h4 id="2-1-规划异常"><a href="#2-1-规划异常" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.用户名对应的密码错误，抛出密码匹配失败的异常：PasswordNotMatchException异常。属于运行时异常和业务异常。</p>
<p>2.用户名没有没找到，抛出异常：UsernameNotFountdException。属于运行时异常和业务异常。</p>
<p>3.异常的编写：</p>
<ul>
<li>业务层异常需要继承ServiceException异常类。</li>
<li>在具体的异常类中定义构造方法（可以使用快捷键来生成，5个构造方法）。</li>
</ul>
<h4 id="2-2-设计业务层接口和抽象方法"><a href="#2-2-设计业务层接口和抽象方法" class="headerlink" title="2.2 设计业务层接口和抽象方法"></a>2.2 设计业务层接口和抽象方法</h4><p>1.直接在IUserService接口中编写抽象方法，login(String username,String password)。将当前登录成功的用户数据以当前用户对象的形式进行返回。状态管理：可以将数据保存在cookie或者session中，可以避免重复度很高的数据多次频繁操作进行获取（用户名、用户id-存放在session中，用户头像-存放在cookie中）。</p>
<p>2.需要在实现类中实现接口的抽象方法。</p>
<p>3.在测试类中测试业务层登录的方法是否可以有效。</p>
<h4 id="2-3-抽象方法的实现"><a href="#2-3-抽象方法的实现" class="headerlink" title="2.3 抽象方法的实现"></a>2.3 抽象方法的实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录功能</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前匹配的用户数据，如果没有则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="comment">// 根据用户名称来查询用户的数据是否存在，若不存在则抛出异常</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUsername(username);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检测用户的密码是否匹配</span></span><br><span class="line">        <span class="comment">// 1. 先获取到数据库中的加密之后的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldPassword</span> <span class="operator">=</span> result.getPassword();</span><br><span class="line">        <span class="comment">// 2. 和用户传递过来的密码进行比较</span></span><br><span class="line">        <span class="comment">// 2.1 先获取盐值： 上一次在注册时自动生成的盐值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">salt</span> <span class="operator">=</span> result.getSalt();</span><br><span class="line">        <span class="comment">// 2.1 将用户的密码按照相同的md5算法的规则进行加密</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newMd5Password</span> <span class="operator">=</span> getMD5Password(password, salt);</span><br><span class="line">        <span class="comment">// 3. 将密码进行比较</span></span><br><span class="line">        <span class="keyword">if</span> (!newMd5Password.equals(oldPassword))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断is_delete字段的值是否被标记为删除(1)</span></span><br><span class="line">        <span class="keyword">if</span> (result.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只将登录的用户的uid,username,avatar返回,是为了辅助其他页面做数据展示使用,其他不需要的数据不需要返回，这样压缩数据体量，后面调用时提升性能</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUid(result.getUid());</span><br><span class="line">        user.setUsername(result.getUsername());</span><br><span class="line">        user.setAvatar(result.getAvatar());</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-登录控制层"><a href="#3-登录控制层" class="headerlink" title="3 登录控制层"></a>3 登录控制层</h3><h4 id="3-1-处理异常"><a href="#3-1-处理异常" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>业务层抛出的异常是什么，需要在统一异常处理类中进行统一的捕获和处理，如果业务层抛出的异常类型已经在统一异常处理类中曾经处理过，则不需要重复添加。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> UserNotFoundException)&#123;</span><br><span class="line">            result.setCode(<span class="number">5001</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> PasswordNotMatchException)&#123;</span><br><span class="line">            result.setCode(<span class="number">5002</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户密码错误&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-2-设计请求"><a href="#3-2-设计请求" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请求路径：/user/login</span><br><span class="line">请求方式：POST</span><br><span class="line">请求数据：String username, String password, HttpSession session</span><br><span class="line">响应结果: JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-处理请求"><a href="#3-3-处理请求" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>在UserController类中编写处理请求的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userdata</span> <span class="operator">=</span> userService.login(username, password);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,userdata);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-登录-前端页面"><a href="#4-登录-前端页面" class="headerlink" title="4 登录-前端页面"></a>4 登录-前端页面</h3><p>1.在login.html页面中依据前面所设置的请求来发送ajax请求。</p>
<p>点击登录按钮触发点击事件发起ajax请求，登录成功后跳转到首页。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">			$(<span class="string">&quot;#btn-login&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">url</span>: <span class="string">&quot;/users/login&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">data</span>: $(<span class="string">&quot;#form-login&quot;</span>).<span class="title function_">serialize</span>(),</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="comment">// console.log($(&quot;#form-login&quot;).serialize());</span></span></span><br><span class="line"><span class="language-javascript">						<span class="comment">// console.log(json);</span></span></span><br><span class="line"><span class="language-javascript">						<span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">							<span class="title function_">alert</span>(json.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">							<span class="comment">// 登录成功跳转到系统主页</span></span></span><br><span class="line"><span class="language-javascript">							<span class="comment">// 相对路径来确定跳转的页面</span></span></span><br><span class="line"><span class="language-javascript">							<span class="comment">//location 地址栏 href引用资源</span></span></span><br><span class="line"><span class="language-javascript">							location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">						&#125;</span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="title function_">alert</span>(<span class="string">&quot;登录时产生未知的错误!&quot;</span> + xhr.<span class="property">message</span>);</span></span><br><span class="line"><span class="language-javascript">					&#125;</span></span><br><span class="line"><span class="language-javascript">				&#125;);</span></span><br><span class="line"><span class="language-javascript">			&#125;);</span></span><br><span class="line"><span class="language-javascript">		</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.访问页面进行用户的登录操作。</p>
<h2 id="用户会话session"><a href="#用户会话session" class="headerlink" title="用户会话session"></a>用户会话session</h2><p>session对象主要存储在服务器端，可以用与保存服务器的临时数据的对象，所保存的数据可以在整个项目中都可以通过访问来获取，把session中的数据看做一个共享的数据，不再依赖于某一个请求的方法。首次登录的时候所获取的用户数据，转移到session对象即可。session.getAttribute(“key”)可以将获取session中的数据这种行为进行封装，封装在BaseController类中。</p>
<p>1.封装session对象中数据的获取（封装在控制器的父类（BaseController）中）、数据的设置（当用户登录成功后进行数据的设置，设置到全局的session 对象中）。</p>
<p>2.在父类中封装两个数据：获取uid和获取username对应的两个方法。用户头像暂时不考虑，将来封装到cookie中来使用。session可以保存任何数据类型（返回Object对象），cookie只能保存String类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session对象中当前登录用户的uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前登录的用户uid的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Integer <span class="title function_">getuidFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//getAttribute返回的是Object，所以将它转为字符串，然后用包装器转为我们想要的Integer类型,而session只能保存字符串</span></span><br><span class="line">       <span class="keyword">return</span> Integer.valueOf(session.getAttribute(<span class="string">&quot;uid&quot;</span>).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取session对象中当前登录用户的username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> session session对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前登录用户的用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">getUsernameFromSession</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> session.getAttribute(<span class="string">&quot;username&quot;</span>).toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3.在登录的方法中将数据封装在session对象中。服务器端的项目在启动时会自动创建一个session对象，已经是一个全局的session对象。SpringBoot直接使用session对象，如果将Http Session类型的对象作为请求处理方法的参数，SpringBoot会自动将全局的session对象注入到请求处理方法的session形参上。</p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器：首先将所有的请求统一拦截到拦截器中，可以在拦截器中定义过滤的规则，如果不满足设置的过滤规则，统一的处理是重新去打开login.html页面(重定向和转发),这里使用重定向。</p>
<p>在SpringBoot项目中拦截器的定义和使用。SpringBoot是依靠SpringMVC来完成的。SpringMVC提供了一个HandlerInterceptor接口，用于表示定义一个拦截器。首先自定义一个类然后实现这个接口，这个类就成为拦截器。</p>
<p>1.首先自定义一个类，让这个类实现HandlerInterceptor接口，标识为一个拦截器类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 定义一个拦截器 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测全局session对象中是否有uid数据，若有则放行，否者重定向到登录页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response  响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler   处理器(url+Controller:映射)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  若返回值为true表示放行当前的请求，false则表示拦截当前的请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// HttpServletRequest对象来获取session对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">uidObj</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;uid&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (uidObj == <span class="literal">null</span>)&#123;<span class="comment">// 说明用户还没有登录过系统，则重定向到login.html页面</span></span><br><span class="line">            response.sendRedirect(<span class="string">&quot;/web/login.html&quot;</span>);<span class="comment">// 浏览器重新发起请求</span></span><br><span class="line">            <span class="comment">// 结束后续的调用</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将请求放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.注册过滤器：添加白名单（哪些资源可以在不登录的情况下访问：登录注册页面和url请求、样式、商品详情等）、添加黑名单（在用户登录的状态下才可以访问的页面资源）。</p>
<p>3.注册过滤器的技术：借助WebMvcConfigure接口，可以将用户定义的拦截器进行注册，才可以保证拦截器能够生效和使用。定义一个类，然后让这个类实现WebMvcConfigure接口。配置信息，建议存放在项目的config包结构下。</p>
<p>WebMvcConfigurer接口默认方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将自定义的拦截器进行注册</span></span><br><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** LoginInterceptor的注册配置类 */</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 加载当前的拦截器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptorConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 配置自定义拦截器 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addInterceptors(registry);</span><br><span class="line">        <span class="comment">// 创建自定义的拦截器对象</span></span><br><span class="line">        <span class="type">HandlerInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>();</span><br><span class="line">        <span class="comment">// 配置白名单：存放在一个List集合</span></span><br><span class="line">        List&lt;String&gt; patterns = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// static下的所有样式和static/web下的部分页面还有某些url请求</span></span><br><span class="line">        patterns.add(<span class="string">&quot;/bootstrap3/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/css/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/images/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/js/**&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/register.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/login.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/index.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/web/product.html&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/reg&quot;</span>);</span><br><span class="line">        patterns.add(<span class="string">&quot;/users/login&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完成自定义拦截器的注册</span></span><br><span class="line">        registry.addInterceptor(interceptor).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(patterns); <span class="comment">// 拦截项目所有的请求除了配置的白名单集合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.白名单失效解决方案：提示重定向次数过多，login.html页面无法访问。将浏览器cookie清除，再将浏览器初始化设置。</p>
<p>SpringMVC执行流程：</p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/image-20220413220452358.png" class="" title="image-20220413220452358">

<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/image-20220405200940556.png" class="" title="image-20220405200940556">

<p>源码解析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 1在调用所有处理请求的方法之前被自动调用执行的方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2在ModelAndView对象返回之后被调用的方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3在整个请求所有关联的资源被执行完毕最后所执行的方法</span></span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, <span class="meta">@Nullable</span> Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>需要用户提交原始密码和新密码，再根据当前登录的用户进行信息的修改操作。</p>
<h3 id="1-修改密码-持久层"><a href="#1-修改密码-持久层" class="headerlink" title="1.修改密码-持久层"></a>1.修改密码-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-1"><a href="#1-1-规划需要执行的SQL语句-1" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>根据用户的uid修改用户password值。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> password<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>

<p>根据uid查询用户的数据。在修改密码之前，首先要保证当前这用户的数据存在，检测是否被标记为已经删除（管理员可能会误删）、检测输入的原始密码是否正确。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user <span class="keyword">where</span> uid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>

<h4 id="1-2-设计接口和抽象方法"><a href="#1-2-设计接口和抽象方法" class="headerlink" title="1.2 设计接口和抽象方法"></a>1.2 设计接口和抽象方法</h4><p>UserMapper接口，将以上的的两个方法的抽象定义出来。将来映射到sql语句上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户的uid来修改用户密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid   用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 用户输入的新密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改的执行者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 修改数据的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  返回值为受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updatePasswordByUid</span><span class="params">(Integer uid,</span></span><br><span class="line"><span class="params">                                String password,</span></span><br><span class="line"><span class="params">                                String modifiedUser,</span></span><br><span class="line"><span class="params">                                Date modifiedTime)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户的id查询用户的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 若找到返回对象，否者返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-SQL的映射"><a href="#1-3-SQL的映射" class="headerlink" title="1.3 SQL的映射"></a>1.3 SQL的映射</h4><p>配置到映射文件UserMapper.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updatePasswordByUid&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_user SET</span><br><span class="line">          password=#&#123;password&#125;,</span><br><span class="line">          modified_user=#&#123;modifiedUser&#125;,</span><br><span class="line">          modified_time=#&#123;modifiedTime&#125;,</span><br><span class="line">        where uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserEntityMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_user WHERE uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>做单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updatePasswordByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.updatePasswordByUid(</span><br><span class="line">        <span class="number">1</span>,<span class="string">&quot;44&quot;</span>,<span class="string">&quot;管理员&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(userMapper.findByUid(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-修改密码-业务层"><a href="#2-修改密码-业务层" class="headerlink" title="2.修改密码-业务层"></a>2.修改密码-业务层</h3><h4 id="2-1-规划异常-1"><a href="#2-1-规划异常-1" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.用户的原密码错误，is_delete&#x3D;&#x3D;1、uid找不到。都是用户数据不存在的异常UserNotFoundException。</p>
<p>2.update在更新时，有可能产生未知的异常，UpdateException.</p>
<h4 id="2-2-设计接口和抽象方法-1"><a href="#2-2-设计接口和抽象方法-1" class="headerlink" title="2.2 设计接口和抽象方法"></a>2.2 设计接口和抽象方法</h4><p>执行用户修改密码的核心方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">(Integer uid, String username, String oldPassword, String newPassword)</span> &#123;</span><br><span class="line">        <span class="comment">// 进入了修改密码界面但是在改密码时可能被管理员删除了，以防万一进行判断</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span> || result.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户数据不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 原始密码和数据库中密码进行比较</span></span><br><span class="line">        <span class="comment">// 输入的原密码加密后和数据库中的密码(已加密)对比</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldMd5Password</span> <span class="operator">=</span> getMD5Password(oldPassword, result.getSalt());</span><br><span class="line">        <span class="keyword">if</span> (!result.getPassword().equals(oldMd5Password))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PasswordNotMatchException</span>(<span class="string">&quot;用户密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将新密码设置到数据库中，将新的密码进行加密再去更新</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newMd5Password</span> <span class="operator">=</span> getMD5Password(newPassword, result.getSalt());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updatePasswordByUid(uid, newMd5Password, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span> (rows !=<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新数据时产生未知的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changePassword</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.changePassword(<span class="number">14</span>,<span class="string">&quot;管理员&quot;</span>,<span class="string">&quot;666&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-修改密码-控制器"><a href="#3-修改密码-控制器" class="headerlink" title="3.修改密码-控制器"></a>3.修改密码-控制器</h3><h4 id="3-1-处理异常-1"><a href="#3-1-处理异常-1" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>UpdateException需要配置在统一的异常处理方法中。</p>
<h4 id="3-2-设计请求-1"><a href="#3-2-设计请求-1" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/users/change_password</span><br><span class="line">post</span><br><span class="line">String oldPassword, String newPassword, HttpSession session// 需要和表单中的name属性值保持一致</span><br><span class="line">JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-处理请求-1"><a href="#3-3-处理请求-1" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;change_password&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">changePassword</span><span class="params">(String oldPassword,</span></span><br><span class="line"><span class="params">                                           String newPassword,</span></span><br><span class="line"><span class="params">                                           HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getuidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        userService.changePassword(uid,username,oldPassword,newPassword);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;修改密码成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-修改密码-前端页面"><a href="#4-修改密码-前端页面" class="headerlink" title="4.修改密码-前端页面"></a>4.修改密码-前端页面</h3><p>password.html中添加ajax请求的处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-change-password&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/users/change_password&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&quot;#form-change-password&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>)&#123;</span><br><span class="line">            <span class="comment">// console.log($(&quot;#form-change-password&quot;).serialize());</span></span><br><span class="line">            <span class="comment">// console.log(json);</span></span><br><span class="line">            <span class="title function_">alert</span>(json.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">//修改密码成功跳转到登录页面</span></span><br><span class="line">                <span class="comment">// 相对路径来确定跳转的页面</span></span><br><span class="line">                <span class="comment">//location 地址栏 href引用资源</span></span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>)&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;修改密码时产生未知的错误!&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="个人资料"><a href="#个人资料" class="headerlink" title="个人资料"></a>个人资料</h2><h3 id="1-个人资料-持久层"><a href="#1-个人资料-持久层" class="headerlink" title="1.个人资料-持久层"></a>1.个人资料-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-2"><a href="#1-1-规划需要执行的SQL语句-2" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.更新用户信息的SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> phone<span class="operator">=</span>?,email<span class="operator">=</span>?,gender<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>

<p>2.根据用户名查询用户的数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_user where uid=?</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查询用户的数据不需要再重复开发。</p>
</blockquote>
<h4 id="1-2-接口与抽象方法"><a href="#1-2-接口与抽象方法" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>更新用户信息的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 更新用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span>  返回值为受影响的行数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Integer <span class="title function_">updateInfoByUid</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-抽象方法的映射"><a href="#1-3-抽象方法的映射" class="headerlink" title="1.3 抽象方法的映射"></a>1.3 抽象方法的映射</h4><p>在UserMapper.xml文件中编写映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateInfoByUid&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_user</span><br><span class="line">        SET</span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                if表示条件判断标签，test属性接受的是一个返回值为boolean类型的条件，若test条件的结果为true则执行if标签内部的语句</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;phone!=null&quot;</span>&gt;</span>phone = #&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email!=null&quot;</span>&gt;</span>email = #&#123;email&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender!=null&quot;</span>&gt;</span>gender = #&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            modified_user=#&#123;modifiedUser&#125;,</span><br><span class="line">            modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">        WHERE uid = #&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在测试类中完成功能测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateInfoByUid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUid(<span class="number">15</span>);</span><br><span class="line">        user.setPhone(<span class="string">&quot;10086&quot;</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;kuroneko@qq.com&quot;</span>);</span><br><span class="line">        user.setGender(<span class="number">1</span>);</span><br><span class="line">        userMapper.updateInfoByUid(user);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-个人资料-业务层"><a href="#2-个人资料-业务层" class="headerlink" title="2.个人资料-业务层"></a>2.个人资料-业务层</h3><h4 id="2-1-异常规划"><a href="#2-1-异常规划" class="headerlink" title="2.1 异常规划"></a>2.1 异常规划</h4><p>1.设计两个功能：</p>
<ul>
<li>当打开页面时获取用户的信息并且填充到对应的文本框中。</li>
<li>检测用户点击修改按钮事件则执行修改用户信息</li>
</ul>
<p>2.打开页面的时候有可能找不到用户数据（id_delete &#x3D;&#x3D; 1）。点击删除按钮之前需要再次去检测用户的数据是否存在，因为在修改资料这段时间，用户数据可能会被别人删除。</p>
<h4 id="2-2-接口和抽象方法"><a href="#2-2-接口和抽象方法" class="headerlink" title="2.2 接口和抽象方法"></a>2.2 接口和抽象方法</h4><p>主要有两个功能的模块，对应的是两个抽象方法的设计。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据uid查询用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    User <span class="title function_">getByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 包含要更改的用户数据（username,phone,gender）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">(Integer uid, String username, User user)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法"><a href="#2-3-实现抽象方法" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>在UserServiceImpl类中添加两个抽象方法的具体实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据uid查询用户数据(username,phone,email,gender)</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 用户数据(username,phone,email,gender)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> User <span class="title function_">getByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="literal">null</span> || result.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUsername(result.getUsername());</span><br><span class="line">       user.setPhone(result.getPhone());</span><br><span class="line">       user.setEmail(result.getEmail());</span><br><span class="line">       user.setGender(result.getGender());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新用户数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> uid 用户的id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> user 包含要更改的用户数据（username,phone,gender）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">(Integer uid, String username, User user)</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="literal">null</span> || result.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 手动将uid封装到user对象，因为要通过uid更新数据</span></span><br><span class="line">       user.setUid(uid);</span><br><span class="line">       <span class="comment">//user.setUsername(username); 用户名不能修改</span></span><br><span class="line">       user.setModifiedUser(username);</span><br><span class="line">       user.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateInfoByUid(user);</span><br><span class="line">       <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByUid</span><span class="params">()</span> &#123;</span><br><span class="line">       System.err.println(userService.getByUid(<span class="number">15</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setPhone(<span class="string">&quot;110&quot;</span>);</span><br><span class="line">       user.setEmail(<span class="string">&quot;github.com&quot;</span>);</span><br><span class="line">       user.setGender(<span class="number">1</span>);</span><br><span class="line">       userService.changeInfo(<span class="number">15</span>,<span class="string">&quot;管理员&quot;</span>,user);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-个人资料-控制层"><a href="#3-个人资料-控制层" class="headerlink" title="3.个人资料-控制层"></a>3.个人资料-控制层</h3><h4 id="3-1-处理异常-2"><a href="#3-1-处理异常-2" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><blockquote>
<p>暂无</p>
</blockquote>
<h4 id="3-2-设计请求-2"><a href="#3-2-设计请求-2" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>1.一点击个人资料就发送当前用户的查询然后回显到标签容器中。</p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/image-20220415172237546.png" class="" title="image-20220415172237546">

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/users/get_by_uid</span><br><span class="line">GET</span><br><span class="line">HttpSession session</span><br><span class="line">JsonResult&lt;User&gt;</span><br></pre></td></tr></table></figure>

<p>2.点击修改按钮发送用户的数据更新请求设计。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/users/chang_info</span><br><span class="line">POST</span><br><span class="line">User user, HttpSession session</span><br><span class="line">JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-处理请求-2"><a href="#3-3-处理请求-2" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;get_by_uid&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;User&gt; <span class="title function_">getByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">uid</span> <span class="operator">=</span> userService.getByUid(getuidFromSession(session));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,uid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;change_info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">changeInfo</span><span class="params">(User user, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">// user对象中有：username、phone、email、gender</span></span><br><span class="line">        <span class="comment">// 从session中获取uid需要再次封装到user对象中，更新资料需要用uid</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getuidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        userService.changeInfo(uid,username,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-个人资料-前端页面"><a href="#4-个人资料-前端页面" class="headerlink" title="4.个人资料-前端页面"></a>4.个人资料-前端页面</h3><img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/image-20220415183921929.png" class="" title="image-20220415183921929">

<p>1.在打开userdata.html页面自动发送ajax请求（get_by_uid），查询到的数据填充到这个页面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">			 * 一旦检测到当前的页面被加载就会触发ready方法</span></span><br><span class="line"><span class="comment">			 * $(document).ready(function()&#123;</span></span><br><span class="line"><span class="comment">			 *     // 编写业务代码</span></span><br><span class="line"><span class="comment">			 * &#125;);</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">					<span class="attr">url</span>: <span class="string">&quot;/users/get_by_uid&quot;</span>,</span><br><span class="line">					<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">					<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">					<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">						<span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">							<span class="comment">// 将响应数据重新设置到控件中</span></span><br><span class="line">							$(<span class="string">&quot;#username&quot;</span>).<span class="title function_">val</span>(json.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">							$(<span class="string">&quot;#phone&quot;</span>).<span class="title function_">val</span>(json.<span class="property">data</span>.<span class="property">phone</span>);</span><br><span class="line">							$(<span class="string">&quot;#email&quot;</span>).<span class="title function_">val</span>(json.<span class="property">data</span>.<span class="property">email</span>);</span><br><span class="line">							<span class="comment">// 三目运算符，gender == 0则选中对应的控件</span></span><br><span class="line">							<span class="keyword">let</span> radio = json.<span class="property">data</span>.<span class="property">gender</span> == <span class="number">0</span> ?</span><br><span class="line">									$(<span class="string">&quot;#gender-female&quot;</span>) : $(<span class="string">&quot;#gender-male&quot;</span>);</span><br><span class="line">							<span class="comment">// prop()表示给某个元素添加属性及属性的值</span></span><br><span class="line">							<span class="comment">// checkd=&quot;checked&quot;表示默认选中</span></span><br><span class="line">							radio.<span class="title function_">prop</span>(<span class="string">&quot;checked&quot;</span>, <span class="string">&quot;checked&quot;</span>);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>)&#123;</span><br><span class="line">						<span class="title function_">alert</span>(<span class="string">&quot;查询用户信息时产生未知的错误!&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;)</span><br></pre></td></tr></table></figure>

<p>2.在检测到用户点击了修改按钮之后发送一个ajax请求（change_info）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-change-info&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">					<span class="attr">url</span>: <span class="string">&quot;/users/change_info&quot;</span>,</span><br><span class="line">					<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">					<span class="attr">data</span>: $(<span class="string">&quot;#form-change-info&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">					<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">					<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>)&#123;</span><br><span class="line">						<span class="title function_">alert</span>(json.<span class="property">message</span>);</span><br><span class="line">						<span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">							location.<span class="property">href</span> = <span class="string">&quot;userdata.html&quot;</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>)&#123;</span><br><span class="line">						<span class="title function_">alert</span>(<span class="string">&quot;修改密码时产生未知的错误!&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="上传头像"><a href="#上传头像" class="headerlink" title="上传头像"></a>上传头像</h2><h3 id="1-上传头像-持久层"><a href="#1-上传头像-持久层" class="headerlink" title="1 上传头像-持久层"></a>1 上传头像-持久层</h3><h4 id="1-1-规划SQL"><a href="#1-1-规划SQL" class="headerlink" title="1.1 规划SQL"></a>1.1 规划SQL</h4><p>对应的是一个更新用户avatar字段的sql语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t_user <span class="keyword">set</span> avatar<span class="operator">=</span>?,modified_user<span class="operator">=</span>?,modified_time<span class="operator">=</span>? <span class="keyword">where</span> uid<span class="operator">=</span>?	</span><br></pre></td></tr></table></figure>

<h4 id="1-2-设计接口和抽象方法-1"><a href="#1-2-设计接口和抽象方法-1" class="headerlink" title="1.2 设计接口和抽象方法"></a>1.2 设计接口和抽象方法</h4><p>在UserMapper接口中定义抽象方法用于修改用户的头像。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>(&quot;SQL映射文件中的占位符#&#123;&#125;中的变量名&quot;)： 解决的问题：当SQL语句的占位符和映射的接口方法参数名不一致时，需要将某个参数强行注入到某个占位符的变量时，可以使用<span class="doctag">@Param</span>注解来标注映射的关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 根据uid来修改用户的头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改者</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateAvatarByUid</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;uid&quot;)</span> Integer uid,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;avatar&quot;)</span> String avatar,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-编写接口的映射"><a href="#1-3-编写接口的映射" class="headerlink" title="1.3 编写接口的映射"></a>1.3 编写接口的映射</h4><p>UserMapper.xml文件中编写映射的SQL语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateAvatarByUid&quot;</span>&gt;</span></span><br><span class="line">        UPDATE t_user</span><br><span class="line">        SET</span><br><span class="line">            avatar=#&#123;avatar&#125;,</span><br><span class="line">            modified_user=#&#123;modifiedUser&#125;,</span><br><span class="line">            modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">        WHERE</span><br><span class="line">            uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAvatarByUid</span><span class="params">()</span> &#123;</span><br><span class="line">        userMapper.updateAvatarByUid(<span class="number">15</span>, <span class="string">&quot;/upload/avatar.png&quot;</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-上传头像-业务层"><a href="#2-上传头像-业务层" class="headerlink" title="2 上传头像-业务层"></a>2 上传头像-业务层</h3><h4 id="2-1-规划异常-2"><a href="#2-1-规划异常-2" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.用户数据不存在的异常UserNotFoundException</p>
<p>2.用户在更新数据时产生的未知的异常UpdateException</p>
<h4 id="2-2-设计接口和抽象方法-2"><a href="#2-2-设计接口和抽象方法-2" class="headerlink" title="2.2 设计接口和抽象方法"></a>2.2 设计接口和抽象方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户的头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户头像路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username  用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">changeAvatar</span><span class="params">(Integer uid,</span></span><br><span class="line"><span class="params">                      String avatar,</span></span><br><span class="line"><span class="params">                      String username)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-1"><a href="#2-3-实现抽象方法-1" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>业务层的更新用户头像的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户的头像</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> avatar 用户头像路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username  用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeAvatar</span><span class="params">(Integer uid,</span></span><br><span class="line"><span class="params">                             String avatar,</span></span><br><span class="line"><span class="params">                             String username)</span>&#123;</span><br><span class="line">        <span class="comment">// 查询当前用户是否存在</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.findByUid(uid);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span> || result.getIsDelete() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateAvatarByUid(uid, avatar, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>单元测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeAvatar</span><span class="params">()</span> &#123;</span><br><span class="line">        userService.changeAvatar(<span class="number">15</span>,<span class="string">&quot;/upload/test.png&quot;</span>,<span class="string">&quot;猪猪侠&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-上传头像-控制层"><a href="#3-上传头像-控制层" class="headerlink" title="3 上传头像-控制层"></a>3 上传头像-控制层</h3><h4 id="3-1-规划异常-1"><a href="#3-1-规划异常-1" class="headerlink" title="3.1 规划异常"></a>3.1 规划异常</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件异常的父类：</span><br><span class="line">    FileUploadException 泛指文件上传的异常（父类）继承RuntimeException</span><br><span class="line">父类是：FileUploadException</span><br><span class="line">    FileEmptyException 文件为空异常</span><br><span class="line">    FileSizeException 文件大小超出限制</span><br><span class="line">    FileTypeException 文件类型异常</span><br><span class="line">    FileUploadIOException 文件读写异常</span><br><span class="line">    FileStateException 文件状态异常</span><br></pre></td></tr></table></figure>

<blockquote>
<p>五个构造方法显示的声明出来，再去继承相关的父类。</p>
</blockquote>
<h4 id="3-2-处理异常"><a href="#3-2-处理异常" class="headerlink" title="3.2 处理异常"></a>3.2 处理异常</h4><p>在基类BaseController类中编写和统一处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileSizeException) &#123;</span><br><span class="line">            result.setCode(<span class="number">6001</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;文件大小超出限制&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileTypeException) &#123;</span><br><span class="line">            result.setCode(<span class="number">6002</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;文件类型异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileStateException) &#123;</span><br><span class="line">            result.setCode(<span class="number">6003</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;文件状态异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FileUploadIOException) &#123;</span><br><span class="line">            result.setCode(<span class="number">6004</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;文件读写异常&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在异常统一处理方法handleException的参数上添加新的异常处理作为他的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = &#123;ServiceException.class, FileUploadException.class&#125;)</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-设计请求"><a href="#3-3-设计请求" class="headerlink" title="3.3 设计请求"></a>3.3 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/users/change_avatar</span><br><span class="line">POST (get请求提交数据2kb)</span><br><span class="line">HttpSession session, MultipartFile file</span><br><span class="line">JsonResult&lt;String&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-处理请求"><a href="#3-4-处理请求" class="headerlink" title="3.4 处理请求"></a>3.4 处理请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * MultipartFile接口是SpringMVC提供，包装了获取文件类型的数据(任何类型文件都可以接受),SpringBoot整合了SpringMVC，只需要在处理请求的方法参数列表上声明一个MultipartFile类型的参数，然后Springboot会自动将文件中的数据赋值给这个参数</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@RequestParam</span> 表示请求中的参数，将请求中的参数注入到请求处理方法的某个参数上。若名称不一致则可以使用这个注解来标记和映射</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@RequestMapping(&quot;change_avatar&quot;)</span></span><br><span class="line"> <span class="keyword">public</span> JsonResult&lt;String&gt; <span class="title function_">changeAvatar</span><span class="params">(HttpSession session,</span></span><br><span class="line"><span class="params">                                        <span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span>&#123;</span><br><span class="line">     <span class="comment">// 判断文件是否为null</span></span><br><span class="line">     <span class="keyword">if</span> (file.isEmpty())&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileEmptyException</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 文件大小限制10兆</span></span><br><span class="line">     <span class="keyword">if</span> (file.getSize() &gt; AVATAR_MAX_SIZE)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileSizeException</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 判断文件的类型是否是我们规定的后缀</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> file.getContentType();</span><br><span class="line">     <span class="comment">// 如果集合保护某个元素则返回true</span></span><br><span class="line">     <span class="keyword">if</span> (!AVATAR_TYPE.contains(contentType))&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileTypeException</span>();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 上传的文件.../upload/文件.png</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">parent</span> <span class="operator">=</span></span><br><span class="line">             session.getServletContext().</span><br><span class="line">                     getRealPath(<span class="string">&quot;upload&quot;</span>);</span><br><span class="line">     <span class="comment">// File对象指向这个路径,File是否存在</span></span><br><span class="line">     <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(parent);</span><br><span class="line">     <span class="keyword">if</span> (!dir.exists())&#123; <span class="comment">// 目录是否存在</span></span><br><span class="line">         dir.mkdirs(); <span class="comment">// 创建目录</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 获取到这个文件名称，使用UUID工具来生成一个新的字符串来作为文件名，以防覆盖文件</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename(); <span class="comment">// avatar01.png</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>)); <span class="comment">// .png后缀</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> UUID.randomUUID().toString().toUpperCase() + suffix; <span class="comment">// xxx-xxx-xxx.png</span></span><br><span class="line">     <span class="type">File</span> <span class="variable">dest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, filename); <span class="comment">//dir目录下创建空文件</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// 参数file中数据写入到dest这个空文件中</span></span><br><span class="line">         file.transferTo(dest);</span><br><span class="line">     &#125;<span class="keyword">catch</span> (FileStateException e)&#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileStateException</span>();</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FileUploadIOException</span>();</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getuidFromSession(session);</span><br><span class="line">     <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">     <span class="comment">// 头像的路径 /upload/test.png</span></span><br><span class="line">     <span class="type">String</span> <span class="variable">avatar</span> <span class="operator">=</span> <span class="string">&quot;/upload/&quot;</span> + filename;</span><br><span class="line">     userService.changeAvatar(uid, avatar,username);</span><br><span class="line">     <span class="comment">// 返回头像的路径给前端展示</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK, avatar);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-上传头像-前端页面"><a href="#4-上传头像-前端页面" class="headerlink" title="4 上传头像-前端页面"></a>4 上传头像-前端页面</h3><p>在upload页面中编写上传头像的代码。</p>
<blockquote>
<p>说明：如果直接使用表单进行文件的上传，需要给表单显示的添加一个属性enctype&#x3D;”multipart&#x2F;form-data”声明出来，不会将目标文件的数据结构修改。</p>
</blockquote>
<h3 id="5-解决Bug"><a href="#5-解决Bug" class="headerlink" title="5. 解决Bug"></a>5. 解决Bug</h3><h4 id="5-1-更改默认的大小限制"><a href="#5-1-更改默认的大小限制" class="headerlink" title="5.1 更改默认的大小限制"></a>5.1 更改默认的大小限制</h4><p>SpriingMVC默认为1MB文件可以上传，需要我们手动去修改SpringMVC默认上传文件的大小。</p>
<p>方式1：直接在配置文件中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="comment"># 文件上传大小限制</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line">      <span class="comment"># 剩下的5MB可以装其他数据比如请求头</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">15MB</span></span><br></pre></td></tr></table></figure>

<p>方式二：Java代码设置文件的上传大小限制。主类中进行配置，可以定义一个方法，必须使用@Bean修饰。在类的前面添加@Configration注解进行修饰类。方法返回值必须是MultipartConfigElement类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.MultipartConfigFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.unit.DataSize;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.unit.DataUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.MultipartConfigElement;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">// MapperScan注解指定当前项目中的Mapper接口路径的位置，在项目启动时会自动加载所有的接口</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.kuroneko.store.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoreApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(StoreApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MultipartConfigElement <span class="title function_">getMultipartConfigElement</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个配置的工厂类对象</span></span><br><span class="line">        <span class="type">MultipartConfigFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MultipartConfigFactory</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置需要创建的对象的相关信息</span></span><br><span class="line">        factory.setMaxFileSize(DataSize.of(<span class="number">10</span>, DataUnit.MEGABYTES)); <span class="comment">// 文件最大10MB</span></span><br><span class="line">        factory.setMaxRequestSize(DataSize.of(<span class="number">15</span>, DataUnit.MEGABYTES)); <span class="comment">//请求中最大15mb</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过工厂类来创建MultipartConfigElement对象</span></span><br><span class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="5-2-显示头像"><a href="#5-2-显示头像" class="headerlink" title="5.2 显示头像"></a>5.2 显示头像</h4><p>通过ajax请求来提交文件，提交完成后返回json串，解析出data中数据，设置到img头像标签的src属性上。</p>
<ul>
<li>serialize()：可以将表单中的数据自动拼接成key&#x3D;value的结构进行提交服务器</li>
</ul>
<p>，一般提交的是普通控件类型中的数据（text、password、radio、checkbox）等</p>
<ul>
<li><p>FormData类：将表单中的数据保持原有的结构进行数据的提交。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form&quot;</span>)[<span class="number">0</span>]); <span class="comment">// 文件类型的数据可以使用FormData对象存储</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>ajax默认处理数据是按照字符串的形式进行处理和提交数据。关闭这两个默认的功能。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">processData: false, //  关闭使用字符串处理数据</span><br><span class="line">contentType: false, // 提交数据的形式，关闭默认使用字符串格式提交数据</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-3-登录后显示头像"><a href="#5-3-登录后显示头像" class="headerlink" title="5.3 登录后显示头像"></a>5.3 登录后显示头像</h4><p>在更新头像成功后，将服务器返回的头像路径保持在客户端cookie对象中，然后每次检测到用户打开上传头像页面（upload.html），在这个页面中通过ready()方法自动读取cookie中的头像地址并设置到img标签的src属性上。</p>
<p>1.设置cookie中的值：</p>
<p>在upload.html导入cookie.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;../bootstrap3/js/jquery.cookie.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span> charset=<span class="string">&quot;utf-8&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>调用cookie方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(key, value, time); <span class="comment">// 存活时间：天</span></span><br></pre></td></tr></table></figure>

<p>登录成功后将响应数据中的头像路径保存在cookie中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将服务器返回的头像设置到Cookie中</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>, json.<span class="property">data</span>.<span class="property">avatar</span>, &#123;<span class="attr">expires</span>: <span class="number">7</span>&#125;);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li></li>
</ol>
<p>在upload.html通过ready()自动读取cookie中的数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读cookie中的头像地址放到src属性</span></span><br><span class="line">			$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">let</span> avatar = $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(avatar);</span><br><span class="line">				<span class="comment">// 将cookie中的头像地址设置到src属性上</span></span><br><span class="line">				$(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, avatar);</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="5-4-显示最新头像"><a href="#5-4-显示最新头像" class="headerlink" title="5.4 显示最新头像"></a>5.4 显示最新头像</h4><p>改完头像肯定要去更新cookie，src属性值也要更新。</p>
<p>在更改完头像后，将最新的头像地址再次保存到cookie，同名保存会覆盖原有cookie中的值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将最新的头像地址再次保存到cookie</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,json.<span class="property">data</span>, &#123;<span class="attr">expires</span>:<span class="number">7</span>&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">			<span class="comment">// 读cookie中的头像地址放到src属性</span></span><br><span class="line">			$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">				<span class="keyword">let</span> avatar = $.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>);</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(avatar);</span><br><span class="line">				<span class="comment">// 将cookie中的头像地址设置到src属性上</span></span><br><span class="line">				$(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, avatar);</span><br><span class="line">			&#125;);</span><br><span class="line"></span><br><span class="line">			$(<span class="string">&quot;#btn-change-avatar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">					<span class="attr">url</span>: <span class="string">&quot;/users/change_avatar&quot;</span>,</span><br><span class="line">					<span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">					<span class="comment">// 表单中第一个</span></span><br><span class="line">					<span class="attr">data</span>: <span class="keyword">new</span> <span class="title class_">FormData</span>($(<span class="string">&quot;#form-change-avatar&quot;</span>)[<span class="number">0</span>]),</span><br><span class="line">					<span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">//  关闭使用字符串处理数据</span></span><br><span class="line">					<span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// 提交数据的形式，关闭默认使用字符串格式提交数据</span></span><br><span class="line">					<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">					<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>)&#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(json);</span><br><span class="line">						<span class="title function_">alert</span>(json.<span class="property">message</span>);</span><br><span class="line">						<span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">							<span class="comment">// 将服务器端返回的头像地址设置到img标签的src属性上</span></span><br><span class="line">							<span class="comment">// attr(属性，设置的属性值)：给某个属性设置属性值</span></span><br><span class="line">							$(<span class="string">&quot;#img-avatar&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>,json.<span class="property">data</span>);</span><br><span class="line">							<span class="comment">// 将最新的头像地址再次保存到cookie</span></span><br><span class="line">							$.<span class="title function_">cookie</span>(<span class="string">&quot;avatar&quot;</span>,json.<span class="property">data</span>, &#123;<span class="attr">expires</span>:<span class="number">7</span>&#125;);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>)&#123;</span><br><span class="line">						<span class="title function_">alert</span>(<span class="string">&quot;修改头像时产生未知的错误!&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;);</span><br><span class="line">		&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="新增收货地址"><a href="#新增收货地址" class="headerlink" title="新增收货地址"></a>新增收货地址</h2><h3 id="1-新增收货地址-数据库表的创建"><a href="#1-新增收货地址-数据库表的创建" class="headerlink" title="1 新增收货地址-数据库表的创建"></a>1 新增收货地址-数据库表的创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_address (</span><br><span class="line">	aid INT AUTO_INCREMENT COMMENT &#x27;收货地址id&#x27;,</span><br><span class="line">	uid INT COMMENT &#x27;归属的用户id&#x27;,</span><br><span class="line">	name VARCHAR(20) COMMENT &#x27;收货人姓名&#x27;,</span><br><span class="line">	province_name VARCHAR(15) COMMENT &#x27;省-名称&#x27;,</span><br><span class="line">	province_code CHAR(6) COMMENT &#x27;省-行政代号&#x27;,</span><br><span class="line">	city_name VARCHAR(15) COMMENT &#x27;市-名称&#x27;,</span><br><span class="line">	city_code CHAR(6) COMMENT &#x27;市-行政代号&#x27;,</span><br><span class="line">	area_name VARCHAR(15) COMMENT &#x27;区-名称&#x27;,</span><br><span class="line">	area_code CHAR(6) COMMENT &#x27;区-行政代号&#x27;,</span><br><span class="line">	zip CHAR(6) COMMENT &#x27;邮政编码&#x27;,</span><br><span class="line">	address VARCHAR(50) COMMENT &#x27;详细地址&#x27;,</span><br><span class="line">	phone VARCHAR(20) COMMENT &#x27;手机&#x27;,</span><br><span class="line">	tel VARCHAR(20) COMMENT &#x27;固话&#x27;,</span><br><span class="line">	tag VARCHAR(6) COMMENT &#x27;标签&#x27;,</span><br><span class="line">	is_default INT COMMENT &#x27;是否默认：0-不默认，1-默认&#x27;,</span><br><span class="line">	created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,</span><br><span class="line">	created_time DATETIME COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">	modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,</span><br><span class="line">	modified_time DATETIME COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">	PRIMARY KEY (aid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="2-新增收货地址-创建实体类"><a href="#2-新增收货地址-创建实体类" class="headerlink" title="2 新增收货地址-创建实体类"></a>2 新增收货地址-创建实体类</h3><p>创建一个类Address类，在类中用驼峰命名定义表的相关字段，继承BaseEntity类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 收货地址实体类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Integer aid;         	<span class="comment">// 收货地址</span></span><br><span class="line">        <span class="keyword">private</span> Integer uid;         	<span class="comment">// 归属的用户</span></span><br><span class="line">        <span class="keyword">private</span> String name;         	<span class="comment">//收货人姓名</span></span><br><span class="line">        <span class="keyword">private</span> String provinceName; 	<span class="comment">//省-名称</span></span><br><span class="line">        <span class="keyword">private</span> String provinceCode;	<span class="comment">//省-行政代号</span></span><br><span class="line">        <span class="keyword">private</span> String cityName;     	<span class="comment">//市-名称</span></span><br><span class="line">        <span class="keyword">private</span> String cityCode;     	<span class="comment">//市-行政代号</span></span><br><span class="line">        <span class="keyword">private</span> String areaName;     	<span class="comment">//区-名称</span></span><br><span class="line">        <span class="keyword">private</span> String areaCode;     	<span class="comment">//区-行政代号</span></span><br><span class="line">        <span class="keyword">private</span> String zip;          	<span class="comment">// 邮政编码</span></span><br><span class="line">        <span class="keyword">private</span> String address;      	<span class="comment">//详细地址</span></span><br><span class="line">        <span class="keyword">private</span> String phone;        	<span class="comment">//手机</span></span><br><span class="line">        <span class="keyword">private</span> String tel;          	<span class="comment">// 固话</span></span><br><span class="line">        <span class="keyword">private</span> String tag;          	<span class="comment">//标签</span></span><br><span class="line">        <span class="keyword">private</span> Integer isDefault;  	<span class="comment">//是否默认：0-不默认，1-默认</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-新增收货地址-持久层"><a href="#3-新增收货地址-持久层" class="headerlink" title="3 新增收货地址-持久层"></a>3 新增收货地址-持久层</h3><h4 id="3-1-各功能的开发顺序"><a href="#3-1-各功能的开发顺序" class="headerlink" title="3.1 各功能的开发顺序"></a>3.1 各功能的开发顺序</h4><p>当前收货地址功能模块：列表的展示、修改、删除、设置默认、新增收货地址。开发顺序：新增收货地址-列表展示-设置默认收货地址-删除收货地址-修改收货地址。</p>
<h4 id="3-2-规划需要执行的SQL语句"><a href="#3-2-规划需要执行的SQL语句" class="headerlink" title="3.2 规划需要执行的SQL语句"></a>3.2 规划需要执行的SQL语句</h4><p>1.对应的插入语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_address(除了aid外的字段列表) <span class="keyword">values</span>(字段值列表)</span><br></pre></td></tr></table></figure>

<p>2.规定一个用户的收货地址最多只能有20条数据对应。若超出20条，抛出异常。在插入用户数据之前先做查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> t_address <span class="keyword">where</span> uid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>

<h4 id="3-3-接口与抽象方法"><a href="#3-3-接口与抽象方法" class="headerlink" title="3.3 接口与抽象方法"></a>3.3 接口与抽象方法</h4><p>1.创建一个接口AddressMapper，定义上面两个SQL语句的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.Address;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 收货地址持久层的接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AddressMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入用户的收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address 收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Address address)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id统计收货地址数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前用户的收货地址总数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">countByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-4-配置SQL映射"><a href="#3-4-配置SQL映射" class="headerlink" title="3.4 配置SQL映射"></a>3.4 配置SQL映射</h4><p>创建一个AddressMapper.xml映射文件，在这个文件中添加抽象方法的SQL语句。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuroneko.store.mapper.AddressMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;AddressEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.kuroneko.store.entity.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;aid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;aid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;province_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;provinceName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;city_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cityName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_code&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaCode&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;area_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;areaName&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;is_default&quot;</span> <span class="attr">property</span>=<span class="string">&quot;isDefault&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;aid&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_address (</span><br><span class="line">            uid, name, province_name, province_code, city_name, city_code, area_name, area_code, zip,</span><br><span class="line">            address, phone, tel,tag, is_default, created_user, created_time, modified_user, modified_time</span><br><span class="line">        ) VALUES (</span><br><span class="line">                     #&#123;uid&#125;, #&#123;name&#125;, #&#123;provinceName&#125;, #&#123;provinceCode&#125;, #&#123;cityName&#125;, #&#123;cityCode&#125;, #&#123;areaName&#125;,</span><br><span class="line">                     #&#123;areaCode&#125;, #&#123;zip&#125;, #&#123;address&#125;, #&#123;phone&#125;, #&#123;tel&#125;, #&#123;tag&#125;, #&#123;isDefault&#125;, #&#123;createdUser&#125;,</span><br><span class="line">                     #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;</span><br><span class="line">                 )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;countByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Integer&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            COUNT(*)</span><br><span class="line">        FROM</span><br><span class="line">            t_address</span><br><span class="line">        WHERE</span><br><span class="line">            uid=#&#123;uid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.Address;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        address.setUid(<span class="number">23</span>);</span><br><span class="line">        address.setPhone(<span class="string">&quot;1008611&quot;</span>);</span><br><span class="line">        address.setName(<span class="string">&quot;女朋友&quot;</span>);</span><br><span class="line">        addressMapper.insert(address);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countByUid</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(<span class="number">23</span>);</span><br><span class="line">        System.err.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="4-新增收货地址-业务层"><a href="#4-新增收货地址-业务层" class="headerlink" title="4 新增收货地址-业务层"></a>4 新增收货地址-业务层</h3><h4 id="4-1-规划异常"><a href="#4-1-规划异常" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><p>若用户是第一次插入用户的收货地址，需要将当前地址作为默认的收货地址，若查询到统计总数为0则将当前地址的is_default值设置为1。查询统计的结果为0不代表异常。</p>
<p>查询到的结果大于20，需要抛出自定义业务控制异常AddressCountLimitException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.controller.ex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.ServiceException;</span><br><span class="line"><span class="comment">/** 收货地址总数超出限制的异常（20条） */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressCountLimitException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>插入数据时产生未知异常InsertException</p>
<h4 id="4-2-接口与抽象方法"><a href="#4-2-接口与抽象方法" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>1.创建一个IAddressService接口，定义业务的抽象方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.kuroneko.store.service;</span><br><span class="line"></span><br><span class="line">import com.kuroneko.store.entity.Address;</span><br><span class="line"></span><br><span class="line">/** 收货地址业务层接口 */</span><br><span class="line">public interface IAddressService &#123;</span><br><span class="line">    void addNewAddress(Integer uid, String username, Address address);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.创建一个AddressServiceImpl实现类，去实现接口中的抽象方法。</p>
<p>在配置文件中定义数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 收货地址总数 spring读取配置文件中数据：@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span><br><span class="line">user:</span><br><span class="line">  address:</span><br><span class="line">    max-count: 20</span><br></pre></td></tr></table></figure>

<p>在实现类中显示业务控制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.mapper.AddressMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.AddressCountLimitException;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 新增收货地址的实现类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IAddressService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AddressMapper addressMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 收货地址总数</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;user.address.max-count&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer maxCount;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNewAddress</span><span class="params">(Integer uid, String username, Address address)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用收货地址统计的方法</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= maxCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressCountLimitException</span>(<span class="string">&quot;用户收货地址超出上限&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// uid、isDelete</span></span><br><span class="line">        address.setUid(uid);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">isDefault</span> <span class="operator">=</span> count == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>; <span class="comment">// 1表示默认收货地址</span></span><br><span class="line">        address.setIsDefault(isDefault);</span><br><span class="line">        <span class="comment">// 补全四项日志</span></span><br><span class="line">        address.setCreatedUser(username);</span><br><span class="line">        address.setModifiedUser(username);</span><br><span class="line">        address.setCreatedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        address.setModifiedTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入收货地址的方法</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.insert(address);</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.测试业务层功能是否异常。AddressServiceTest</p>
<h4 id="4-3-实现抽象方法"><a href="#4-3-实现抽象方法" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><h3 id="5-新增收货地址-控制器"><a href="#5-新增收货地址-控制器" class="headerlink" title="5 新增收货地址-控制器"></a>5 新增收货地址-控制器</h3><h4 id="5-1-处理异常"><a href="#5-1-处理异常" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><p>业务层抛出收货地址总数超出上限（20条），在BaseController中处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AddressCountLimitException)&#123;</span><br><span class="line">            result.setCode(<span class="number">4003</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户收货地址超出上限的异常&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-2-设计请求"><a href="#5-2-设计请求" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/addresses/add_new_addresss</span><br><span class="line">post</span><br><span class="line">Address address, HttpSession session</span><br><span class="line">JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<h4 id="5-3-处理请求"><a href="#5-3-处理请求" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>在控制层创建AddressController来处理用户收货地址的请求和响应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;addresses&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AddressController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAddressService addressService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加收货地址</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;add_new_address&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addNewAddress</span><span class="params">(Address address, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getuidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        addressService.addNewAddress(uid, username, address);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK,<span class="string">&quot;新增收货地址成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先登录用户，然后访问<a href="http://localhost:8081/addresses/add_new_address?name=tom&amp;phone=111111111111111%E6%B5%8B%E8%AF%95">http://localhost:8081/addresses/add_new_address?name=tom&amp;phone=111111111111111测试</a></p>
<h3 id="6-新增收货地址-前端页面"><a href="#6-新增收货地址-前端页面" class="headerlink" title="6 新增收货地址-前端页面"></a>6 新增收货地址-前端页面</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="string">&quot;#btn-add-new-address&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/addresses/add_new_address&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&quot;#form-add-new-address&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(json.<span class="property">message</span>);</span><br><span class="line">            <span class="comment">/*if (json.state() == 200)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">						&#125;*/</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;新增收货地址产生未知的异常！&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="获取省市区列表"><a href="#获取省市区列表" class="headerlink" title="获取省市区列表"></a>获取省市区列表</h2><h3 id="1-获取省市区列表-数据库"><a href="#1-获取省市区列表-数据库" class="headerlink" title="1 获取省市区列表-数据库"></a>1 获取省市区列表-数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_dict_district (</span><br><span class="line">  id int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  parent varchar(6) DEFAULT NULL,</span><br><span class="line">  code varchar(6) DEFAULT NULL,</span><br><span class="line">  name varchar(16) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<p>parent属性表示的是父区域的代码号，省的父代码号+86</p>
<h3 id="2-获取省市区列表-实体类"><a href="#2-获取省市区列表-实体类" class="headerlink" title="2 获取省市区列表-实体类"></a>2 获取省市区列表-实体类</h3><p>创建一个District实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">District</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String parent;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-获取省市区列表-持久层"><a href="#3-获取省市区列表-持久层" class="headerlink" title="3 获取省市区列表-持久层"></a>3 获取省市区列表-持久层</h3><p>查询语句，根据父代号进行查询。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_dict_district <span class="keyword">where</span> parent<span class="operator">=</span>? <span class="keyword">order</span> <span class="keyword">by</span> code <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<p>定义抽象方法，DistrictMapper接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DistrictMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号查询区域信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 某个父区域下的所有区域列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">findByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictMapperTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistrictMapper districtMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByParent</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;District&gt; list = districtMapper.findByParent(<span class="string">&quot;110100&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (District d :</span><br><span class="line">                list) &#123;</span><br><span class="line">            System.out.println(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取省市区列表-业务层"><a href="#获取省市区列表-业务层" class="headerlink" title="获取省市区列表-业务层"></a>获取省市区列表-业务层</h3><p>1.创建接口IDistrictService,并定义抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父代号来查询区域消息（省市区）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent 父代号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 多个区域的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.创建DistrictServiceImpl实现类，实现抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.mapper.DistrictMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IDistrictService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DistrictMapper districtMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;District&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span> &#123;</span><br><span class="line">        List&lt;District&gt; list = districtMapper.findByParent(parent);</span><br><span class="line">        <span class="comment">// 在进行网络数据传输时，尽量减少数据体量，避免无效数据的传递</span></span><br><span class="line">        <span class="keyword">for</span> (District d :</span><br><span class="line">                list) &#123;</span><br><span class="line">            d.setId(<span class="literal">null</span>);</span><br><span class="line">            d.setParent(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.*;</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictServiceImplTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getByParent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 86表示中国，所有省的父代号都是86</span></span><br><span class="line">        List&lt;District&gt; list = districtService.getByParent(<span class="string">&quot;86&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (District d :</span><br><span class="line">                list) &#123;</span><br><span class="line">            System.err.println(d);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-获取省市区列表-控制层"><a href="#4-获取省市区列表-控制层" class="headerlink" title="4 获取省市区列表-控制层"></a>4 获取省市区列表-控制层</h3><h4 id="4-1-设计请求"><a href="#4-1-设计请求" class="headerlink" title="4.1 设计请求"></a>4.1 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/districts/</span><br><span class="line">GET</span><br><span class="line">String parent</span><br><span class="line">JsonResult&lt;List&lt;District&gt;&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-请求方法"><a href="#4-2-请求方法" class="headerlink" title="4.2 请求方法"></a>4.2 请求方法</h4><p>创建一个DistrictController类，编写处理请求的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuroneko.store.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.entity.District;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.service.IDistrictService;</span><br><span class="line"><span class="keyword">import</span> com.kuroneko.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;districts&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DistrictController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDistrictService districtService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;District&gt;&gt; <span class="title function_">getByParent</span><span class="params">(String parent)</span>&#123;</span><br><span class="line">        List&lt;District&gt; data = districtService.getByParent(parent);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将请求添加到白名单（放行）中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">patterns.add(<span class="string">&quot;/districts/**&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8081/districts?parent=86%E6%B5%8B%E8%AF%95">http://localhost:8081/districts?parent=86测试</a></p>
<h3 id="5-获取省市区列表-前端页面"><a href="#5-获取省市区列表-前端页面" class="headerlink" title="5 获取省市区列表-前端页面"></a>5 获取省市区列表-前端页面</h3><p>1.注释掉通过js来完成省市区列表加载的js代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/distpicker.data.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/distpicker.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>

<p>2.检查前端页面在提交省市区数据时是否有相关name属性和id属性。</p>
<p>3.运行前端</p>
<h2 id="获取省市区的名称"><a href="#获取省市区的名称" class="headerlink" title="获取省市区的名称"></a>获取省市区的名称</h2><h3 id="1-获取省市区的名称-持久层"><a href="#1-获取省市区的名称-持久层" class="headerlink" title="1 获取省市区的名称-持久层"></a>1 获取省市区的名称-持久层</h3><p>1.根据当前的code获取当前省市区的名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_dist_district where code=?</span><br></pre></td></tr></table></figure>

<p>2.在DistrictMapper接口中定义出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">findNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure>

<p>3.在DistrictMapper.xml文件中添加抽象方法的映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findNameByCode&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span>&gt;</span></span><br><span class="line">SELECT name</span><br><span class="line">FROM t_dict_district</span><br><span class="line">WHERE code=#&#123;code&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNameByCode</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> districtMapper.findNameByCode(<span class="string">&quot;610000&quot;</span>);</span><br><span class="line">       System.out.println(name);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-获取省市区的名称-业务层"><a href="#2-获取省市区的名称-业务层" class="headerlink" title="2 获取省市区的名称-业务层"></a>2 获取省市区的名称-业务层</h3><p>定义业务层接口中的抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">getNameByCode</span><span class="params">(String code)</span>;</span><br></pre></td></tr></table></figure>

<p>在子类中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getNameByCode</span><span class="params">(String code)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> districtMapper.findNameByCode(code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-获取省市区的名称-控制层优化"><a href="#3-获取省市区的名称-控制层优化" class="headerlink" title="3 获取省市区的名称-控制层优化"></a>3 获取省市区的名称-控制层优化</h3><p>1.依赖于IDstrictService</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加用户的收货地址业务层依赖于IDistrictService的业务层接口</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IDistrictService districtService;</span><br></pre></td></tr></table></figure>

<p>2.在addNewAddress方法中将districService接口中获取到的省市区数据转移到address对象中，这个对象就是用户完整的收货地址数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 补全address对象中的数据:省市区</span></span><br><span class="line">        <span class="comment">// 通过代号获取区域名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">provinceName</span> <span class="operator">=</span> districtService.getNameByCode(address.getProvinceCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">cityName</span> <span class="operator">=</span> districtService.getNameByCode(address.getCityCode());</span><br><span class="line">        <span class="type">String</span> <span class="variable">areaName</span> <span class="operator">=</span> districtService.getNameByCode(address.getAreaCode());</span><br><span class="line">        address.setProvinceName(provinceName);</span><br><span class="line">        address.setCityName(cityName);</span><br><span class="line">        address.setAreaName(areaName);</span><br></pre></td></tr></table></figure>

<h3 id="4-获取省市区-前端页面"><a href="#4-获取省市区-前端页面" class="headerlink" title="4 获取省市区-前端页面"></a>4 获取省市区-前端页面</h3><p>1.addAddress.html页面中编写对应的省市区展示以及根据用户的不同选中来显示标签的内容。</p>
<p>2.编写事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// value属性用来表示当前这个区域的code值</span></span><br><span class="line">    <span class="keyword">let</span> defaultOption = <span class="string">&quot;&lt;option value=&#x27;0&#x27;&gt;--- 请选择 ---&lt;/option&gt;&quot;</span>;</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showProvinceList</span>();</span><br><span class="line">    <span class="comment">// 设置默认的“请选择”的值，作为控件的默认值</span></span><br><span class="line">    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(defaultOption)</span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(defaultOption)</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 先获取行政区父代码</span></span><br><span class="line">    <span class="keyword">let</span> parent = $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="comment">// 清空select下拉列表中的option元素</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">    <span class="comment">// 填充默认值&quot;请选择</span></span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/districts/&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span> + parent,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> opt=</span><br><span class="line">                        <span class="string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span></span><br><span class="line">                    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(opt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;区县信息加载失败&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* change()函数用于监听某个控件是否改变，一旦改变触发参数的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">$(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">change</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 先获取行政区父代码</span></span><br><span class="line">    <span class="keyword">let</span> parent = $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">val</span>();</span><br><span class="line">    <span class="comment">// 清空select下拉列表中的option元素</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">empty</span>()</span><br><span class="line">    <span class="comment">// 填充默认值&quot;请选择</span></span><br><span class="line">    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line">    $(<span class="string">&quot;#area-list&quot;</span>).<span class="title function_">append</span>(defaultOption);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/districts/&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;parent=&quot;</span> + parent,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> opt=</span><br><span class="line">                        <span class="string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span></span><br><span class="line">                    $(<span class="string">&quot;#city-list&quot;</span>).<span class="title function_">append</span>(opt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;城市信息加载失败&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 省的下拉列表数据展示 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showProvinceList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/districts/&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="string">&quot;parent=86&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> opt=</span><br><span class="line">                        <span class="string">&quot;&lt;option value=&#x27;&quot;</span>+list[i].<span class="property">code</span>+<span class="string">&quot;&#x27;&gt;&quot;</span>+list[i].<span class="property">name</span>+<span class="string">&quot;&lt;/option&gt;&quot;</span></span><br><span class="line">                    $(<span class="string">&quot;#province-list&quot;</span>).<span class="title function_">append</span>(opt);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;省/直辖市信息加载失败&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="收货地址列表展示"><a href="#收货地址列表展示" class="headerlink" title="收货地址列表展示"></a>收货地址列表展示</h2><h3 id="1-持久层"><a href="#1-持久层" class="headerlink" title="1 持久层"></a>1 持久层</h3><p>1.数据库数据的查询操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">select * from t_address where uid=? order by is_default DESC,created_time DESC</span><br></pre></td></tr></table></figure>

<p>2.接口和抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id查询用户收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 收货地址数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Address&gt; <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<p>3.编写SQL映射</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressEntityMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM t_address</span><br><span class="line">    WHERE uid=#&#123;uid&#125;</span><br><span class="line">    ORDER BY is_default DESC,</span><br><span class="line">    created_time DESC</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUid</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Address&gt; list = addressMapper.findByUid(<span class="number">15</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务层"><a href="#2-业务层" class="headerlink" title="2 业务层"></a>2 业务层</h3><p>1.设计业务层的接口和抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<p>实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">getByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">        List&lt;Address&gt; list = addressMapper.findByUid(uid);</span><br><span class="line">        <span class="keyword">for</span> (Address address : list) &#123;</span><br><span class="line">            address.setUid(<span class="literal">null</span>);</span><br><span class="line">            address.setProvinceCode(<span class="literal">null</span>);</span><br><span class="line">            address.setCityCode(<span class="literal">null</span>);</span><br><span class="line">            address.setAreaCode(<span class="literal">null</span>);</span><br><span class="line">            address.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">            address.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">            address.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">            address.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-控制层"><a href="#3-控制层" class="headerlink" title="3 控制层"></a>3 控制层</h3><p>1.请求设计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/addresses</span><br><span class="line">HttpSession session</span><br><span class="line">GET</span><br><span class="line">JsonResult&lt;List&lt;Address&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>2.实现请求方法的编写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/&quot;,&quot;&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;List&lt;Address&gt;&gt; <span class="title function_">getByUid</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getuidFromSession(session);</span><br><span class="line">        List&lt;Address&gt; list = addressService.getByUid(uid);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK, list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3.登录测试<a href="http://localhost:8081/addresses">http://localhost:8081/addresses</a></p>
<h3 id="4-前端页面"><a href="#4-前端页面" class="headerlink" title="4 前端页面"></a>4 前端页面</h3><p>在address.html页面中编写用户收货地址数据的展示列表</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">			$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				<span class="title function_">showAddressList</span>();</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="comment">/** 展示用户收货地址数据列表 */</span></span><br><span class="line">			<span class="keyword">function</span> <span class="title function_">showAddressList</span>(<span class="params"></span>)&#123;</span><br><span class="line">				$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">					<span class="attr">url</span>: <span class="string">&quot;/addresses/&quot;</span>,</span><br><span class="line">					<span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">					<span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">					<span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">						<span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">							<span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">							<span class="variable language_">console</span>.<span class="title function_">log</span>(list);</span><br><span class="line">							<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">								<span class="keyword">let</span> tr = <span class="string">&#x27;&lt;tr&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;#&#123;tage&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;#&#123;name&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;#&#123;address&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;#&#123;phone&#125;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;&lt;a className=&quot;btn btn-xs btn-info&quot;&gt;&lt;span className=&quot;fa fa-edit&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;&lt;a className=&quot;btn btn-xs add-del btn-info&quot;&gt;&lt;span className=&quot;fa fa-trash-o&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;td&gt;&lt;a className=&quot;btn btn-xs add-def btn-default&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&#x27;</span> +</span><br><span class="line">										<span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">								<span class="comment">// 正则表达式替换tr</span></span><br><span class="line">								tr = tr.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;tage&#125;&quot;</span>, list[i].<span class="property">tag</span>);</span><br><span class="line">								tr = tr.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;name&#125;&quot;</span>, list[i].<span class="property">name</span>);</span><br><span class="line">								tr = tr.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;address&#125;&quot;</span>, list[i].<span class="property">address</span>);</span><br><span class="line">								tr = tr.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;phone&#125;&quot;</span>, list[i].<span class="property">phone</span>);</span><br><span class="line">								<span class="comment">// 把tr追加到address-list</span></span><br><span class="line">								$(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(tr);</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">// 将第一个隐藏“设为默认”</span></span><br><span class="line">							$(<span class="string">&quot;.add-def:eq(0)&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">						<span class="title function_">alert</span>(<span class="string">&quot;用户收货地址数据加载失败&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="设置默认收货地址"><a href="#设置默认收货地址" class="headerlink" title="设置默认收货地址"></a>设置默认收货地址</h2><h3 id="1-持久层-1"><a href="#1-持久层-1" class="headerlink" title="1 持久层"></a>1 持久层</h3><h4 id="1-1-SQL语句规划"><a href="#1-1-SQL语句规划" class="headerlink" title="1.1 SQL语句规划"></a>1.1 SQL语句规划</h4><p>1.检测当前用户想设置为默认收货地址的这条数据是否存在</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_address aid<span class="operator">=</span>?</span><br></pre></td></tr></table></figure>

<p>2.在修改用户的默认收货地址之前先将所有的收货地址设置为非默认。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_address set is_default=0 where uid=?</span><br></pre></td></tr></table></figure>

<p>3.将用户当前选中的这条记录设置为默认收货地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_address set is_default=1 where aid=?,modified_time=? where aid=?</span><br></pre></td></tr></table></figure>

<h4 id="1-2-设计抽象方法"><a href="#1-2-设计抽象方法" class="headerlink" title="1.2 设计抽象方法"></a>1.2 设计抽象方法</h4><p>在AddressMapper接口中定义抽象方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户id查询用户收货地址数据</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 收货地址数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Address&gt; <span class="title function_">findByUid</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据aid查询收货地址</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> aid 收货地址id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 收货地址数据，若没有找到返回null</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Address <span class="title function_">findByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 根据用户的uid值来修改用户的收货地址为非默认</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> uid 用户的id</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Integer <span class="title function_">updateNonDefault</span><span class="params">(Integer uid)</span>;</span><br><span class="line"></span><br><span class="line">Integer <span class="title function_">updateDefaultByAid</span><span class="params">(Integer aid,</span></span><br><span class="line"><span class="params">                           String modifiedUser,</span></span><br><span class="line"><span class="params">                           Date modifiedTime)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置SQL映射"><a href="#1-3-配置SQL映射" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByAid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressEntityMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM t_address</span><br><span class="line">    WHERE aid=#&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateDefaultByAid&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_address</span><br><span class="line">    SET is_default=1,</span><br><span class="line">    modified_user=#&#123;modifiedUser&#125;,</span><br><span class="line">    modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">    WHERE aid=#&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNonDefault&quot;</span>&gt;</span></span><br><span class="line">    UPDATE t_address</span><br><span class="line">    SET is_default=0</span><br><span class="line">    WHERE uid=#&#123;uid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByAid</span><span class="params">()</span> &#123;</span><br><span class="line">        System.err.println(addressMapper.findByAid(<span class="number">18</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNonDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        addressMapper.updateNonDefault(<span class="number">15</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateDefaultByAid</span><span class="params">()</span> &#123;</span><br><span class="line">        addressMapper.updateDefaultByAid(<span class="number">18</span>, <span class="string">&quot;管理员&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务层-1"><a href="#2-业务层-1" class="headerlink" title="2 业务层"></a>2 业务层</h3><h4 id="2-1-异常规划-1"><a href="#2-1-异常规划-1" class="headerlink" title="2.1 异常规划"></a>2.1 异常规划</h4><p>1.在执行更新时产生未知的UpdateException异常。</p>
<p>2.访问的数据不是当前登录用户的收货地址数据，非法访问AccessDeniedExcetption异常。</p>
<p>3.收货地址有可能不存在的异常：AddressNotFoundException异常。</p>
<h4 id="2-2-抽象方法"><a href="#2-2-抽象方法" class="headerlink" title="2.2 抽象方法"></a>2.2 抽象方法</h4><p>在IAddressService接口中定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改某个用户的某条收货地址数据为默认收货地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 收货地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 修改人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid, Integer uid, String username)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-2"><a href="#2-3-实现抽象方法-2" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>在AddressServiceImpl类中进行开发和业务设计</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">result</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;收货地址不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 访问的数据不是当前登录用户的收货地址数据</span></span><br><span class="line">        <span class="keyword">if</span> (!result.getUid().equals(uid))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法数据访问&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 先将所有的收货地址设置为非默认</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.updateNonDefault(uid);</span><br><span class="line">        <span class="keyword">if</span> (rows &lt;<span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新数据产生未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将用户选中某条地址设置为默认收货地址</span></span><br><span class="line">        rows = addressMapper.updateDefaultByAid(aid, username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新数据产生未知异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDefault</span><span class="params">()</span> &#123;</span><br><span class="line">        addressService.setDefault(<span class="number">18</span>,<span class="number">15</span>,<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-控制层-1"><a href="#3-控制层-1" class="headerlink" title="3 控制层"></a>3 控制层</h3><h4 id="3-1-处理异常-3"><a href="#3-1-处理异常-3" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中进行统一处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AddressNotFoundException)&#123;</span><br><span class="line">            result.setCode(<span class="number">4004</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;用户的收货地址数据不存在的异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(e <span class="keyword">instanceof</span> AccessDeniedException)&#123;</span><br><span class="line">            result.setCode(<span class="number">4005</span>);</span><br><span class="line">            result.setMessage(<span class="string">&quot;收货地址数据非法访问异常&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-设计请求-3"><a href="#3-2-设计请求-3" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/addresses/&#123;aid&#125;/set_default</span><br><span class="line">@PathVariable(&quot;aid&quot;) Integer aid,HttpSession session</span><br><span class="line">GET</span><br><span class="line">JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-完成请求方法"><a href="#3-3-完成请求方法" class="headerlink" title="3.3 完成请求方法"></a>3.3 完成请求方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;&#123;aid&#125;/set_default&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">setDefault</span><span class="params">(<span class="meta">@PathVariable(&quot;aid&quot;)</span> Integer aid, HttpSession session)</span>&#123;</span><br><span class="line">        addressService.setDefault(</span><br><span class="line">                aid,</span><br><span class="line">                getuidFromSession(session),</span><br><span class="line">                getUsernameFromSession(session));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>访问<a href="http://localhost:8081/addresses/18/set_default">http://localhost:8081/addresses/18/set_default</a></p>
<h3 id="4-前端页面-1"><a href="#4-前端页面-1" class="headerlink" title="4 前端页面"></a>4 前端页面</h3><p>1.给“设置默认”按钮添加一个onclick属性，指向一个方法的调用，在这个方法中完成ajax请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let tr = &#x27;&lt;tr&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;#&#123;tage&#125;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;#&#123;name&#125;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;#&#123;address&#125;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;#&#123;phone&#125;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;&lt;a className=&quot;btn btn-xs btn-info&quot;&gt;&lt;span className=&quot;fa fa-edit&quot;&gt;&lt;/span&gt; 修改&lt;/a&gt;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;&lt;a className=&quot;btn btn-xs add-del btn-info&quot;&gt;&lt;span className=&quot;fa fa-trash-o&quot;&gt;&lt;/span&gt; 删除&lt;/a&gt;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;td&gt;&lt;a onclick=&quot;setDefault(#&#123;aid&#125;&#125;)&quot; className=&quot;btn btn-xs add-def btn-default&quot;&gt;设为默认&lt;/a&gt;&lt;/td&gt;\n&#x27; +</span><br><span class="line">										&#x27;&lt;/tr&gt;&#x27;;</span><br><span class="line">								// 正则表达式替换tr</span><br><span class="line">								tr = tr.replace(&quot;#&#123;tage&#125;&quot;, list[i].tag);</span><br><span class="line">								tr = tr.replace(&quot;#&#123;name&#125;&quot;, list[i].name);</span><br><span class="line">								tr = tr.replace(&quot;#&#123;address&#125;&quot;, list[i].address);</span><br><span class="line">								tr = tr.replace(&quot;#&#123;phone&#125;&quot;, list[i].phone);</span><br><span class="line">								tr = tr.replace(&quot;#&#123;aid&#125;&quot;, list[i].aid);</span><br></pre></td></tr></table></figure>

<p>address.html页面点击“设置默认”按钮发送ajax请求。完成setDefault()方法的声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">function <span class="title function_">setDefault</span><span class="params">(aid)</span> &#123;</span><br><span class="line">				$.ajax(&#123;</span><br><span class="line">					url: <span class="string">&quot;/addresses/&quot;</span>+aid+<span class="string">&quot;/set_default&quot;</span>,</span><br><span class="line">					type: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">					dataType: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">					success: function (json) &#123;</span><br><span class="line">						<span class="keyword">if</span> (json.code == <span class="number">200</span>)&#123;</span><br><span class="line">							<span class="comment">// 重新加载收货地址列表页面</span></span><br><span class="line">							showAddressList()</span><br><span class="line">							&#125;</span><br><span class="line">							<span class="comment">// 将第一个隐藏“设为默认”</span></span><br><span class="line">							$(<span class="string">&quot;.add-def:eq(0)&quot;</span>).hide();</span><br><span class="line">						&#125;,</span><br><span class="line">					error: function (xhr) &#123;</span><br><span class="line">						alert(<span class="string">&quot;设置默认收货地址失败&quot;</span> + xhr.message);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除收货地址"><a href="#删除收货地址" class="headerlink" title="删除收货地址"></a>删除收货地址</h2><h3 id="1-持久层-2"><a href="#1-持久层-2" class="headerlink" title="1 持久层"></a>1 持久层</h3><h4 id="1-1-规划需要执行的SQL语句-3"><a href="#1-1-规划需要执行的SQL语句-3" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.在删除之前判断该数据是否存在，判断该条地址数据的归属是否是当前的用户</p>
<p>2.执行删除收货地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from t_address where aid=?</span><br></pre></td></tr></table></figure>

<p>3.若用户删除的是默认收货地址，则将最近修改的收货地址（modified_time）设置为默认收货地址。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># limit (n-1)*n, pageSize</span><br><span class="line">select * from t_address where uid=? order by modified_time DESC limit 0,1</span><br></pre></td></tr></table></figure>

<h4 id="1-2-设计抽象方法-1"><a href="#1-2-设计抽象方法-1" class="headerlink" title="1.2 设计抽象方法"></a>1.2 设计抽象方法</h4><p>在AddressMapper中定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据aid上传收货地址数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> aid 收货地址id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Integer <span class="title function_">deleteByAid</span><span class="params">(Integer aid)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据用户uid查询当前用户最后一次被修改的收货地址数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 收货地址数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Address <span class="title function_">findLastModified</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-SQL映射"><a href="#1-3-SQL映射" class="headerlink" title="1.3 SQL映射"></a>1.3 SQL映射</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByAid&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM t_address</span><br><span class="line">    WHERE aid=#&#123;aid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findLastModified&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;AddressEntityMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT *</span><br><span class="line">    FROM t_address</span><br><span class="line">    WHERE uid=#&#123;uid&#125;</span><br><span class="line">    ORDER BY modified_time DESC LIMIT 0,1</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByAid</span><span class="params">()</span> &#123;</span><br><span class="line">        addressMapper.deleteByAid(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findLastModified</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(addressMapper.findLastModified(<span class="number">16</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-业务层-2"><a href="#2-业务层-2" class="headerlink" title="2 业务层"></a>2 业务层</h3><h4 id="2-1-规划异常-3"><a href="#2-1-规划异常-3" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>DeleteException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 删除数据时产生的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-抽象方法设计"><a href="#2-2-抽象方法设计" class="headerlink" title="2.2 抽象方法设计"></a>2.2 抽象方法设计</h4><p>在IAddressService中定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户选中的收货地址数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 收货地址id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid, Integer uid, String username)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-3"><a href="#2-3-实现抽象方法-3" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer aid, Integer uid, String username)</span> &#123;</span><br><span class="line">       <span class="type">Address</span> <span class="variable">result</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line">       <span class="keyword">if</span> (result == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 访问的数据不是当前登录用户的收货地址数据</span></span><br><span class="line">       <span class="keyword">if</span> (!result.getUid().equals(uid))&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> addressMapper.deleteByAid(aid);</span><br><span class="line">       <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeleteException</span>(<span class="string">&quot;删除数据产生未知异常&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> addressMapper.countByUid(uid);</span><br><span class="line">       <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="comment">// 没有收货地址则结束</span></span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果删除的是默认收货地址</span></span><br><span class="line">       <span class="keyword">if</span> (result.getIsDefault() == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 不是默认地址则将最近修改的收货地址设置为默认收货地址</span></span><br><span class="line">       <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findLastModified(uid);</span><br><span class="line">       rows = addressMapper.updateDefaultByAid(address.getAid(), username, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       <span class="keyword">if</span> (rows != <span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UpdateException</span>(<span class="string">&quot;更新数据时产生未知的异常&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">    addressService.delete(<span class="number">19</span>,<span class="number">16</span>,<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-控制层-2"><a href="#3-控制层-2" class="headerlink" title="3 控制层"></a>3 控制层</h3><p>1.需要处理异常DeleteException</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DeleteException)&#123;</span><br><span class="line">    result.setCode(<span class="number">5002</span>);</span><br><span class="line">    result.setMessage(<span class="string">&quot;删除数据产生未知异常&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.设计请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/addresses/&#123;aid&#125;/delete</span><br><span class="line">POST</span><br><span class="line">Integer aid,HttpSession session</span><br><span class="line">JsonResult&lt;Void&gt;</span><br></pre></td></tr></table></figure>

<p>3.编写请求处理方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;&#123;aid&#125;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">delete</span><span class="params">(Integer aid,HttpSession session)</span>&#123;</span><br><span class="line">        addressService.delete(</span><br><span class="line">                aid,</span><br><span class="line">                getuidFromSession(session),</span><br><span class="line">                getUsernameFromSession(session));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-前端页面-2"><a href="#4-前端页面-2" class="headerlink" title="4 前端页面"></a>4 前端页面</h4><p>在address.html中添加删除按钮事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a onclick=<span class="string">&quot;deleteByAid(#&#123;aid&#125;)&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;btn btn-xs add-del btn-info&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">span</span>  <span class="attr">class</span>=<span class="string">&quot;fa fa-trash-o&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span> 删除&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>声明deleteByAid(aid)方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deleteByAid</span>(<span class="params">aid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/addresses/&quot;</span>+aid+<span class="string">&quot;/delete&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">code</span> == <span class="number">200</span>)&#123;</span><br><span class="line">                <span class="comment">// 重新加载收货地址列表页面</span></span><br><span class="line">                <span class="title function_">showAddressList</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span> (<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;删除收货地址失败&quot;</span> + xhr.<span class="property">message</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>登录测试</p>
<h2 id="商品热销排行"><a href="#商品热销排行" class="headerlink" title="商品热销排行"></a>商品热销排行</h2><h3 id="1-商品-创建数据表"><a href="#1-商品-创建数据表" class="headerlink" title="1 商品-创建数据表"></a>1 商品-创建数据表</h3><p>1.使用use命令先选中store数据库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE store;</span><br></pre></td></tr></table></figure>

<p>2.在store数据库中创建t_product数据表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_product (</span><br><span class="line">  id int(20) NOT NULL COMMENT &#x27;商品id&#x27;,</span><br><span class="line">  category_id int(20) DEFAULT NULL COMMENT &#x27;分类id&#x27;,</span><br><span class="line">  item_type varchar(100) DEFAULT NULL COMMENT &#x27;商品系列&#x27;,</span><br><span class="line">  title varchar(100) DEFAULT NULL COMMENT &#x27;商品标题&#x27;,</span><br><span class="line">  sell_point varchar(150) DEFAULT NULL COMMENT &#x27;商品卖点&#x27;,</span><br><span class="line">  price bigint(20) DEFAULT NULL COMMENT &#x27;商品单价&#x27;,</span><br><span class="line">  num int(10) DEFAULT NULL COMMENT &#x27;库存数量&#x27;,</span><br><span class="line">  image varchar(500) DEFAULT NULL COMMENT &#x27;图片路径&#x27;,</span><br><span class="line">  status int(1) DEFAULT &#x27;1&#x27; COMMENT &#x27;商品状态  1：上架   2：下架   3：删除&#x27;,</span><br><span class="line">  priority int(10) DEFAULT NULL COMMENT &#x27;显示优先级&#x27;,</span><br><span class="line">  created_time datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  modified_time datetime DEFAULT NULL COMMENT &#x27;最后修改时间&#x27;,</span><br><span class="line">  created_user varchar(50) DEFAULT NULL COMMENT &#x27;创建人&#x27;,</span><br><span class="line">  modified_user varchar(50) DEFAULT NULL COMMENT &#x27;最后修改人&#x27;,</span><br><span class="line">  PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="2-商品-创建实体类"><a href="#2-商品-创建实体类" class="headerlink" title="2 商品-创建实体类"></a>2 商品-创建实体类</h3><p>创建com.cy.store.entity.Product类，并继承自BaseEntity类。在类中声明与数据表中对应的属性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 商品数据的实体类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer categoryId;</span><br><span class="line">    <span class="keyword">private</span> String itemType;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String sellPoint;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Integer priority;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-商品-热销排行-持久层"><a href="#3-商品-热销排行-持久层" class="headerlink" title="3 商品-热销排行-持久层"></a>3 商品-热销排行-持久层</h3><h4 id="3-1-规划需要执行的SQL语句"><a href="#3-1-规划需要执行的SQL语句" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>查询热销商品列表的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_product WHERE status=1 ORDER BY priority DESC LIMIT 0,4</span><br></pre></td></tr></table></figure>

<h4 id="3-2-接口与抽象方法"><a href="#3-2-接口与抽象方法" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建ProductMapper接口并在接口中添加查询热销商品findHotList()的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.cy.store.mapper;</span><br><span class="line">import com.cy.store.entity.Product;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/** 处理商品数据的持久层接口 */</span><br><span class="line">public interface ProductMapper &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 查询热销商品的前四名</span><br><span class="line">     * @return 热销商品前四名的集合</span><br><span class="line">     */</span><br><span class="line">    List&lt;Product&gt; findHotList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-配置SQL映射"><a href="#3-3-配置SQL映射" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在main\resources\mapper文件夹下创建ProductMapper.xml文件，并在文件中配置findHotList()方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cy.store.mapper.ProductMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;ProductEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cy.store.entity.Product&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;category_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;categoryId&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;item_type&quot;</span> <span class="attr">property</span>=<span class="string">&quot;itemType&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;sell_point&quot;</span> <span class="attr">property</span>=<span class="string">&quot;sellPoint&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 查询热销商品的前四名：List&lt;Product&gt; findHostList() --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findHotList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ProductEntityMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            *</span><br><span class="line">        FROM</span><br><span class="line">            t_product</span><br><span class="line">        WHERE</span><br><span class="line">            status=1</span><br><span class="line">        ORDER BY</span><br><span class="line">            priority DESC</span><br><span class="line">            LIMIT 0,4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.mapper包下创建ProductMapperTests测试类，并添加测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductMapperTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHotList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; list = productMapper.findHotList();</span><br><span class="line">        System.out.println(<span class="string">&quot;count=&quot;</span> + list.size());</span><br><span class="line">        <span class="keyword">for</span> (Product item : list) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-商品-热销排行-业务层"><a href="#4-商品-热销排行-业务层" class="headerlink" title="4 商品-热销排行-业务层"></a>4 商品-热销排行-业务层</h3><h4 id="4-1-规划异常-1"><a href="#4-1-规划异常-1" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="4-2-接口与抽象方法-1"><a href="#4-2-接口与抽象方法-1" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>创建com.cy.store.service.IProductService接口，并在接口中添加findHotList()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理商品数据的业务层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询热销商品的前四名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 热销商品前四名的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Product&gt; <span class="title function_">findHotList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-实现抽象方法-1"><a href="#4-3-实现抽象方法-1" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.ProductServiceImpl类，并添加@Service注解；在类中声明持久层对象以及实现接口中的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理商品数据的业务层实现类 */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IProductService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">findHotList</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Product&gt; list = productMapper.findHotList();</span><br><span class="line">        <span class="keyword">for</span> (Product product : list) &#123;</span><br><span class="line">            product.setPriority(<span class="literal">null</span>);</span><br><span class="line">            product.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">            product.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">            product.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">            product.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.service包下创建测试类ProductServiceTests，并编写测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductServiceTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHotList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Product&gt; list = productService.findHotList();</span><br><span class="line">            System.out.println(<span class="string">&quot;count=&quot;</span> + list.size());</span><br><span class="line">            <span class="keyword">for</span> (Product item : list) &#123;</span><br><span class="line">                System.out.println(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            System.out.println(e.getClass().getSimpleName());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-商品-热销排行-控制器"><a href="#5-商品-热销排行-控制器" class="headerlink" title="5 商品-热销排行-控制器"></a>5 商品-热销排行-控制器</h3><h4 id="5-1-处理异常-1"><a href="#5-1-处理异常-1" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="5-2-设计请求-1"><a href="#5-2-设计请求-1" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>1.设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/products/hot_list
请求参数：无
请求类型：GET
响应结果：JsonResult&lt;List&lt;Product&gt;&gt;
是否拦截：否，需要将index.html和products/**添加到白名单
</code></pre>
<p>2.在LoginInterceptorConfigurer类中将index.html页面和products&#x2F;**请求添加到白名单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">patterns.add(<span class="string">&quot;/web/index.html&quot;</span>);</span><br><span class="line">patterns.add(<span class="string">&quot;/products/**&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="5-3-处理请求-1"><a href="#5-3-处理请求-1" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.创建com.cy.controller.ProductController类继承自BaseController类，类添加@RestController和@RequestMapping(“products”)注解，并在类中添加业务层对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.controller;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;products&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在类中添加处理请求的getHotList()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;hot_list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;Product&gt;&gt; <span class="title function_">getHotList</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;Product&gt; data = productService.findHotList();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;List&lt;Product&gt;&gt;(OK, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，直接访问<a href="http://localhost:8080/products/hot_list%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/products/hot_list进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/1.png" class="">

<h3 id="6-商品-热销排行-前端页面"><a href="#6-商品-热销排行-前端页面" class="headerlink" title="6 商品-热销排行-前端页面"></a>6 商品-热销排行-前端页面</h3><p>1.在index.html页面给“热销排行”列表的div标签设置id属性值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;hot-list&quot;</span> <span class="attr">class</span>=<span class="string">&quot;panel-body panel-item&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在index.html页面中body标签内部的最后，添加展示热销排行商品的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showHotList</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showHotList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#hot-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/products/hot_list&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count=&quot;</span> + list.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(list[i].<span class="property">title</span>);</span><br><span class="line">                <span class="keyword">let</span> html = <span class="string">&#x27;&lt;div class=&quot;col-md-12&quot;&gt;&#x27;</span></span><br><span class="line">                  + <span class="string">&#x27;&lt;div class=&quot;col-md-7 text-row-2&quot;&gt;&lt;a href=&quot;product.html?id=#&#123;id&#125;&quot;&gt;#&#123;title&#125;&lt;/a&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">                  + <span class="string">&#x27;&lt;div class=&quot;col-md-2&quot;&gt;¥#&#123;price&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">                  + <span class="string">&#x27;&lt;div class=&quot;col-md-3&quot;&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/div&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                html = html.<span class="title function_">replace</span>(<span class="regexp">/#&#123;id&#125;/g</span>, list[i].<span class="property">id</span>);</span><br><span class="line">                html = html.<span class="title function_">replace</span>(<span class="regexp">/#&#123;title&#125;/g</span>, list[i].<span class="property">title</span>);</span><br><span class="line">                html = html.<span class="title function_">replace</span>(<span class="regexp">/#&#123;price&#125;/g</span>, list[i].<span class="property">price</span>);</span><br><span class="line">                html = html.<span class="title function_">replace</span>(<span class="regexp">/#&#123;image&#125;/g</span>, list[i].<span class="property">image</span>);</span><br><span class="line"></span><br><span class="line">                $(<span class="string">&quot;#hot-list&quot;</span>).<span class="title function_">append</span>(html);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，直接访问<a href="http://localhost:8080/web/index.html%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/index.html进行测试。</a></p>
<h2 id="显示商品详情"><a href="#显示商品详情" class="headerlink" title="显示商品详情"></a>显示商品详情</h2><h3 id="1-商品-显示商品详情-持久层"><a href="#1-商品-显示商品详情-持久层" class="headerlink" title="1 商品-显示商品详情-持久层"></a>1 商品-显示商品详情-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-4"><a href="#1-1-规划需要执行的SQL语句-4" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>根据商品id显示商品详情的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_product WHERE id=?</span><br></pre></td></tr></table></figure>

<h4 id="1-2-接口与抽象方法-1"><a href="#1-2-接口与抽象方法-1" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在ProductMapper接口中添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商品id查询商品详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Product <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置SQL映射-1"><a href="#1-3-配置SQL映射-1" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在ProductMapper.xml文件中配置findById(Integer id)方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据商品id查询商品详情：Product findById(Integer id) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;ProductEntityMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    	*</span><br><span class="line">    FROM</span><br><span class="line">    	t_product</span><br><span class="line">    WHERE</span><br><span class="line">    	id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在ProductMapperTests测试类中添加测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">10000017</span>;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.findById(id);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-商品-显示商品详情-业务层"><a href="#2-商品-显示商品详情-业务层" class="headerlink" title="2 商品-显示商品详情-业务层"></a>2 商品-显示商品详情-业务层</h3><h4 id="2-1-规划异常-4"><a href="#2-1-规划异常-4" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>如果商品数据不存在，应该抛出ProductNotFoundException，需要创建com.cy.store.service.ex.ProductNotFoundException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service.ex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 商品数据不存在的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">    <span class="comment">// Override Methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-接口与抽象方法"><a href="#2-2-接口与抽象方法" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在业务层IProductService接口中添加findById(Integer id)抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据商品id查询商品详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 商品id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的商品详情，如果没有匹配的数据则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Product <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-4"><a href="#2-3-实现抽象方法-4" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在ProductServiceImpl类中，实现接口中的findById(Integer id)抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Product <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据参数id调用私有方法执行查询，获取商品数据</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.findById(id);</span><br><span class="line">    <span class="comment">// 判断查询结果是否为null</span></span><br><span class="line">    <span class="keyword">if</span> (product == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 是：抛出ProductNotFoundException</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ProductNotFoundException</span>(<span class="string">&quot;尝试访问的商品数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将查询结果中的部分属性设置为null</span></span><br><span class="line">    product.setPriority(<span class="literal">null</span>);</span><br><span class="line">    product.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">    product.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">    product.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">    product.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 返回查询结果</span></span><br><span class="line">    <span class="keyword">return</span> product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在ProductServiceTests测试类中编写测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">100000179</span>;</span><br><span class="line">        <span class="type">Product</span> <span class="variable">result</span> <span class="operator">=</span> productService.findById(id);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">        System.out.println(e.getClass().getSimpleName());</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-商品-显示商品详情-控制器"><a href="#3-商品-显示商品详情-控制器" class="headerlink" title="3 商品-显示商品详情-控制器"></a>3 商品-显示商品详情-控制器</h3><h4 id="3-1-处理异常-4"><a href="#3-1-处理异常-4" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中的handleException()方法中添加处理ProductNotFoundException的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ProductNotFoundException) &#123;</span><br><span class="line">	result.setState(<span class="number">4006</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-设计请求-4"><a href="#3-2-设计请求-4" class="headerlink" title="3.2  设计请求"></a>3.2  设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/products/&#123;id&#125;/details
请求参数：@PathVariable(&quot;id&quot;) Integer id
请求类型：GET
响应结果：JsonResult&lt;Product&gt;
</code></pre>
<h4 id="3-3-处理请求-3"><a href="#3-3-处理请求-3" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在ProductController类中添加处理请求的getById()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;&#123;id&#125;/details&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Product&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用业务对象执行获取数据</span></span><br><span class="line">    <span class="type">Product</span> <span class="variable">data</span> <span class="operator">=</span> productService.findById(id);</span><br><span class="line">    <span class="comment">// 返回成功和数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Product&gt;(OK, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，直接访问<a href="http://localhost:8080/products/10000017/details%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/products/10000017/details进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/2.png" class="">

<h3 id="4-商品-显示商品详情-前端页面"><a href="#4-商品-显示商品详情-前端页面" class="headerlink" title="4 商品-显示商品详情-前端页面"></a>4 商品-显示商品详情-前端页面</h3><p>1.检查在product.html页面body标签内部的最后是否引入jquery-getUrlParam.js文件，如果引入无需重复引入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/jquery-getUrlParam.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2.在product.html页面中body标签内部的最后添加获取当前商品详情的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line"><span class="keyword">let</span> id = $.<span class="title function_">getUrlParam</span>(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;id=&quot;</span> + id);</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/products/&quot;</span> + id + <span class="string">&quot;/details&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;title=&quot;</span> + json.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-title&quot;</span>).<span class="title function_">html</span>(json.<span class="property">data</span>.<span class="property">title</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-sell-point&quot;</span>).<span class="title function_">html</span>(json.<span class="property">data</span>.<span class="property">sellPoint</span>);</span><br><span class="line">                $(<span class="string">&quot;#product-price&quot;</span>).<span class="title function_">html</span>(json.<span class="property">data</span>.<span class="property">price</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span> + i + <span class="string">&quot;-big&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;..&quot;</span> + json.<span class="property">data</span>.<span class="property">image</span> + i + <span class="string">&quot;_big.png&quot;</span>);</span><br><span class="line">                    $(<span class="string">&quot;#product-image-&quot;</span> + i).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;..&quot;</span> + json.<span class="property">data</span>.<span class="property">image</span> + i + <span class="string">&quot;.jpg&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">4006</span>) &#123; <span class="comment">// 商品数据不存在的异常</span></span><br><span class="line">                location.<span class="property">href</span> = <span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;获取商品信息失败！&quot;</span> + json.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，先访问<a href="http://localhost:8080/web/index.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E2%80%9C%E7%83%AD%E9%94%80%E6%8E%92%E8%A1%8C%E2%80%9D%E4%B8%AD%E7%9A%84%E6%9F%90%E4%B8%AA%E5%AD%90%E9%A1%B9%EF%BC%8C%E5%B0%86%E8%B7%B3%E8%BD%AC%E5%88%B0product.html%E5%95%86%E5%93%81%E8%AF%A6%E6%83%85%E9%A1%B5%EF%BC%8C%E8%A7%82%E5%AF%9F%E9%A1%B5%E9%9D%A2%E6%98%AF%E5%90%A6%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%98%AF%E5%BD%93%E5%89%8D%E7%9A%84%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF%E3%80%82">http://localhost:8080/web/index.html页面，然后点击“热销排行”中的某个子项，将跳转到product.html商品详情页，观察页面是否加载的是当前的商品信息。</a></p>
<h2 id="加入购物车"><a href="#加入购物车" class="headerlink" title="加入购物车"></a>加入购物车</h2><h3 id="1-购物车-创建数据表"><a href="#1-购物车-创建数据表" class="headerlink" title="1 购物车-创建数据表"></a>1 购物车-创建数据表</h3><p>1.使用use命令先选中store数据库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE store;</span><br></pre></td></tr></table></figure>

<p>2.在store数据库中创建t_cart用户数据表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_cart (</span><br><span class="line">	cid INT AUTO_INCREMENT COMMENT &#x27;购物车数据id&#x27;,</span><br><span class="line">	uid INT NOT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">	pid INT NOT NULL COMMENT &#x27;商品id&#x27;,</span><br><span class="line">	price BIGINT COMMENT &#x27;加入时商品单价&#x27;,</span><br><span class="line">	num INT COMMENT &#x27;商品数量&#x27;,</span><br><span class="line">	created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,</span><br><span class="line">	created_time DATETIME COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">	modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,</span><br><span class="line">	modified_time DATETIME COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">	PRIMARY KEY (cid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="2-购物车-创建实体类"><a href="#2-购物车-创建实体类" class="headerlink" title="2 购物车-创建实体类"></a>2 购物车-创建实体类</h3><p>在com.cy.store.entity包下创建购物车的Cart实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.entity;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 购物车数据的实体类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cart</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-购物车-添加购物车-持久层"><a href="#3-购物车-添加购物车-持久层" class="headerlink" title="3 购物车-添加购物车-持久层"></a>3 购物车-添加购物车-持久层</h3><h4 id="3-1-规划需要执行的SQL语句-1"><a href="#3-1-规划需要执行的SQL语句-1" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>向购物车表中插入商品数据的SQL语句大致是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into t_cart (除了cid以外的字段列表) values (匹配的值列表);</span><br></pre></td></tr></table></figure>

<p>如果用户曾经将某个商品加入到购物车过，则点击“加入购物车”按钮只会对购物车中相同商品数量做递增操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_cart set num=? where cid=?</span><br></pre></td></tr></table></figure>

<p>关于判断“到底应该插入数据，还是修改数量”，可以通过“查询某用户是否已经添加某商品到购物车”来完成。如果查询到某结果，就表示该用户已经将该商品加入到购物车了，如果查询结果为null，则表示该用户没有添加过该商品。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from t_cart where uid=? and pid=?</span><br></pre></td></tr></table></figure>

<h4 id="3-2-接口与抽象方法-1"><a href="#3-2-接口与抽象方法-1" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建CartMapper接口，并添加抽象相关的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Cart;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理购物车数据的持久层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CartMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cart 购物车数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insert</span><span class="params">(Cart cart)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改购物车数据中商品的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cid 购物车数据的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 新的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedUser 修改执行人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> modifiedTime 修改时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">updateNumByCid</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;cid&quot;)</span> Integer cid,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;num&quot;)</span> Integer num,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;modifiedUser&quot;)</span> String modifiedUser,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;modifiedTime&quot;)</span> Date modifiedTime)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户id和商品id查询购物车中的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 匹配的购物车数据，如果该用户的购物车中并没有该商品，则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Cart <span class="title function_">findByUidAndPid</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;uid&quot;)</span> Integer uid,</span></span><br><span class="line"><span class="params">            <span class="meta">@Param(&quot;pid&quot;)</span> Integer pid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-配置SQL映射-1"><a href="#3-3-配置SQL映射-1" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在resources.mapper文件夹下创建CartMapper.xml文件，并在文件中配置以上三个方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cy.store.mapper.CartMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;CartEntityMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.cy.store.entity.Cart&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;created_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createdTime&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_user&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedUser&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;modified_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;modifiedTime&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插入购物车数据：Integer insert(Cart cart) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;cid&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_cart (uid, pid, price, num, created_user, created_time, modified_user, modified_time)</span><br><span class="line">        VALUES (#&#123;uid&#125;, #&#123;pid&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;, #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 修改购物车数据中商品的数量：</span></span><br><span class="line"><span class="comment">         Integer updateNumByCid(</span></span><br><span class="line"><span class="comment">            @Param(&quot;cid&quot;) Integer cid,</span></span><br><span class="line"><span class="comment">            @Param(&quot;num&quot;) Integer num,</span></span><br><span class="line"><span class="comment">            @Param(&quot;modifiedUser&quot;) String modifiedUser,</span></span><br><span class="line"><span class="comment">            @Param(&quot;modifiedTime&quot;) Date modifiedTime) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateNumByCid&quot;</span>&gt;</span></span><br><span class="line">        UPDATE</span><br><span class="line">            t_cart</span><br><span class="line">        SET</span><br><span class="line">            num=#&#123;num&#125;,</span><br><span class="line">            modified_user=#&#123;modifiedUser&#125;,</span><br><span class="line">            modified_time=#&#123;modifiedTime&#125;</span><br><span class="line">        WHERE</span><br><span class="line">            cid=#&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据用户id和商品id查询购物车中的数据：</span></span><br><span class="line"><span class="comment">         Cart findByUidAndPid(</span></span><br><span class="line"><span class="comment">            @Param(&quot;uid&quot;) Integer uid,</span></span><br><span class="line"><span class="comment">            @Param(&quot;pid&quot;) Integer pid) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUidAndPid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CartEntityMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            *</span><br><span class="line">        FROM</span><br><span class="line">            t_cart</span><br><span class="line">        WHERE</span><br><span class="line">            uid=#&#123;uid&#125; AND pid=#&#123;pid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.mapper包下创建CartMapperTests测试类，并添加测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Cart;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartMapperTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CartMapper cartMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        cart.setUid(<span class="number">1</span>);</span><br><span class="line">        cart.setPid(<span class="number">2</span>);</span><br><span class="line">        cart.setNum(<span class="number">3</span>);</span><br><span class="line">        cart.setPrice(<span class="number">4L</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNumByCid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">modifiedUser</span> <span class="operator">=</span> <span class="string">&quot;购物车管理员&quot;</span>;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">modifiedTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, num, modifiedUser, modifiedTime);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByUidAndPid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">pid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByUidAndPid(uid, pid);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-购物车-添加购物车-业务层"><a href="#4-购物车-添加购物车-业务层" class="headerlink" title="4 购物车-添加购物车-业务层"></a>4 购物车-添加购物车-业务层</h3><h4 id="4-1-规划异常-2"><a href="#4-1-规划异常-2" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><p>在插入数据时，可能抛出InsertException异常；在修改数据时，可能抛出UpdateException异常。如果不限制购物车中的记录的数量，则没有其它异常。</p>
<h4 id="4-2-接口与抽象方法-2"><a href="#4-2-接口与抽象方法-2" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>在com.cy.store.service包下创建ICartService接口，并添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理商品数据的业务层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将商品添加到购物车</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 当前登录用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pid 商品的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> amount 增加的数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 当前登录的用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addToCart</span><span class="params">(Integer uid, Integer pid, Integer amount, String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-实现抽象方法-2"><a href="#4-3-实现抽象方法-2" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.创建com.cy.store.service.impl.CartServiceImpl类，并实现ICartService接口，并在类的定义前添加@Service注解。在类中声明CartMapper持久层对象和IProductService处理商品数据的业务对象，并都添加@Autowired注修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Cart;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.mapper.CartMapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IProductService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理购物车数据的业务层实现类 */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CartMapper cartMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IProductService productService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在CartServiceImpl类中实现业务层ICartService接口中定义的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToCart</span><span class="params">(Integer uid, Integer pid, Integer amount, String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据参数pid和uid查询购物车中的数据</span></span><br><span class="line">    <span class="comment">// 判断查询结果是否为null</span></span><br><span class="line">    <span class="comment">// 是：表示该用户并未将该商品添加到购物车</span></span><br><span class="line">    <span class="comment">// -- 创建Cart对象</span></span><br><span class="line">    <span class="comment">// -- 封装数据：uid,pid,amount</span></span><br><span class="line">    <span class="comment">// -- 调用productService.findById(pid)查询商品数据，得到商品价格</span></span><br><span class="line">    <span class="comment">// -- 封装数据：price</span></span><br><span class="line">    <span class="comment">// -- 封装数据：4个日志</span></span><br><span class="line">    <span class="comment">// -- 调用insert(cart)执行将数据插入到数据表中</span></span><br><span class="line">    <span class="comment">// 否：表示该用户的购物车中已有该商品</span></span><br><span class="line">    <span class="comment">// -- 从查询结果中获取购物车数据的id</span></span><br><span class="line">    <span class="comment">// -- 从查询结果中取出原数量，与参数amount相加，得到新的数量</span></span><br><span class="line">    <span class="comment">// -- 执行更新数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.addToCart(Integer uid, Integer pid, Integer amount, String username)方法的代码具体实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToCart</span><span class="params">(Integer uid, Integer pid, Integer amount, String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据参数pid和uid查询购物车中的数据</span></span><br><span class="line">    <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByUidAndPid(uid, pid);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> result.getCid();</span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 判断查询结果是否为null</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 是：表示该用户并未将该商品添加到购物车</span></span><br><span class="line">        <span class="comment">// 创建Cart对象</span></span><br><span class="line">        <span class="type">Cart</span> <span class="variable">cart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cart</span>();</span><br><span class="line">        <span class="comment">// 封装数据：uid,pid,amount</span></span><br><span class="line">        cart.setUid(uid);</span><br><span class="line">        cart.setPid(pid);</span><br><span class="line">        cart.setNum(amount);</span><br><span class="line">        <span class="comment">// 调用productService.findById(pid)查询商品数据，得到商品价格</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productService.findById(pid);</span><br><span class="line">        <span class="comment">// 封装数据：price</span></span><br><span class="line">        cart.setPrice(product.getPrice());</span><br><span class="line">        <span class="comment">// 封装数据：4个日志</span></span><br><span class="line">        cart.setCreatedUser(username);</span><br><span class="line">        cart.setCreatedTime(now);</span><br><span class="line">        cart.setModifiedUser(username);</span><br><span class="line">        cart.setModifiedTime(now);</span><br><span class="line">        <span class="comment">// 调用insert(cart)执行将数据插入到数据表中</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.insert(cart);</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;插入商品数据时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 否：表示该用户的购物车中已有该商品</span></span><br><span class="line">        <span class="comment">// 从查询结果中获取购物车数据的id</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> result.getCid();</span><br><span class="line">        <span class="comment">// 从查询结果中取出原数量，与参数amount相加，得到新的数量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> result.getNum() + amount;</span><br><span class="line">        <span class="comment">// 执行更新数量</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, num, username, now);</span><br><span class="line">        <span class="keyword">if</span> (rows != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;修改商品数量时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.在com.cy.store.service包下创建测试类CartServiceTests类，并编写测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICartService cartService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addToCart</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">pid</span> <span class="operator">=</span> <span class="number">10000007</span>;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">amount</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">            cartService.addToCart(uid, pid, amount, username);</span><br><span class="line">            System.out.println(<span class="string">&quot;OK.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            System.out.println(e.getClass().getSimpleName());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-购物车-添加购物车-控制器"><a href="#5-购物车-添加购物车-控制器" class="headerlink" title="5 购物车-添加购物车-控制器"></a>5 购物车-添加购物车-控制器</h3><h4 id="5-1-处理异常-2"><a href="#5-1-处理异常-2" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="5-2-设计请求-2"><a href="#5-2-设计请求-2" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/carts/add_to_cart
请求参数：Integer pid, Integer amount, HttpSession session
请求类型：POST
响应结果：JsonResult&lt;Void&gt;
</code></pre>
<h4 id="5-3-处理请求-2"><a href="#5-3-处理请求-2" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.在com.cy.store.controller包下创建CartController类并继承自BaseController类，添加@RequestMapping(“carts”)和@RestController注解；在类中声明ICartService业务对象，并使用@Autowired注解修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.controller;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;carts&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICartService cartService;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在CartController类中添加处理请求的addToCart()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;add_to_cart&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Void&gt; <span class="title function_">addToCart</span><span class="params">(Integer pid, Integer amount, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 从Session中获取uid和username</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="comment">// 调用业务对象执行添加到购物车</span></span><br><span class="line">    cartService.addToCart(uid, pid, amount, username);</span><br><span class="line">    <span class="comment">// 返回成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Void&gt;(OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/add_to_cart?pid=10000017&amp;amount=3%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/add_to_cart?pid=10000017&amp;amount=3进行测试。</a></p>
<h3 id="6-购物车-添加购物车-前端页面"><a href="#6-购物车-添加购物车-前端页面" class="headerlink" title="6 购物车-添加购物车-前端页面"></a>6 购物车-添加购物车-前端页面</h3><p>1.在product.html页面中的body标签内的script标签里为“加入购物车”按钮添加点击事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-add-to-cart&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/carts/add_to_cart&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="string">&quot;pid&quot;</span>: id,</span><br><span class="line">            <span class="string">&quot;amount&quot;</span>: $(<span class="string">&quot;#num&quot;</span>).<span class="title function_">val</span>()</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;增加成功！&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;增加失败！&quot;</span> + json.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>$.ajax函数中参数data提交请参数的方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1.适用于参数较多，且都在同一个表单中</span><br><span class="line">data: $(&quot;#form表单id属性值&quot;).serialize()</span><br><span class="line">// 2.仅适用于上传文件</span><br><span class="line">data: new FormData($(&quot;##form表单id属性值&quot;)[0])</span><br><span class="line">// 3.参数拼接形式提交</span><br><span class="line">data: &quot;pid=10000005&amp;amount=3&quot;</span><br><span class="line">// 4.使用JSON格式提交参数</span><br><span class="line">data: &#123;</span><br><span class="line">	&quot;pid&quot;: 10000005,</span><br><span class="line">	&quot;amount&quot;: 3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/index.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/index.html页面进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/1-16515560965271.png" class="">

<h2 id="显示购物车列表"><a href="#显示购物车列表" class="headerlink" title="显示购物车列表"></a>显示购物车列表</h2><h3 id="1-购物车-显示列表-持久层"><a href="#1-购物车-显示列表-持久层" class="headerlink" title="1 购物车-显示列表-持久层"></a>1 购物车-显示列表-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-5"><a href="#1-1-规划需要执行的SQL语句-5" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>显示某用户的购物车列表数据的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	cid,</span><br><span class="line">	uid,</span><br><span class="line">	pid,</span><br><span class="line">	t_cart.price,</span><br><span class="line">	t_cart.num,</span><br><span class="line">	t_product.title,</span><br><span class="line">	t_product.price AS realPrice,</span><br><span class="line">	t_product.image</span><br><span class="line">FROM</span><br><span class="line">	t_cart</span><br><span class="line">	LEFT JOIN t_product ON t_cart.pid = t_product.id </span><br><span class="line">WHERE</span><br><span class="line">	uid = #&#123;uid&#125;</span><br><span class="line">ORDER BY</span><br><span class="line">	t_cart.created_time DESC</span><br></pre></td></tr></table></figure>

<h4 id="1-2-接口与抽象方法-2"><a href="#1-2-接口与抽象方法-2" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>1.由于涉及多表关联查询，必然没有哪个实体类可以封装此次的查询结果，因此需要创建VO类。创建com.cy.store.vo.CartVO类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.vo;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 购物车数据的Value Object类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartVO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Long realPrice;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在CartMapper接口中添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询某用户的购物车数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 该用户的购物车数据的列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;CartVO&gt; <span class="title function_">findVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置SQL映射-2"><a href="#1-3-配置SQL映射-2" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper.xml文件中添加findVOByUid()方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询某用户的购物车数据：List&lt;CartVO&gt; findVOByUid(Integer uid) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findVOByUid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        cid,</span><br><span class="line">        uid,</span><br><span class="line">        pid,</span><br><span class="line">        t_cart.price,</span><br><span class="line">        t_cart.num,</span><br><span class="line">        t_product.title,</span><br><span class="line">        t_product.price AS realPrice,</span><br><span class="line">        t_product.image</span><br><span class="line">    FROM</span><br><span class="line">        t_cart</span><br><span class="line">        LEFT JOIN t_product ON t_cart.pid = t_product.id </span><br><span class="line">    WHERE</span><br><span class="line">        uid = #&#123;uid&#125;</span><br><span class="line">    ORDER BY</span><br><span class="line">        t_cart.created_time DESC</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在CartMapperTests测试类中添加findVOByUid()方法的测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findVOByUid</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;CartVO&gt; list = cartMapper.findVOByUid(<span class="number">31</span>);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-购物车-显示列表-业务层"><a href="#2-购物车-显示列表-业务层" class="headerlink" title="2 购物车-显示列表-业务层"></a>2 购物车-显示列表-业务层</h3><h4 id="2-1-规划异常-5"><a href="#2-1-规划异常-5" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="2-2-接口与抽象方法-1"><a href="#2-2-接口与抽象方法-1" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在ICartService接口中添加findVOByUid()抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询某用户的购物车数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 该用户的购物车数据的列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;CartVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-5"><a href="#2-3-实现抽象方法-5" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中重写业务接口中的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">getVOByUid</span><span class="params">(Integer uid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> cartMapper.findVOByUid(uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在CartServiceTests测试类中添加getVOByUid()测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByUid</span><span class="params">()</span> &#123;</span><br><span class="line">    List&lt;CartVO&gt; list = cartService.getVOByUid(<span class="number">31</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + list.size());</span><br><span class="line">    <span class="keyword">for</span> (CartVO item : list) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-购物车-显示列表-控制器"><a href="#3-购物车-显示列表-控制器" class="headerlink" title="3 购物车-显示列表-控制器"></a>3 购物车-显示列表-控制器</h3><h4 id="3-1-处理异常-5"><a href="#3-1-处理异常-5" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="3-2-设计请求-5"><a href="#3-2-设计请求-5" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/carts/
请求参数：HttpSession session
请求类型：GET
响应结果：JsonResult&lt;List&lt;CartVO&gt;&gt;
</code></pre>
<h4 id="3-3-处理请求-4"><a href="#3-3-处理请求-4" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中编写处理请求的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&#123;&quot;&quot;, &quot;/&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="title function_">getVOByUid</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 从Session中获取uid</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="comment">// 调用业务对象执行查询数据</span></span><br><span class="line">    List&lt;CartVO&gt; data = cartService.getVOByUid(uid);</span><br><span class="line">    <span class="comment">// 返回成功与数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;List&lt;CartVO&gt;&gt;(OK, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts请求进行测试。</a></p>
<h3 id="4-购物车-显示列表-前端页面"><a href="#4-购物车-显示列表-前端页面" class="headerlink" title="4 购物车-显示列表-前端页面"></a>4 购物车-显示列表-前端页面</h3><p>1.将cart.html页面的head头标签内引入的cart.js文件注释掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/cart.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br></pre></td></tr></table></figure>

<p>2.给form标签添加action&#x3D;”orderConfirm.html”属性、tbody标签添加id&#x3D;”cart-list”属性、结算按钮的类型改为type&#x3D;”button”值。如果以上属性值已经添加过无需重复添加。</p>
<p>3.在cart.html页面body标签内的script标签中编写展示购物车列表的代码。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/carts&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">let</span> tr = <span class="string">&#x27;&lt;tr&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&#x27;</span></span><br><span class="line">                + 	<span class="string">&#x27;&lt;input name=&quot;cids&quot; value=&quot;#&#123;cid&#125;&quot; type=&quot;checkbox&quot; class=&quot;ckitem&quot; /&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;#&#123;title&#125;#&#123;msg&#125;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;¥&lt;span id=&quot;price-#&#123;cid&#125;&quot;&gt;#&#123;realPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&#x27;</span></span><br><span class="line">                + 	<span class="string">&#x27;&lt;input type=&quot;button&quot; value=&quot;-&quot; class=&quot;num-btn&quot; onclick=&quot;reduceNum(1)&quot; /&gt;&#x27;</span></span><br><span class="line">                + 	<span class="string">&#x27;&lt;input id=&quot;num-#&#123;cid&#125;&quot; type=&quot;text&quot; size=&quot;2&quot; readonly=&quot;readonly&quot; class=&quot;num-text&quot; value=&quot;#&#123;num&#125;&quot;&gt;&#x27;</span></span><br><span class="line">                + 	<span class="string">&#x27;&lt;input class=&quot;num-btn&quot; type=&quot;button&quot; value=&quot;+&quot; onclick=&quot;addNum(#&#123;cid&#125;)&quot; /&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;¥&lt;span id=&quot;total-price-#&#123;cid&#125;&quot;&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&#x27;</span></span><br><span class="line">                + 	<span class="string">&#x27;&lt;input type=&quot;button&quot; onclick=&quot;delCartItem(this)&quot; class=&quot;cart-del btn btn-default btn-xs&quot; value=&quot;删除&quot; /&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;cid&#125;/g</span>, list[i].<span class="property">cid</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;title&#125;/g</span>, list[i].<span class="property">title</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;image&#125;/g</span>, list[i].<span class="property">image</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;realPrice&#125;/g</span>, list[i].<span class="property">realPrice</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;num&#125;/g</span>, list[i].<span class="property">num</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;totalPrice&#125;/g</span>, list[i].<span class="property">realPrice</span> * list[i].<span class="property">num</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (list[i].<span class="property">realPrice</span> &lt; list[i].<span class="property">price</span>) &#123;</span><br><span class="line">                    tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;msg&#125;/g</span>, <span class="string">&quot;比加入时降价&quot;</span> + (list[i].<span class="property">price</span> - list[i].<span class="property">realPrice</span>) + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;msg&#125;/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(tr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/2-16515560965282.png" class="">

<h2 id="增加商品数量"><a href="#增加商品数量" class="headerlink" title="增加商品数量"></a>增加商品数量</h2><h3 id="1-购物车-增加商品数量-持久层"><a href="#1-购物车-增加商品数量-持久层" class="headerlink" title="1 购物车-增加商品数量-持久层"></a>1 购物车-增加商品数量-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-6"><a href="#1-1-规划需要执行的SQL语句-6" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>1.首先进行查询需要操作的购物车数据信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM t_cart WHERE cid=?</span><br></pre></td></tr></table></figure>

<p>2.然后计算出新的商品数量值，如果满足更新条件则执行更新操作。此SQL语句无需重复开发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UPDATE t_cart SET num=?, modified_user=?, modified_time=? WHERE cid=?</span><br></pre></td></tr></table></figure>

<h4 id="1-2-接口与抽象方法-3"><a href="#1-2-接口与抽象方法-3" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在CartMapper接口中添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据购物车数据id查询购物车数据详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid 购物车数据id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的购物车数据详情，如果没有匹配的数据则返回null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Cart <span class="title function_">findByCid</span><span class="params">(Integer cid)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置SQL映射-3"><a href="#1-3-配置SQL映射-3" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper文件中添加findByCid(Integer cid)方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据购物车数据id查询购物车数据详情：Cart findByCid(Integer cid) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCid&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;CartEntityMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">   		*</span><br><span class="line">    FROM</span><br><span class="line">    	t_cart</span><br><span class="line">    WHERE</span><br><span class="line">    	cid = #&#123;cid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在CartMapperTests测试类中添加findByCid()测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCid</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">	<span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByCid(cid);</span><br><span class="line">	System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-购物车-增加商品数量-业务层"><a href="#2-购物车-增加商品数量-业务层" class="headerlink" title="2 购物车-增加商品数量-业务层"></a>2 购物车-增加商品数量-业务层</h3><h4 id="2-1-规划异常-6"><a href="#2-1-规划异常-6" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><p>1.如果尝试访问的购物车数据不存在，则抛出CartNotFoundException异常。创建com.cy.store.service.ex.CartNotFoundException类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 购物车数据不存在的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">ServiceException</span> &#123;</span><br><span class="line">	<span class="comment">// Override Methods...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.如果尝试访问的数据并不是当前登录用户的数据，则抛出AccessDeniedException异常。此异常类无需再次创建。</p>
<p>3.最终执行更新操作时，可能会抛出UpdateException异常。此异常类无需再次创建。</p>
<h4 id="2-2-接口与抽象方法-2"><a href="#2-2-接口与抽象方法-2" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在业务层ICartService接口中添加addNum()抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将购物车中某商品的数量加1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cid 购物车数量的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 当前登录的用户的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 当前登录的用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 增加成功后新的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Integer <span class="title function_">addNum</span><span class="params">(Integer cid, Integer uid, String username)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-6"><a href="#2-3-实现抽象方法-6" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中，实现接口中的抽象方法并规划业务逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Integer <span class="title function_">addNum</span><span class="params">(Integer cid, Integer uid, String username)</span> &#123;</span><br><span class="line">	<span class="comment">// 调用findByCid(cid)根据参数cid查询购物车数据</span></span><br><span class="line">	<span class="comment">// 判断查询结果是否为null</span></span><br><span class="line">	<span class="comment">// 是：抛出CartNotFoundException</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断查询结果中的uid与参数uid是否不一致</span></span><br><span class="line">	<span class="comment">// 是：抛出AccessDeniedException</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 可选：检查商品的数量是否大于多少(适用于增加数量)或小于多少(适用于减少数量)</span></span><br><span class="line">	<span class="comment">// 根据查询结果中的原数量增加1得到新的数量num</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建当前时间对象，作为modifiedTime</span></span><br><span class="line">	<span class="comment">// 调用updateNumByCid(cid, num, modifiedUser, modifiedTime)执行修改数量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.实现addNum()方法中的业务逻辑代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">addNum</span><span class="params">(Integer cid, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 调用findByCid(cid)根据参数cid查询购物车数据</span></span><br><span class="line">    <span class="type">Cart</span> <span class="variable">result</span> <span class="operator">=</span> cartMapper.findByCid(cid);</span><br><span class="line">    <span class="comment">// 判断查询结果是否为null</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 是：抛出CartNotFoundException</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">CartNotFoundException</span>(<span class="string">&quot;尝试访问的购物车数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断查询结果中的uid与参数uid是否不一致</span></span><br><span class="line">    <span class="keyword">if</span> (!result.getUid().equals(uid)) &#123;</span><br><span class="line">        <span class="comment">// 是：抛出AccessDeniedException</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选：检查商品的数量是否大于多少(适用于增加数量)或小于多少(适用于减少数量)</span></span><br><span class="line">    <span class="comment">// 根据查询结果中的原数量增加1得到新的数量num</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> result.getNum() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建当前时间对象，作为modifiedTime</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">// 调用updateNumByCid(cid, num, modifiedUser, modifiedTime)执行修改数量</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> cartMapper.updateNumByCid(cid, num, username, now);</span><br><span class="line">    <span class="keyword">if</span> (rows != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;修改商品数量时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回新的数量</span></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在CartServiceTests测试类中添加addNum()测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cid</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;管理员&quot;</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> cartService.addNum(cid, uid, username);</span><br><span class="line">        System.out.println(<span class="string">&quot;OK. New num=&quot;</span> + num);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">        System.out.println(e.getClass().getSimpleName());</span><br><span class="line">        System.out.println(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-购物车-增加商品数量-控制器"><a href="#3-购物车-增加商品数量-控制器" class="headerlink" title="3 购物车-增加商品数量-控制器"></a>3 购物车-增加商品数量-控制器</h3><h4 id="3-1-处理异常-6"><a href="#3-1-处理异常-6" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p>在BaseController类中添加CartNotFoundException异常类的统一管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> CartNotFoundException) &#123;</span><br><span class="line">    result.setState(<span class="number">4007</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-设计请求-6"><a href="#3-2-设计请求-6" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/carts/&#123;cid&#125;/num/add
请求参数：@PathVariable(&quot;cid&quot;) Integer cid, HttpSession session
请求类型：POST
响应结果：JsonResult&lt;Integer&gt;
</code></pre>
<h4 id="3-3-处理请求-5"><a href="#3-3-处理请求-5" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中添加处理请求的addNum()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;&#123;cid&#125;/num/add&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;Integer&gt; <span class="title function_">addNum</span><span class="params">(<span class="meta">@PathVariable(&quot;cid&quot;)</span> Integer cid, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 从Session中获取uid和username</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">    <span class="comment">// 调用业务对象执行增加数量</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">data</span> <span class="operator">=</span> cartService.addNum(cid, uid, username);</span><br><span class="line">    <span class="comment">// 返回成功</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Integer&gt;(OK, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/6/num/add%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/6/num/add页面进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/3-16515560965283.png" class="">

<h3 id="4-购物车-增加商品数量-前端页面"><a href="#4-购物车-增加商品数量-前端页面" class="headerlink" title="4 购物车-增加商品数量-前端页面"></a>4 购物车-增加商品数量-前端页面</h3><p>1.首先确定在showCartList()函数中动态拼接的增加购物车按钮是绑定了addNum()事件，如果已经添加无需重复添加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input <span class="keyword">class</span>=<span class="string">&quot;num-btn&quot;</span> type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;+&quot;</span> onclick=<span class="string">&quot;addNum(#&#123;cid&#125;)&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>2.在script标签中定义addNum()函数并编写增加购物车数量的逻辑代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addNum</span>(<span class="params">cid</span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/carts/&quot;</span> + cid + <span class="string">&quot;/num/add&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// showCartList();</span></span><br><span class="line">                $(<span class="string">&quot;#num-&quot;</span> + cid).<span class="title function_">val</span>(json.<span class="property">data</span>);</span><br><span class="line">                <span class="keyword">let</span> price = $(<span class="string">&quot;#price-&quot;</span> + cid).<span class="title function_">html</span>();</span><br><span class="line">                <span class="keyword">let</span> totalPrice = price * json.<span class="property">data</span>;</span><br><span class="line">                $(<span class="string">&quot;#total-price-&quot;</span> + cid).<span class="title function_">html</span>(totalPrice);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;增加商品数量失败！&quot;</span> + json.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%E7%82%B9%E5%87%BB%E2%80%9C+%E2%80%9D%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面点击“+”按钮进行测试。</a></p>
<h2 id="显示勾选的购物车数据"><a href="#显示勾选的购物车数据" class="headerlink" title="显示勾选的购物车数据"></a>显示勾选的购物车数据</h2><h3 id="1-显示确认订单页-显示勾选的购物车数据-持久层"><a href="#1-显示确认订单页-显示勾选的购物车数据-持久层" class="headerlink" title="1 显示确认订单页-显示勾选的购物车数据-持久层"></a>1 显示确认订单页-显示勾选的购物车数据-持久层</h3><h4 id="1-1-规划需要执行的SQL语句-7"><a href="#1-1-规划需要执行的SQL语句-7" class="headerlink" title="1.1 规划需要执行的SQL语句"></a>1.1 规划需要执行的SQL语句</h4><p>在“确认订单页”显示的商品信息，应来自前序页面（购物车列表）中勾选的数据，所以显示的信息其实是购物车中的数据。到底需要显示哪些取决于用户的勾选操作，当用户勾选了若干条购物车数据后，这些数据的id应传递到当前“确认订单页”中，该页面根据这些id获取需要显示的数据列表。</p>
<p>所以在持久层需要完成“根据若干个不确定的id值，查询购物车数据表，显示购物车中的数据信息”。则需要执行的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">	cid,</span><br><span class="line">	uid,</span><br><span class="line">	pid,</span><br><span class="line">	t_cart.price,</span><br><span class="line">	t_cart.num,</span><br><span class="line">	t_product.title,</span><br><span class="line">	t_product.price AS realPrice,</span><br><span class="line">	t_product.image</span><br><span class="line">FROM</span><br><span class="line">	t_cart</span><br><span class="line">	LEFT JOIN t_product ON t_cart.pid = t_product.id </span><br><span class="line">WHERE</span><br><span class="line">	cid IN (?, ?, ?)</span><br><span class="line">ORDER BY</span><br><span class="line">	t_cart.created_time DESC	</span><br></pre></td></tr></table></figure>

<p>VO：Value Object，值对象。当SELECT查询到的结果属于多张表中的内容时，结果集不能使用某个POJO实体类来接受，因为POJO不能包含多表查询出来的结果，而VO可以存储查出来的结果集对应的映射。</p>
<h4 id="1-2-接口与抽象方法-4"><a href="#1-2-接口与抽象方法-4" class="headerlink" title="1.2 接口与抽象方法"></a>1.2 接口与抽象方法</h4><p>在CartMapper接口中添加findVOByCids(Integer[] cids)方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据若干个购物车数据id查询详情的列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cids 若干个购物车数据id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的购物车数据详情的列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;CartVO&gt; <span class="title function_">findVOByCids</span><span class="params">(Integer[] cids)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-配置SQL映射-4"><a href="#1-3-配置SQL映射-4" class="headerlink" title="1.3 配置SQL映射"></a>1.3 配置SQL映射</h4><p>1.在CartMapper.xml文件中添加SQL语句的映射配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据若干个购物车数据id查询详情的列表：List&lt;CartVO&gt; findVOByCids(Integer[] cids) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findVOByCids&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.cy.store.vo.CartVO&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">        cid,</span><br><span class="line">        uid,</span><br><span class="line">        pid,</span><br><span class="line">        t_cart.price,</span><br><span class="line">        t_cart.num,</span><br><span class="line">        t_product.title,</span><br><span class="line">        t_product.price AS realPrice,</span><br><span class="line">        t_product.image</span><br><span class="line">    FROM</span><br><span class="line">        t_cart</span><br><span class="line">            LEFT JOIN t_product ON t_cart.pid = t_product.id</span><br><span class="line">    WHERE</span><br><span class="line">        cid IN (</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">                #&#123;cid&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        )</span><br><span class="line">    ORDER BY</span><br><span class="line">        t_cart.created_time DESC</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在CartMapperTests测试类中添加findVOByCids()测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findVOByCids</span><span class="params">()</span> &#123;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + list.size());</span><br><span class="line">    <span class="keyword">for</span> (CartVO item : list) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-显示确认订单页-显示勾选的购物车数据-业务层"><a href="#2-显示确认订单页-显示勾选的购物车数据-业务层" class="headerlink" title="2 显示确认订单页-显示勾选的购物车数据-业务层"></a>2 显示确认订单页-显示勾选的购物车数据-业务层</h3><h4 id="2-1-规划异常-7"><a href="#2-1-规划异常-7" class="headerlink" title="2.1 规划异常"></a>2.1 规划异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="2-2-接口与抽象方法-3"><a href="#2-2-接口与抽象方法-3" class="headerlink" title="2.2 接口与抽象方法"></a>2.2 接口与抽象方法</h4><p>在ICartService接口中添加getVOByCids()抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据若干个购物车数据id查询详情的列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 当前登录的用户的id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cids 若干个购物车数据id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的购物车数据详情的列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">List&lt;CartVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid, Integer[] cids)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现抽象方法-7"><a href="#2-3-实现抽象方法-7" class="headerlink" title="2.3 实现抽象方法"></a>2.3 实现抽象方法</h4><p>1.在CartServiceImpl类中重写业务接口中的抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CartVO&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer uid, Integer[] cids)</span> &#123;</span><br><span class="line">    List&lt;CartVO&gt; list = cartMapper.findVOByCids(cids);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    for (CartVO cart : list) &#123;</span></span><br><span class="line"><span class="comment">		if (!cart.getUid().equals(uid)) &#123;</span></span><br><span class="line"><span class="comment">			list.remove(cart);</span></span><br><span class="line"><span class="comment">		&#125;</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    Iterator&lt;CartVO&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">        <span class="type">CartVO</span> <span class="variable">cart</span> <span class="operator">=</span> it.next();</span><br><span class="line">        <span class="keyword">if</span> (!cart.getUid().equals(uid)) &#123;</span><br><span class="line">            it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在CartServiceTests测试类中添加getVOByCids()测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getVOByCids</span><span class="params">()</span> &#123;</span><br><span class="line">    Integer[] cids = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">    List&lt;CartVO&gt; list = cartService.getVOByCids(uid, cids);</span><br><span class="line">    System.out.println(<span class="string">&quot;count=&quot;</span> + list.size());</span><br><span class="line">    <span class="keyword">for</span> (CartVO item : list) &#123;</span><br><span class="line">        System.out.println(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-显示确认订单页-显示勾选的购物车数据-控制器"><a href="#3-显示确认订单页-显示勾选的购物车数据-控制器" class="headerlink" title="3 显示确认订单页-显示勾选的购物车数据-控制器"></a>3 显示确认订单页-显示勾选的购物车数据-控制器</h3><h4 id="3-1-处理异常-7"><a href="#3-1-处理异常-7" class="headerlink" title="3.1 处理异常"></a>3.1 处理异常</h4><p><strong>说明</strong>：无异常。</p>
<h4 id="3-2-设计请求-7"><a href="#3-2-设计请求-7" class="headerlink" title="3.2 设计请求"></a>3.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/carts/list
请求参数：Integer[] cids, HttpSession session
请求类型：GET
响应结果：JsonResult&lt;List&lt;CartVO&gt;&gt;
</code></pre>
<h4 id="3-3-处理请求-6"><a href="#3-3-处理请求-6" class="headerlink" title="3.3 处理请求"></a>3.3 处理请求</h4><p>1.在CartController类中添加处理请求的getVOByCids()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> JsonResult&lt;List&lt;CartVO&gt;&gt; <span class="title function_">getVOByCids</span><span class="params">(Integer[] cids, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// 从Session中获取uid</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">    <span class="comment">// 调用业务对象执行查询数据</span></span><br><span class="line">    List&lt;CartVO&gt; data = cartService.getVOByCids(uid, cids);</span><br><span class="line">    <span class="comment">// 返回成功与数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;&gt;(OK, data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/carts/list?cids=7&amp;cids=8&amp;cids=13&amp;cids=14&amp;cids=17%E5%9C%B0%E5%9D%80%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/carts/list?cids=7&amp;cids=8&amp;cids=13&amp;cids=14&amp;cids=17地址进行测试。</a></p>
<h3 id="4-显示确认订单页-前端页面"><a href="#4-显示确认订单页-前端页面" class="headerlink" title="4 显示确认订单页-前端页面"></a>4 显示确认订单页-前端页面</h3><h4 id="4-1-显示勾选的购物车数据-前端页面"><a href="#4-1-显示勾选的购物车数据-前端页面" class="headerlink" title="4.1 显示勾选的购物车数据-前端页面"></a>4.1 显示勾选的购物车数据-前端页面</h4><p>1.在orderConfirm.html页面的head标签里注释掉引入外部的orderConfirm.js文件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/orderConfirm.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span> --&gt;</span><br></pre></td></tr></table></figure>

<p>2.在orderConfirm.html页面中检查必要控件的属性是否添加，如果已添加无需重复添加。</p>
<p>3.在orderConfirm.html页面中的body标签内的最后添加srcipt标签并在标签内部添加处理购物车“订单商品信息”列表展示的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// showAddressList();</span></span><br><span class="line">    <span class="title function_">showCartList</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showCartList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/carts/list&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>),</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count=&quot;</span> + list.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">let</span> allCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">let</span> allPrice = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(list[i].<span class="property">title</span>);</span><br><span class="line">                <span class="keyword">let</span> tr = <span class="string">&#x27;&lt;tr&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&lt;img src=&quot;..#&#123;image&#125;collect.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;&lt;input type=&quot;hidden&quot; name=&quot;cids&quot; value=&quot;#&#123;cid&#125;&quot; /&gt;#&#123;title&#125;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;realPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;#&#123;num&#125;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;td&gt;¥&lt;span&gt;#&#123;totalPrice&#125;&lt;/span&gt;&lt;/td&gt;&#x27;</span></span><br><span class="line">                + <span class="string">&#x27;&lt;/tr&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;cid&#125;/g</span>, list[i].<span class="property">cid</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;image&#125;/g</span>, list[i].<span class="property">image</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;title&#125;/g</span>, list[i].<span class="property">title</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;realPrice&#125;/g</span>, list[i].<span class="property">realPrice</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;num&#125;/g</span>, list[i].<span class="property">num</span>);</span><br><span class="line">                tr = tr.<span class="title function_">replace</span>(<span class="regexp">/#&#123;totalPrice&#125;/g</span>, list[i].<span class="property">realPrice</span> * list[i].<span class="property">num</span>);</span><br><span class="line"></span><br><span class="line">                $(<span class="string">&quot;#cart-list&quot;</span>).<span class="title function_">append</span>(tr);</span><br><span class="line"></span><br><span class="line">                allCount += list[i].<span class="property">num</span>;</span><br><span class="line">                allPrice += list[i].<span class="property">realPrice</span> * list[i].<span class="property">num</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $(<span class="string">&quot;#all-count&quot;</span>).<span class="title function_">html</span>(allCount);</span><br><span class="line">            $(<span class="string">&quot;#all-price&quot;</span>).<span class="title function_">html</span>(allPrice);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>4.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8B%BE%E9%80%89%E5%95%86%E5%93%81%E5%86%8D%E7%82%B9%E5%87%BB%E2%80%9C%E7%BB%93%E7%AE%97%E2%80%9D%E6%8C%89%E9%92%AE%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/cart.html页面，勾选商品再点击“结算”按钮进行测试。</a></p>
<h4 id="4-2-显示选择收货地址-前端页面"><a href="#4-2-显示选择收货地址-前端页面" class="headerlink" title="4.2 显示选择收货地址-前端页面"></a>4.2 显示选择收货地址-前端页面</h4><p>1.在orderConfirm.html页面中的body标签内的srcipt标签中添加获取收货地址列表方法的定义。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">showAddressList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">empty</span>();</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/addresses&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> list = json.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count=&quot;</span> + list.<span class="property">length</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(list[i].<span class="property">name</span>);</span><br><span class="line">                <span class="keyword">let</span> opt = <span class="string">&#x27;&lt;option value=&quot;#&#123;aid&#125;&quot;&gt;#&#123;name&#125; | #&#123;tag&#125; | #&#123;province&#125;#&#123;city&#125;#&#123;area&#125;#&#123;address&#125; | #&#123;phone&#125;&lt;/option&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="regexp">/#&#123;aid&#125;/g</span>, list[i].<span class="property">aid</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="regexp">/#&#123;tag&#125;/g</span>, list[i].<span class="property">tag</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;name&#125;&quot;</span>, list[i].<span class="property">name</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;province&#125;&quot;</span>, list[i].<span class="property">provinceName</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;city&#125;&quot;</span>, list[i].<span class="property">cityName</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;area&#125;&quot;</span>, list[i].<span class="property">areaName</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;address&#125;&quot;</span>, list[i].<span class="property">address</span>);</span><br><span class="line">                opt = opt.<span class="title function_">replace</span>(<span class="string">&quot;#&#123;phone&#125;&quot;</span>, list[i].<span class="property">phone</span>);</span><br><span class="line"></span><br><span class="line">                $(<span class="string">&quot;#address-list&quot;</span>).<span class="title function_">append</span>(opt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在orderConfirm.html页面中的body标签内的srcipt标签中添加展示收货地址列表方法的调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">showAddressList</span>();</span><br><span class="line">        <span class="title function_">showCartList</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>3.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/orderConfirm.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/web/orderConfirm.html页面进行测试。</a></p>
<h2 id="创建订单"><a href="#创建订单" class="headerlink" title="创建订单"></a>创建订单</h2><h3 id="1-订单-创建数据表"><a href="#1-订单-创建数据表" class="headerlink" title="1 订单-创建数据表"></a>1 订单-创建数据表</h3><p>1.使用use命令先选中store数据库。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USE store;</span><br></pre></td></tr></table></figure>

<p>2.在store数据库中创建t_order和t_order_item数据表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t_order (</span><br><span class="line">	oid INT AUTO_INCREMENT COMMENT &#x27;订单id&#x27;,</span><br><span class="line">	uid INT NOT NULL COMMENT &#x27;用户id&#x27;,</span><br><span class="line">	recv_name VARCHAR(20) NOT NULL COMMENT &#x27;收货人姓名&#x27;,</span><br><span class="line">	recv_phone VARCHAR(20) COMMENT &#x27;收货人电话&#x27;,</span><br><span class="line">	recv_province VARCHAR(15) COMMENT &#x27;收货人所在省&#x27;,</span><br><span class="line">	recv_city VARCHAR(15) COMMENT &#x27;收货人所在市&#x27;,</span><br><span class="line">	recv_area VARCHAR(15) COMMENT &#x27;收货人所在区&#x27;,</span><br><span class="line">	recv_address VARCHAR(50) COMMENT &#x27;收货详细地址&#x27;,</span><br><span class="line">	total_price BIGINT COMMENT &#x27;总价&#x27;,</span><br><span class="line">	status INT COMMENT &#x27;状态：0-未支付，1-已支付，2-已取消，3-已关闭，4-已完成&#x27;,</span><br><span class="line">	order_time DATETIME COMMENT &#x27;下单时间&#x27;,</span><br><span class="line">	pay_time DATETIME COMMENT &#x27;支付时间&#x27;,</span><br><span class="line">	created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,</span><br><span class="line">	created_time DATETIME COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">	modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,</span><br><span class="line">	modified_time DATETIME COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">	PRIMARY KEY (oid)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE t_order_item (</span><br><span class="line">	id INT AUTO_INCREMENT COMMENT &#x27;订单中的商品记录的id&#x27;,</span><br><span class="line">	oid INT NOT NULL COMMENT &#x27;所归属的订单的id&#x27;,</span><br><span class="line">	pid INT NOT NULL COMMENT &#x27;商品的id&#x27;,</span><br><span class="line">	title VARCHAR(100) NOT NULL COMMENT &#x27;商品标题&#x27;,</span><br><span class="line">	image VARCHAR(500) COMMENT &#x27;商品图片&#x27;,</span><br><span class="line">	price BIGINT COMMENT &#x27;商品价格&#x27;,</span><br><span class="line">	num INT COMMENT &#x27;购买数量&#x27;,</span><br><span class="line">	created_user VARCHAR(20) COMMENT &#x27;创建人&#x27;,</span><br><span class="line">	created_time DATETIME COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">	modified_user VARCHAR(20) COMMENT &#x27;修改人&#x27;,</span><br><span class="line">	modified_time DATETIME COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">	PRIMARY KEY (id)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure>

<h3 id="2-订单-创建实体类"><a href="#2-订单-创建实体类" class="headerlink" title="2 订单-创建实体类"></a>2 订单-创建实体类</h3><p>1.在com.cy.store.entity包下创建Order实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.entity;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 订单数据的实体类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer oid;</span><br><span class="line">    <span class="keyword">private</span> Integer uid;</span><br><span class="line">    <span class="keyword">private</span> String recvName;</span><br><span class="line">    <span class="keyword">private</span> String recvPhone;</span><br><span class="line">    <span class="keyword">private</span> String recvProvince;</span><br><span class="line">    <span class="keyword">private</span> String recvCity;</span><br><span class="line">    <span class="keyword">private</span> String recvArea;</span><br><span class="line">    <span class="keyword">private</span> String recvAddress;</span><br><span class="line">    <span class="keyword">private</span> Long totalPrice;</span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="keyword">private</span> Date orderTime;</span><br><span class="line">    <span class="keyword">private</span> Date payTime;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.entity包下创建OrderItem实体类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.entity;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 订单中的商品数据 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Integer oid;</span><br><span class="line">    <span class="keyword">private</span> Integer pid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Long price;</span><br><span class="line">    <span class="keyword">private</span> Integer num;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Generate: Getter and Setter、Generate hashCode() and equals()、toString()</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h3 id="3-订单-持久层"><a href="#3-订单-持久层" class="headerlink" title="3 订单-持久层"></a>3 订单-持久层</h3><h4 id="3-1-规划需要执行的SQL语句-2"><a href="#3-1-规划需要执行的SQL语句-2" class="headerlink" title="3.1 规划需要执行的SQL语句"></a>3.1 规划需要执行的SQL语句</h4><p>1.插入订单数据的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO t_order (</span><br><span class="line">	uid,</span><br><span class="line">	recv_name,</span><br><span class="line">	recv_phone,</span><br><span class="line">	recv_province,</span><br><span class="line">	recv_city,</span><br><span class="line">	recv_area,</span><br><span class="line">	recv_address,</span><br><span class="line">	total_price,</span><br><span class="line">	status,</span><br><span class="line">	order_time,</span><br><span class="line">	pay_time,</span><br><span class="line">	created_user,</span><br><span class="line">	created_time,</span><br><span class="line">	modified_user,</span><br><span class="line">	modified_time </span><br><span class="line">)</span><br><span class="line">VALUES (</span><br><span class="line">	#对应字段的值列表</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>2.插入订单商品数据的SQL语句大致是。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO t_order_item ( </span><br><span class="line">	oid, </span><br><span class="line">	pid, </span><br><span class="line">	title, </span><br><span class="line">	image, </span><br><span class="line">	price, </span><br><span class="line">	num, </span><br><span class="line">	created_user, </span><br><span class="line">	created_time, </span><br><span class="line">	modified_user, </span><br><span class="line">	modified_time </span><br><span class="line">)</span><br><span class="line">VALUES ( </span><br><span class="line">	#对应字段的值列表</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="3-2-接口与抽象方法-2"><a href="#3-2-接口与抽象方法-2" class="headerlink" title="3.2 接口与抽象方法"></a>3.2 接口与抽象方法</h4><p>在com.cy.store.mapper包下创建OrderMapper接口并在接口中添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.OrderItem;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理订单及订单商品数据的持久层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> order 订单数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrder</span><span class="params">(Order order)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入订单商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderItem 订单商品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 受影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">insertOrderItem</span><span class="params">(OrderItem orderItem)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-配置SQL映射-2"><a href="#3-3-配置SQL映射-2" class="headerlink" title="3.3 配置SQL映射"></a>3.3 配置SQL映射</h4><p>1.在main\resources\mapper文件夹下创建OrderMapper.xml文件，并添加抽象方法的映射。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.cy.store.mapper.OrderMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 插入订单数据：Integer insertOrder(Order order) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrder&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;oid&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_order (</span><br><span class="line">            uid, recv_name, recv_phone, recv_province, recv_city, recv_area, recv_address,</span><br><span class="line">            total_price,status, order_time, pay_time, created_user, created_time, modified_user,</span><br><span class="line">            modified_time</span><br><span class="line">        ) VALUES (</span><br><span class="line">            #&#123;uid&#125;, #&#123;recvName&#125;, #&#123;recvPhone&#125;, #&#123;recvProvince&#125;, #&#123;recvCity&#125;, #&#123;recvArea&#125;,</span><br><span class="line">            #&#123;recvAddress&#125;, #&#123;totalPrice&#125;, #&#123;status&#125;, #&#123;orderTime&#125;, #&#123;payTime&#125;, #&#123;createdUser&#125;,</span><br><span class="line">            #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 插入订单商品数据：Integer insertOrderItem(OrderItem orderItem) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertOrderItem&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO t_order_item (</span><br><span class="line">            oid, pid, title, image, price, num, created_user,</span><br><span class="line">            created_time, modified_user, modified_time</span><br><span class="line">        ) VALUES (</span><br><span class="line">            #&#123;oid&#125;, #&#123;pid&#125;, #&#123;title&#125;, #&#123;image&#125;, #&#123;price&#125;, #&#123;num&#125;, #&#123;createdUser&#125;,</span><br><span class="line">            #&#123;createdTime&#125;, #&#123;modifiedUser&#125;, #&#123;modifiedTime&#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.mapper包下创建OrderMapperTests测试类，并添加测试方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.mapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.OrderItem;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderMapperTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order.setUid(<span class="number">31</span>);</span><br><span class="line">        order.setRecvName(<span class="string">&quot;小王&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrderItem</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">OrderItem</span> <span class="variable">orderItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">        orderItem.setOid(<span class="number">1</span>);</span><br><span class="line">        orderItem.setPid(<span class="number">2</span>);</span><br><span class="line">        orderItem.setTitle(<span class="string">&quot;高档铅笔&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows</span> <span class="operator">=</span> orderMapper.insertOrderItem(orderItem);</span><br><span class="line">        System.out.println(<span class="string">&quot;rows=&quot;</span> + rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-订单-业务层"><a href="#4-订单-业务层" class="headerlink" title="4 订单-业务层"></a>4 订单-业务层</h3><h4 id="4-1-规划异常-3"><a href="#4-1-规划异常-3" class="headerlink" title="4.1 规划异常"></a>4.1 规划异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="4-2-接口与抽象方法-3"><a href="#4-2-接口与抽象方法-3" class="headerlink" title="4.2 接口与抽象方法"></a>4.2 接口与抽象方法</h4><p>1.由于处理过程中还需要涉及收货地址数据的处理，所以需要先在IAddressService接口中添加getByAid()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据收货地址数据的id，查询收货地址详情</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> aid 收货地址id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> uid 归属的用户id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 匹配的收货地址详情</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Address <span class="title function_">getByAid</span><span class="params">(Integer aid, Integer uid)</span>;</span><br></pre></td></tr></table></figure>

<p>2.在AddressServiceImpl类中实现接口中的getByAid()抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Address <span class="title function_">getByAid</span><span class="params">(Integer aid, Integer uid)</span> &#123;</span><br><span class="line">    <span class="comment">// 根据收货地址数据id，查询收货地址详情</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressMapper.findByAid(aid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (address == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AddressNotFoundException</span>(<span class="string">&quot;尝试访问的收货地址数据不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!address.getUid().equals(uid)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="string">&quot;非法访问&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    address.setProvinceCode(<span class="literal">null</span>);</span><br><span class="line">    address.setCityCode(<span class="literal">null</span>);</span><br><span class="line">    address.setAreaCode(<span class="literal">null</span>);</span><br><span class="line">    address.setCreatedUser(<span class="literal">null</span>);</span><br><span class="line">    address.setCreatedTime(<span class="literal">null</span>);</span><br><span class="line">    address.setModifiedUser(<span class="literal">null</span>);</span><br><span class="line">    address.setModifiedTime(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在com.cy.store.service包下创建IOrderService业务层接口并添加抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理订单和订单数据的业务层接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aid 收货地址的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cids 即将购买的商品数据在购物车表中的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uid 当前登录的用户的id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 当前登录的用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功创建的订单数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Order <span class="title function_">create</span><span class="params">(Integer aid, Integer[] cids, Integer uid, String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-实现抽象方法-3"><a href="#4-3-实现抽象方法-3" class="headerlink" title="4.3 实现抽象方法"></a>4.3 实现抽象方法</h4><p>1.在com.cy.store.service.impl包下创建OrderServiceImpl业务层实现类并实现IOrderService接口；在类定义之前添加@Service注解，在类中添加OrderMapper订单持久层对象、IAddressService处理收货地址对象、ICartService购物车数据对象，并都添加@Autowired注解进行修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service.impl;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Address;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.OrderItem;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.mapper.OrderMapper;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IAddressService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ICartService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ex.InsertException;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.vo.CartVO;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 处理订单和订单数据的业务层实现类 */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IOrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IAddressService addressService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ICartService cartService;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.在OrderServiceImpl类中重写父接口中的create()抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">create</span><span class="params">(Integer aid, Integer[] cids, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建当前时间对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据cids查询所勾选的购物车列表中的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算这些商品的总价</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单数据对象</span></span><br><span class="line">    <span class="comment">// 补全数据：uid</span></span><br><span class="line">    <span class="comment">// 查询收货地址数据</span></span><br><span class="line">    <span class="comment">// 补全数据：收货地址相关的6项</span></span><br><span class="line">    <span class="comment">// 补全数据：totalPrice</span></span><br><span class="line">    <span class="comment">// 补全数据：status</span></span><br><span class="line">    <span class="comment">// 补全数据：下单时间</span></span><br><span class="line">    <span class="comment">// 补全数据：日志</span></span><br><span class="line">    <span class="comment">// 插入订单数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历carts，循环插入订单商品数据</span></span><br><span class="line">    <span class="comment">// 创建订单商品数据</span></span><br><span class="line">    <span class="comment">// 补全数据：oid(order.getOid())</span></span><br><span class="line">    <span class="comment">// 补全数据：pid, title, image, price, num</span></span><br><span class="line">    <span class="comment">// 补全数据：4项日志</span></span><br><span class="line">    <span class="comment">// 插入订单商品数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.OrderServiceImpl类中的create()方法具体逻辑代码实现见下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Order <span class="title function_">create</span><span class="params">(Integer aid, Integer[] cids, Integer uid, String username)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建当前时间对象</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据cids查询所勾选的购物车列表中的数据</span></span><br><span class="line">    List&lt;CartVO&gt; carts = cartService.getVOByCids(uid, cids);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算这些商品的总价</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">totalPrice</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (CartVO cart : carts) &#123;</span><br><span class="line">        totalPrice += cart.getRealPrice() * cart.getNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建订单数据对象</span></span><br><span class="line">    <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">    <span class="comment">// 补全数据：uid</span></span><br><span class="line">    order.setUid(uid);</span><br><span class="line">    <span class="comment">// 查询收货地址数据</span></span><br><span class="line">    <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> addressService.getByAid(aid, uid);</span><br><span class="line">    <span class="comment">// 补全数据：收货地址相关的6项</span></span><br><span class="line">    order.setRecvName(address.getName());</span><br><span class="line">    order.setRecvPhone(address.getPhone());</span><br><span class="line">    order.setRecvProvince(address.getProvinceName());</span><br><span class="line">    order.setRecvCity(address.getCityName());</span><br><span class="line">    order.setRecvArea(address.getAreaName());</span><br><span class="line">    order.setRecvAddress(address.getAddress());</span><br><span class="line">    <span class="comment">// 补全数据：totalPrice</span></span><br><span class="line">    order.setTotalPrice(totalPrice);</span><br><span class="line">    <span class="comment">// 补全数据：status</span></span><br><span class="line">    order.setStatus(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 补全数据：下单时间</span></span><br><span class="line">    order.setOrderTime(now);</span><br><span class="line">    <span class="comment">// 补全数据：日志</span></span><br><span class="line">    order.setCreatedUser(username);</span><br><span class="line">    order.setCreatedTime(now);</span><br><span class="line">    order.setModifiedUser(username);</span><br><span class="line">    order.setModifiedTime(now);</span><br><span class="line">    <span class="comment">// 插入订单数据</span></span><br><span class="line">    <span class="type">Integer</span> <span class="variable">rows1</span> <span class="operator">=</span> orderMapper.insertOrder(order);</span><br><span class="line">    <span class="keyword">if</span> (rows1 != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;插入订单数据时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历carts，循环插入订单商品数据</span></span><br><span class="line">    <span class="keyword">for</span> (CartVO cart : carts) &#123;</span><br><span class="line">        <span class="comment">// 创建订单商品数据</span></span><br><span class="line">        <span class="type">OrderItem</span> <span class="variable">item</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderItem</span>();</span><br><span class="line">        <span class="comment">// 补全数据：setOid(order.getOid())</span></span><br><span class="line">        item.setOid(order.getOid());</span><br><span class="line">        <span class="comment">// 补全数据：pid, title, image, price, num</span></span><br><span class="line">        item.setPid(cart.getPid());</span><br><span class="line">        item.setTitle(cart.getTitle());</span><br><span class="line">        item.setImage(cart.getImage());</span><br><span class="line">        item.setPrice(cart.getRealPrice());</span><br><span class="line">        item.setNum(cart.getNum());</span><br><span class="line">        <span class="comment">// 补全数据：4项日志</span></span><br><span class="line">        item.setCreatedUser(username);</span><br><span class="line">        item.setCreatedTime(now);</span><br><span class="line">        item.setModifiedUser(username);</span><br><span class="line">        item.setModifiedTime(now);</span><br><span class="line">        <span class="comment">// 插入订单商品数据</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">rows2</span> <span class="operator">=</span> orderMapper.insertOrderItem(item);</span><br><span class="line">        <span class="keyword">if</span> (rows2 != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InsertException</span>(<span class="string">&quot;插入订单商品数据时出现未知错误，请联系系统管理员&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回</span></span><br><span class="line">    <span class="keyword">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.在com.cy.store.service测试包下创建OrderServiceTests测试类，并添加create()方法进行功能测试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.service;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.ex.ServiceException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">aid</span> <span class="operator">=</span> <span class="number">21</span>;</span><br><span class="line">            Integer[] cids = &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;订单管理员&quot;</span>;</span><br><span class="line">            <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderService.create(aid, cids, uid, username);</span><br><span class="line">            System.out.println(order);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServiceException e) &#123;</span><br><span class="line">            System.out.println(e.getClass().getSimpleName());</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-订单-控制器层"><a href="#5-订单-控制器层" class="headerlink" title="5 订单-控制器层"></a>5 订单-控制器层</h3><h4 id="5-1-处理异常-3"><a href="#5-1-处理异常-3" class="headerlink" title="5.1 处理异常"></a>5.1 处理异常</h4><blockquote>
<p><strong>说明</strong>：无异常。</p>
</blockquote>
<h4 id="5-2-设计请求-3"><a href="#5-2-设计请求-3" class="headerlink" title="5.2 设计请求"></a>5.2 设计请求</h4><p>设计用户提交的请求，并设计响应的方式。</p>
<pre><code>请求路径：/orders/create
请求参数：Integer aid, Integer[] cids, HttpSession session
请求类型：POST
响应结果：JsonResult&lt;Order&gt;
</code></pre>
<h4 id="5-3-处理请求-3"><a href="#5-3-处理请求-3" class="headerlink" title="5.3 处理请求"></a>5.3 处理请求</h4><p>1.在com.cy.store.controller包下创建OrderController类，并继承自BaseController类；并在类前添加@RequestMapping(“orders”)注解和@RestController注解；在类中声明IOrderService业务对象，然后添加@Autowired注解修饰；最后在类中添加处理请求的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.controller;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.entity.Order;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.service.IOrderService;</span><br><span class="line"><span class="keyword">import</span> com.cy.store.util.JsonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;orders&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> <span class="keyword">extends</span> <span class="title class_">BaseController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IOrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;create&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> JsonResult&lt;Order&gt; <span class="title function_">create</span><span class="params">(Integer aid, Integer[] cids, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 从Session中取出uid和username</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">uid</span> <span class="operator">=</span> getUidFromSession(session);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUsernameFromSession(session);</span><br><span class="line">        <span class="comment">// 调用业务对象执行业务</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">data</span> <span class="operator">=</span> orderService.create(aid, cids, uid, username);</span><br><span class="line">        <span class="comment">// 返回成功与数据</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonResult</span>&lt;Order&gt;(OK, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/orders/create?aid=21&amp;cids=4&amp;cids=5&amp;cids=6&amp;cids=7%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82">http://localhost:8080/orders/create?aid=21&amp;cids=4&amp;cids=5&amp;cids=6&amp;cids=7进行测试。</a></p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/1-16515813384594.png" class="">

<h3 id="6-订单-前端页面"><a href="#6-订单-前端页面" class="headerlink" title="6 订单-前端页面"></a>6 订单-前端页面</h3><p>1.在orderConfirm.xml页面中的body标签内的script标签内添加“在线支付”按钮的点击时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;#btn-create-order&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&quot;/orders/create&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: $(<span class="string">&quot;#form-create-order&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">        <span class="attr">dataType</span>: <span class="string">&quot;JSON&quot;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">json</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (json.<span class="property">state</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;创建订单成功！&quot;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">data</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&quot;创建订单失败！&quot;</span> + json.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">error</span>: <span class="keyword">function</span>(<span class="params">xhr</span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;您的登录信息已经过期，请重新登录！HTTP响应码：&quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">            location.<span class="property">href</span> = <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>2.完成后启动项目，先登录再访问<a href="http://localhost:8080/web/cart.html%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%8B%BE%E9%80%89%E8%B4%AD%E8%BD%A6%E4%B8%AD%E7%9A%84%E5%95%86%E5%93%81%EF%BC%8C%E5%86%8D%E7%82%B9%E5%87%BB%E2%80%9C%E7%BB%93%E7%AE%97%E2%80%9D%E6%8C%89%E9%92%AE%EF%BC%8C%E6%9C%80%E5%90%8E%E5%9C%A8%E8%AE%A2%E5%8D%95">http://localhost:8080/web/cart.html页面，勾选购车中的商品，再点击“结算”按钮，最后在订单</a></p>
<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><h3 id="1-Spring-AOP"><a href="#1-Spring-AOP" class="headerlink" title="1 Spring AOP"></a>1 Spring AOP</h3><p>AOP：面向切面（Aspect）编程。AOP并不是Spring框架的特性，只是Spring很好的支持了AOP。</p>
<p>如果需要在处理每个业务时，都执行特定的代码，则可以假设在整个数据处理流程中存在某个切面，切面中可以定义某些方法，当处理流程执行到切面时，就会自动执行切面中的方法。最终实现的效果就是：只需要定义好切面方法，配置好切面的位置（连接点），在不需要修改原有数据处理流程的代码的基础之上，就可以使得若干个流程都执行相同的代码。</p>
<h3 id="2-切面方法"><a href="#2-切面方法" class="headerlink" title="2 切面方法"></a>2 切面方法</h3><p>1.切面方法的访问权限是public。</p>
<p>2.切面方法的返回值类型可以是void或Object，如果使用的注解是@Around时，必须使用Object作为返回值类型，并返回连接点方法的返回值；如果使用的注解是@Before或@After等其他注解时，则自行决定。</p>
<p>3.切面方法的名称可以自定义。</p>
<p>4.切面方法的参数列表中可以添加ProceedingJoinPoint接口类型的对象，该对象表示连接点，也可以理解调用切面所在位置对应的方法的对象，如果使用的注解是@Around时，必须添加该参数，反之则不是必须添加。</p>
<h3 id="3-统计业务方法执行时长"><a href="#3-统计业务方法执行时长" class="headerlink" title="3 统计业务方法执行时长"></a>3 统计业务方法执行时长</h3><p>1.在使用Spring AOP编程时，需要先在pom.xml文件中添加两个关于AOP的依赖aspectjweaver和aspectjtools。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.在com.cy.store.aop包下创建TimerAspect切面类，在类之前添加@Aspect和@Component注解修饰。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cy.store.aop;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.在类中添加切面方法around(ProceedingJoinPoint pjp)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 记录起始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 执行连接点方法，即切面所在位置对应的方法。本项目中表示执行注册或执行登录等</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="comment">// 记录结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 计算耗时</span></span><br><span class="line">    System.err.println(<span class="string">&quot;耗时：&quot;</span> + (end - start) + <span class="string">&quot;ms.&quot;</span>);</span><br><span class="line">    <span class="comment">// 返回连接点方法的返回值</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.最后需要在方法之前添加@Around注解，以配置连接点，即哪些方法需要应用该切面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;execution(* com.cy.store.service.impl.*.*(..))&quot;)</span></span><br></pre></td></tr></table></figure>

<p>5.启动项目，在前端浏览器访问任意一个功能模块进行功能的测试。</p>
<img src="/2022/05/10/%E7%94%B5%E8%84%91%E5%95%86%E5%9F%8E/1-16515906053916.png" class="">

]]></content>
  </entry>
  <entry>
    <title>Java异常体系</title>
    <url>/2022/05/13/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/</url>
    <content><![CDATA[<h2 id="Java异常体系"><a href="#Java异常体系" class="headerlink" title="Java异常体系"></a>Java异常体系</h2><img src="/2022/05/13/Java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB/image-20220513202951049.png" class="">

<p>Error：Java运行时系统内部错误或者资源耗尽。</p>
<p><strong>非检查型异常</strong>：Error和RuntimeException都是编译器无法提前预测的。</p>
<p><strong>检查型异常</strong>：编译器要求必须对其进行处理的异常。</p>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>慕慕生鲜电商项目</title>
    <url>/2022/05/13/%E6%85%95%E6%85%95%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h2 id="功能模块"><a href="#功能模块" class="headerlink" title="功能模块"></a>功能模块</h2><p>log4j2日志组件记录日志；</p>
<p>使用AOP统一处理Web请求日志（请求地址、请求参数、IP、接口的返回），遇到bug方便排查；</p>
<p>前台包括用户、商品分类、商品、购物车、订单模块；</p>
<p>后台包括管理员、商品分类、商品、订单模块；</p>
<blockquote>
<p>购物车在前台处理，购物车模块把用户选中的要加入购物车的商品直接汇总到一个订单发送到后台，所以后台没有购物车模块。</p>
</blockquote>
<p><strong>前台</strong></p>
<ul>
<li>用户模块的功能包括注册、登录、更新签名、登出、管理员登；</li>
<li>商品分类模块的功能包括多级目录、递归查询、缓存（商品分类变动的频率较小）；</li>
<li>商品模块的功能包括商品搜索、排序、列表、目录展示、详情；</li>
<li>购物车模块的功能包括加入商品、列表显示、数量更改、删除商品、勾选反选、全选全不选；</li>
<li>订单模块的功能包括下单、订单流程、订单详情、取消订单、支付二维码、扫码支付、个人订单、确认收货；</li>
</ul>
<p><strong>后台</strong></p>
<ul>
<li>管理员模块的功能包括登录登出、身份认证、安全限制；</li>
<li>商品分类模块的功能包括分类列表、增加分类、修改分类、删除分类；</li>
<li>商品模块的功能包括商品列表、新增商品、图片上传、更新删除、批量上下架；</li>
<li>订单模块的功能包括订单列表、地址信息、发货、订单完结；</li>
</ul>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul>
<li>SpringBoot 2.2.1.RELEASE</li>
<li>MyBatis 3.4.6(封装了Jdbc的大部分操作，减少了开发量，SQL和代码分离，便于维护)</li>
<li>Maven 3.6.1</li>
<li>log4j2 2.12.1</li>
</ul>
<h2 id="项目初始化"><a href="#项目初始化" class="headerlink" title="项目初始化"></a>项目初始化</h2><p>引入依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="数据库逆向"><a href="#数据库逆向" class="headerlink" title="数据库逆向"></a>数据库逆向</h3><p><strong>逆向文件插件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--生成逆向文件的插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>逆向文件插件配置：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置文件，放在resource目录下即可 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--数据库驱动个人配置--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">classPathEntry</span></span></span><br><span class="line"><span class="tag">    <span class="attr">location</span>=<span class="string">&quot;D:\deve\maven\localRepo\mysql\mysql-connector-java\8.0.18\mysql-connector-java-8.0.18.jar&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;MysqlTables&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoDelimitKeywords&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--可以使用``包括字段名，避免字段名与sql保留字冲突报错--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beginningDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;endingDelimiter&quot;</span> <span class="attr">value</span>=<span class="string">&quot;`&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数据库链接地址账号密码--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/imooc_mall?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="symbol">&amp;amp;</span>zeroDateTimeBehavior=convertToNull<span class="symbol">&amp;amp;</span>serverTimezone=GMT&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生成Model类存放位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.imooc.mall.model.pojo&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生成mapper映射文件存放位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mappers&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生成Dao类存放位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.imooc.mall.model.dao&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--生成对应表及类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;root&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_cart&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Cart&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_category&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Category&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_order&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Order&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_order_item&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;OrderItem&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_product&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;Product&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;imooc_mall_user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>插件生成逆向文件：</strong></p>
<p>双击插件</p>
<img src="/2022/05/13/%E6%85%95%E6%85%95%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/image-20220513115417093.png" class="">

<img src="/2022/05/13/%E6%85%95%E6%85%95%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/image-20220513122131352.png" class="">

<h3 id="打通数据库链路"><a href="#打通数据库链路" class="headerlink" title="打通数据库链路"></a>打通数据库链路</h3><p><strong>application.properties:</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"># 数据源连接信息</span></span><br><span class="line"><span class="attr">spring.datasource.name</span>=<span class="string">imooc_mall_datasource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/imooc_mall?useUnicode=true&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br><span class="line"><span class="comment"># Mapper文件位置</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:mappers/*.xml</span></span><br></pre></td></tr></table></figure>

<p>@MapperScan</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.imooc.mall.model.dao&quot;)</span> <span class="comment">// 扫描mapper实体类映射</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MallApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(MallApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决Mapper爆红"><a href="#解决Mapper爆红" class="headerlink" title="解决Mapper爆红"></a>解决Mapper爆红</h3><img src="/2022/05/13/%E6%85%95%E6%85%95%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/image-20220513130352496.png" class="">

<p>在每个Mapper加上注解<code>@Repository</code>标识资源文件即可。</p>
<img src="/2022/05/13/%E6%85%95%E6%85%95%E7%94%9F%E9%B2%9C%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/image-20220513130614164.png" class="">

<h3 id="log4j2日志"><a href="#log4j2日志" class="headerlink" title="log4j2日志"></a>log4j2日志</h3><blockquote>
<p>日志级别：error、warn、info、debug、trace</p>
</blockquote>
<p><strong>排除Logback依赖：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--排除logback依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--引入log4j4依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>log4j2配置文件：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;fatal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--日志存储目录--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">&quot;baseDir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;ACCEPT&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;DENY&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;MM:dd HH:mm:ss.SSS&#125;] [%level] [%logger&#123;36&#125;] - %msg%n&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--debug级别日志文件输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;debug_appender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;baseDir&#125;/debug.log&quot;</span> <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;baseDir&#125;/debug_%i.log.%d&#123;yyyy-MM-dd&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 限制日志级别在debug及以上在info以下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;DENY&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 策略 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每隔一天转存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;100 MB&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- info级别日志文件输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;info_appender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;baseDir&#125;/info.log&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;baseDir&#125;/info_%i.log.%d&#123;yyyy-MM-dd&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 限制日志级别在info及以上在error以下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span> <span class="attr">onMatch</span>=<span class="string">&quot;DENY&quot;</span> <span class="attr">onMismatch</span>=<span class="string">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 策略 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每隔一天转存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;100 MB&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- error级别日志文件输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">&quot;error_appender&quot;</span> <span class="attr">fileName</span>=<span class="string">&quot;$&#123;baseDir&#125;/error.log&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">filePattern</span>=<span class="string">&quot;$&#123;baseDir&#125;/error_%i.log.%d&#123;yyyy-MM-dd&#125;&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 限制日志级别在error及以上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 日志格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%d&#123;HH:mm:ss:SSS&#125;] [%p] - %l - %m%n&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每隔一天转存 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">interval</span>=<span class="string">&quot;1&quot;</span> <span class="attr">modulate</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文件大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">&quot;100 MB&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;debug_appender&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;info_appender&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;error_appender&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="AOP统一处理Web请求日志"><a href="#AOP统一处理Web请求日志" class="headerlink" title="AOP统一处理Web请求日志"></a>AOP统一处理Web请求日志</h3><blockquote>
<p>创建Filter把请求信息和响应信息都打印出来，增加系统健壮性，也方便调试。</p>
</blockquote>
<p><strong>引入AOP依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建filter过滤器切面类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印请求信息和响应信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kuroneko</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 切面类</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// 交给spring管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebLogAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(WebLogAspect.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 拦截点 */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(public * com.imooc.mall.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">webLog</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 前置通知 log记录请求信息*/</span></span><br><span class="line">    <span class="meta">@Before(&quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前请求request</span></span><br><span class="line">        <span class="type">ServletRequestAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> attributes.getRequest();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;URL: &quot;</span> + request.getRequestURL().toString());</span><br><span class="line">        log.info(<span class="string">&quot;HTTP_METHOD: &quot;</span> + request.getMethod());</span><br><span class="line">        log.info(<span class="string">&quot;IP: &quot;</span> + request.getRemoteAddr());</span><br><span class="line">        log.info(<span class="string">&quot;CLASS_METHOD: &quot;</span>+ joinPoint.getSignature().getDeclaringTypeName() + <span class="string">&quot;.&quot;</span> + joinPoint.getSignature().getName());</span><br><span class="line">        <span class="comment">// 参数信息，字符串数组保存</span></span><br><span class="line">        log.info(<span class="string">&quot;ARGS: &quot;</span> + Arrays.toString(joinPoint.getArgs()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 返回后通知 log记录响应信息*/</span></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;res&quot;, pointcut = &quot;webLog()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturning</span><span class="params">(Object res)</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">        <span class="comment">// FastJson工具把响应对象转为Json</span></span><br><span class="line">        log.info(<span class="string">&quot;RESPONSE: &quot;</span> + <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(res));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><p>登录、注册、重名校验、密码加密存储、session、越权校验（没有登录不能修改，登录后只能修改自己信息）、统一响应对象、异常枚举化处理、Java异常体系、写完接口使用Postman测试、统一异常处理（过滤器）、更新个人信息。</p>
<h3 id="统一响应对象"><a href="#统一响应对象" class="headerlink" title="统一响应对象"></a>统一响应对象</h3><p>响应信息统一格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall.common;</span><br><span class="line"><span class="keyword">import</span> com.imooc.mall.exception.ImoocMallExceptionEnum;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统一响应对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kuroneko</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiRestResponse</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/** 响应状态码 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="comment">/** 响应信息 */</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">/** 响应数据 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 多数情况下都是正常返回 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">OK_CODE</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OK_MSG</span> <span class="operator">=</span> <span class="string">&quot;SUCCESS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiRestResponse</span><span class="params">(Integer status, String msg, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiRestResponse</span><span class="params">(Integer status, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ApiRestResponse(10000, SUCCESS)</span></span><br><span class="line"><span class="comment">     * 调用无参构造时默认正常返回，调用双参构造设置正常的响应信息 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiRestResponse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(OK_CODE, OK_MSG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用无参正常响应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApiRestResponse(10000, SUCCESS)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiRestResponse&lt;T&gt; <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiRestResponse</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用无参并将响应数据data传入响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 响应数据data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApiRestResponse(10000, SUCCESS, result)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiRestResponse&lt;T&gt; <span class="title function_">success</span><span class="params">(T result)</span>&#123;</span><br><span class="line">        ApiRestResponse&lt;T&gt; response = <span class="keyword">new</span> <span class="title class_">ApiRestResponse</span>&lt;&gt;();</span><br><span class="line">        response.setData(result);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常的响应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 异常码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApiRestResponse(异常码, 异常信息)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiRestResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(Integer code, String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiRestResponse</span>&lt;&gt;(code, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举异常响应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 枚举异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ApiRestResponse(枚举异常码, 枚举异常信息)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiRestResponse&lt;T&gt; <span class="title function_">error</span><span class="params">(ImoocMallExceptionEnum ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiRestResponse</span>&lt;&gt;(ex.getCode(), ex.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ApiRestResponse&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;status=&quot;</span> + status +</span><br><span class="line">                <span class="string">&quot;, msg=&#x27;&quot;</span> + msg + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">// Getter and Setter</span></span><br></pre></td></tr></table></figure>

<h3 id="异常枚举"><a href="#异常枚举" class="headerlink" title="异常枚举"></a>异常枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall.exception;</span><br><span class="line"><span class="comment">/** 异常枚举化处理,收集常用的异常 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ImoocMallExceptionEnum</span> &#123;</span><br><span class="line">    NEED_USER_NAME(<span class="number">10001</span>, <span class="string">&quot;用户名不能为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 异常码 */</span></span><br><span class="line">    Integer code;</span><br><span class="line">    <span class="comment">/** 异常信息 */</span></span><br><span class="line">    String msg;</span><br><span class="line"></span><br><span class="line">    ImoocMallExceptionEnum(Integer code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">// Getter and Setter</span></span><br></pre></td></tr></table></figure>

<h3 id="1-注册"><a href="#1-注册" class="headerlink" title="1 注册"></a>1 注册</h3><p><strong>设计请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">/register?username=neko1&amp;password=<span class="number">12345678</span></span><br></pre></td></tr></table></figure>

<p><strong>响应信息</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-1-注册-持久层"><a href="#1-1-注册-持久层" class="headerlink" title="1.1 注册-持久层"></a>1.1 注册-持久层</h4><p><strong>设计抽象方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 由用户名查询用户数据 */</span></span><br><span class="line">User <span class="title function_">selectByName</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>编写映射</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span></span><br><span class="line">    SELECT</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;Base_Column_List&quot;</span>/&gt;</span></span><br><span class="line">    FROM imooc_mall_user</span><br><span class="line">    WHERE username = #&#123;username,jdbcType=VARCHAR&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-注册-业务层"><a href="#1-2-注册-业务层" class="headerlink" title="1.2 注册-业务层"></a>1.2 注册-业务层</h4><p><strong>业务层统一异常</strong></p>
<ul>
<li>用户名重名异常</li>
<li>插入异常</li>
</ul>
<p>创建<code>ImoocMallException</code>继承<code>Exception</code>并利用枚举构造出业务层异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall.exception;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层统一异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kuroneko</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ImoocMallException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImoocMallException</span><span class="params">(Integer code, String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 利用枚举构造出业务层异常 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ImoocMallException</span><span class="params">(ImoocMallExceptionEnum exceptionEnum)</span>&#123;</span><br><span class="line">        <span class="comment">// 调用双参构造</span></span><br><span class="line">        <span class="built_in">this</span>(exceptionEnum.getCode(), exceptionEnum.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续枚举异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NAME_EXISTED(<span class="number">10004</span>, <span class="string">&quot;不允许重名，注册失败&quot;</span>),</span><br><span class="line">INSERT_FAILED(<span class="number">10005</span>, <span class="string">&quot;插入失败，请重试&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>设计抽象方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注册</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>实现抽象方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 注册</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> ImoocMallException &#123;</span><br><span class="line">       <span class="comment">// 重名校验：用户名重复抛出异常</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">result</span> <span class="operator">=</span> userMapper.selectByName(username);</span><br><span class="line">       <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ImoocMallException</span>(ImoocMallExceptionEnum.NAME_EXISTED);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户名没有重复则向用户表插入一条记录</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setUsername(username);</span><br><span class="line">       user.setPassword(password);</span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.insertSelective(user);</span><br><span class="line">       <span class="comment">// 插入失败抛出异常</span></span><br><span class="line">       <span class="keyword">if</span> (count == <span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ImoocMallException</span>(ImoocMallExceptionEnum.INSERT_FAILED);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="全局统一异常处理"><a href="#全局统一异常处理" class="headerlink" title="全局统一异常处理"></a>全局统一异常处理</h4><blockquote>
<p>在重名校验时，在业务层直接抛出了异常而没有转化为Json的ApiRestResponse返回给前台。而且返回给前台的信息格式没有统一且包含敏感字段,所以定义一个全局异常处理GlobalExceptionHandler来统一处理异常，把异常信息也转化为返回Json的ApiRestResponse统一输出。</p>
</blockquote>
<p>重名时的响应信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-05-13T11:38:09.272+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">500</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Internal Server Error&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;No message available&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/register&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.imooc.mall.exception;</span><br><span class="line"><span class="keyword">import</span> com.imooc.mall.common.ApiRestResponse;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 统一异常处理,把拦截到的异常转化为Json的ApiRestResponse统一输出 */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span> <span class="comment">// 拦截异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span> <span class="comment">// 拦截Exception类型的异常</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line">        <span class="comment">// 记录Exception类型的异常</span></span><br><span class="line">        log.error(<span class="string">&quot;Default Exception: &quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ApiRestResponse.error(ImoocMallExceptionEnum.SYSTEM_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(ImoocMallException.class)</span> <span class="comment">// 拦截业务异常，比如用户重名异常</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">handleImoocMallException</span><span class="params">(ImoocMallException e)</span>&#123;</span><br><span class="line">        <span class="comment">// 记录业务异常</span></span><br><span class="line">        log.error(<span class="string">&quot;ImoocMallException: &quot;</span>, e);</span><br><span class="line">        <span class="keyword">return</span> ApiRestResponse.error(e.getCode(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>枚举Exception类型的异常：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SYSTEM_ERROR(20000, &quot;系统异常&quot;);</span><br></pre></td></tr></table></figure>

<p>添加全局统一异常处理后，重名时的响应信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10004</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不允许重名，注册失败&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-注册-控制层"><a href="#1-3-注册-控制层" class="headerlink" title="1.3 注册-控制层"></a>1.3 注册-控制层</h4><p><strong>异常处理</strong></p>
<ul>
<li>用户名和密码都不能为空</li>
<li>密码长度不能小于8位</li>
</ul>
<p>继续枚举异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NEED_USER_NAME(<span class="number">10001</span>, <span class="string">&quot;用户名不能为空&quot;</span>),</span><br><span class="line">NEED_PASSWORD(<span class="number">10002</span>, <span class="string">&quot;密码不能为空&quot;</span>),</span><br><span class="line">PASSWORD_TOO_SHORT(<span class="number">10003</span>, <span class="string">&quot;密码长度不能小于8位&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>请求处理方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 注册 */</span></span><br><span class="line">   <span class="meta">@PostMapping(&quot;/register&quot;)</span> <span class="comment">// 绑定url</span></span><br><span class="line">   <span class="meta">@ResponseBody</span> <span class="comment">// Json格式通信</span></span><br><span class="line">   <span class="keyword">public</span> ApiRestResponse <span class="title function_">register</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="meta">@RequestParam(&quot;password&quot;)</span>String password)</span> <span class="keyword">throws</span> ImoocMallException &#123;</span><br><span class="line">       <span class="comment">// 1.用户名和密码的空校验</span></span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(username))&#123;</span><br><span class="line">           <span class="comment">//用户名不能为空</span></span><br><span class="line">           <span class="keyword">return</span> ApiRestResponse.error(ImoocMallExceptionEnum.NEED_USER_NAME);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (StringUtils.isEmpty(password))&#123;</span><br><span class="line">           <span class="comment">//密码不能为空</span></span><br><span class="line">           <span class="keyword">return</span> ApiRestResponse.error(ImoocMallExceptionEnum.NEED_PASSWORD);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 2.密码长度不能小于8位</span></span><br><span class="line">       <span class="keyword">if</span> (password.length() &lt; <span class="number">8</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> ApiRestResponse.error(ImoocMallExceptionEnum.PASSWORD_TOO_SHORT);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 3.用户名和密码正常则向用户表插入一条记录</span></span><br><span class="line">       userService.register(username, password);</span><br><span class="line">       <span class="keyword">return</span> ApiRestResponse.success();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-接口测试"><a href="#1-4-接口测试" class="headerlink" title="1.4 接口测试"></a>1.4 接口测试</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10001</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;用户名不能为空&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10002</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码不能为空&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10003</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;密码长度不能小于8位&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-登录"><a href="#2-登录" class="headerlink" title="2 登录"></a>2 登录</h3><p><strong>设计请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">/login?username=neko1&amp;password=neko1</span><br></pre></td></tr></table></figure>

<p><strong>响应信息</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xiaomu2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span> <span class="comment">//密码敏感信息不返回</span></span><br><span class="line">        <span class="attr">&quot;personalizedSignature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;祝你今天好心情&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-02-09T12:39:47.000+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-02-10T16:56:02.000+0000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-更新签名"><a href="#3-更新签名" class="headerlink" title="3 更新签名"></a>3 更新签名</h3><p><strong>设计请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">/user/update?signature=天道之行，总司一切。</span><br></pre></td></tr></table></figure>

<p><strong>响应信息</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-登出"><a href="#4-登出" class="headerlink" title="4 登出"></a>4 登出</h3><p><strong>设计请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">/user/logout</span><br></pre></td></tr></table></figure>

<p><strong>响应信息</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-管理员登录"><a href="#5-管理员登录" class="headerlink" title="5 管理员登录"></a>5 管理员登录</h3><p><strong>设计请求</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST</span><br><span class="line">/adminLogin?username=admin&amp;password=admin</span><br></pre></td></tr></table></figure>

<p><strong>响应信息</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SUCCESS&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span> <span class="comment">//敏感信息不返回</span></span><br><span class="line">        <span class="attr">&quot;personalizedSignature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;祝你今天好心情&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> <span class="comment">//管理员</span></span><br><span class="line">        <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-02-09T12:39:47.000+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-02-10T16:56:02.000+0000&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot项目</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
