<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>基础语法</title>
    <url>/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="1-JDK和JRE的区别"><a href="#1-JDK和JRE的区别" class="headerlink" title="1 JDK和JRE的区别"></a>1 JDK和JRE的区别</h3><ul>
<li><p>JRE：JavaRuntimeEnvironment，运行Java程序，包含JVM、Java基础类库。</p>
</li>
<li><p>JDK：Java Development Kit，提供开发环境和运行环境。</p>
<p>包含JRE、编译源文件的编译器Javac、监控工具jconsole和分析工具jvisualvm。</p>
</li>
</ul>
<h3 id="2-x3D-x3D-和equals-的区别"><a href="#2-x3D-x3D-和equals-的区别" class="headerlink" title="2 &#x3D;&#x3D; 和equals()的区别"></a>2 &#x3D;&#x3D; 和equals()的区别</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ==和equals的区别</span></span><br><span class="line"><span class="comment"> *  ==解读：</span></span><br><span class="line"><span class="comment"> *      1.基本类型：值比较</span></span><br><span class="line"><span class="comment"> *      2.引用类型：引用比较(内存地址)</span></span><br><span class="line"><span class="comment"> *      3.不能比较没有父子关系的两个对象</span></span><br><span class="line"><span class="comment"> * equals解读：</span></span><br><span class="line"><span class="comment"> *      1.没有重写equals方法则同==,调用Object类中的equals,引用比较</span></span><br><span class="line"><span class="comment"> *      2.JDK中的类一般重写了equals，值比较</span></span><br><span class="line"><span class="comment"> *      3.String和Integer默认重写了equals方法：值比较</span></span><br><span class="line"><span class="comment"> *      4.重写对象的equals，一般须重写hashcode</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> kuroneko</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sx</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sy</span> <span class="operator">=</span> <span class="string">&quot;string&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;string&quot;</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * String是引用类型，==引用比较，</span></span><br><span class="line"><span class="comment">         * 值为string的sx指向常量区中的一个位置xab123</span></span><br><span class="line"><span class="comment">         * y的值为string，和sx一样指向常量区中的xab123</span></span><br><span class="line"><span class="comment">         * so:</span></span><br><span class="line"><span class="comment">         *      true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx == sy);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * String和Cat是引用类型，==引用比较，Cat没有重写equals，引用比较</span></span><br><span class="line"><span class="comment">         * new关键字会重新开辟内存空间，值虽相同但引用不同</span></span><br><span class="line"><span class="comment">         * so:</span></span><br><span class="line"><span class="comment">         *      都为false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx == sz);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;黑猫&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;黑猫&quot;</span>);</span><br><span class="line">        System.out.println(c1.equals(c2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  String和Integer重写了equals，equals值比较</span></span><br><span class="line"><span class="comment">         *  so：</span></span><br><span class="line"><span class="comment">         *      都为true</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(sx.equals(sy));</span><br><span class="line">        System.out.println(sx.equals(sz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Object类中equals方法的声明：同&#x3D;&#x3D;，引用比较</p>
<img src="/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20220506174814415.png" class="">

<p>String类中equals方法的声明：重写了Object的equals方法，把引用比较改成了值比较</p>
<img src="/2022/05/06/%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-20220506180546883.png" class="">

<h3 id="3-hashCode-相同则equals-为true吗"><a href="#3-hashCode-相同则equals-为true吗" class="headerlink" title="3 hashCode()相同则equals()为true吗"></a>3 hashCode()相同则equals()为true吗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 两个对象的hashCode相同，equals不一定为true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;通话&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;重地&quot;</span>;</span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;str1：%d | str2：%d&quot;</span>,  str1.hashCode(),str2.hashCode()));</span><br><span class="line">        System.out.println(str1.equals(str2)); <span class="comment">// String重写了equals,值比较</span></span><br><span class="line">        <span class="comment">/**console</span></span><br><span class="line"><span class="comment">         * str1：1179395 | str2：1179395</span></span><br><span class="line"><span class="comment">         * false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-基本类型和包装类对象使用-x3D-x3D-和equals进行比较"><a href="#4-基本类型和包装类对象使用-x3D-x3D-和equals进行比较" class="headerlink" title="4 基本类型和包装类对象使用&#x3D;&#x3D;和equals进行比较"></a>4 基本类型和包装类对象使用&#x3D;&#x3D;和equals进行比较</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/** 基本类型和包装类对象使用==和equals比较 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">ia</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ib</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==：基本类型-基本类型、基本类型-包装对象是值比较&quot;</span>);</span><br><span class="line">        System.out.println(ia == ib);      <span class="comment">// true</span></span><br><span class="line">        System.out.println(ia == i1);      <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;==：包装对象-包装对象是引用比较：&quot;</span>);</span><br><span class="line">        System.out.println(i1 == i2); <span class="comment">// true</span></span><br><span class="line">        System.out.println(i3 == i4); <span class="comment">// false</span></span><br><span class="line">        System.out.println(i1 == i3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================================&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;equals: 包装对象-基本类型、包装对象-包装对象是值比较,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;JVM会缓存部分基本类型常用的包装类对象，如Integer的值在-128~127是被缓存的，所以i1和i2是相同引用&quot;</span>);</span><br><span class="line">        System.out.println(i1.equals(ia)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(i3.equals(ia)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(i1.equals(i2)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(i1.equals(i3)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sample04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;JDK1.8,实验代码:&quot;</span>);</span><br><span class="line">        <span class="type">byte</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Byte</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>(<span class="string">&quot;127&quot;</span>);</span><br><span class="line">        <span class="type">Byte</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Byte</span>(<span class="string">&quot;127&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 基本类型和包装对象使用 == 比较 : &quot;</span> + (b1 == b2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 基本类型和包装对象使用 equals 比较 : &quot;</span> + b2.equals(b1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 包装对象和包装对象使用 == 比较 : &quot;</span> + (b2 == b3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Byte 包装对象和包装对象使用 equals 比较 : &quot;</span> + b2.equals(b3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">short</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">12</span>;</span><br><span class="line">        <span class="type">Short</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Short</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        <span class="type">Short</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Short</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 基本类型和包装对象使用 == 比较 : &quot;</span> + (s1 == s2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 基本类型和包装对象使用 equals 比较 : &quot;</span> + s2.equals(s1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 包装对象和包装对象使用 == 比较 : &quot;</span> + (s2 == s3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Short 包装对象和包装对象使用 equals 比较 : &quot;</span> + s2.equals(s3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        <span class="type">Character</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        <span class="type">Character</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Character</span>(<span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 基本类型和包装对象使用 == 比较 : &quot;</span> + (c1 == c2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 基本类型和包装对象使用 equals 比较 : &quot;</span> + c2.equals(c1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 包装对象和包装对象使用 == 比较 : &quot;</span> + (c2 == c3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Character 包装对象和包装对象使用 equals 比较 : &quot;</span> + c2.equals(c3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 基本类型和包装对象使用 == 比较 : &quot;</span> + (i1 == i2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 基本类型和包装对象使用 equals 比较 : &quot;</span> + i2.equals(i1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 包装对象和包装对象使用 == 比较 : &quot;</span> + (i2 == i3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Integer 包装对象和包装对象使用 equals 比较 : &quot;</span> + i2.equals(i3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">l1</span> <span class="operator">=</span> <span class="number">1000000000000000L</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">l2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="string">&quot;1000000000000000&quot;</span>);</span><br><span class="line">        <span class="type">Long</span> <span class="variable">l3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Long</span>(<span class="string">&quot;1000000000000000&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 基本类型和包装对象使用 == 比较 : &quot;</span> + (l1 == l2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 基本类型和包装对象使用 equals 比较 : &quot;</span> + l2.equals(l1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 包装对象和包装对象使用 == 比较 : &quot;</span> + (l2 == l3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Long 包装对象和包装对象使用 equals 比较 : &quot;</span> + l2.equals(l3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="number">10000.111F</span>;</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        <span class="type">Float</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Float</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 基本类型和包装对象使用 == 比较 : &quot;</span> + (f1 == f2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 基本类型和包装对象使用 equals 比较 : &quot;</span> + f2.equals(f1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 包装对象和包装对象使用 == 比较 : &quot;</span> + (f2 == f3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Float 包装对象和包装对象使用 equals 比较 : &quot;</span> + f2.equals(f3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">10000.111</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="string">&quot;10000.111&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 基本类型和包装对象使用 == 比较 : &quot;</span> + (d1 == d2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 基本类型和包装对象使用 equals 比较 : &quot;</span> + d2.equals(d1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 包装对象和包装对象使用 == 比较 : &quot;</span> + (d2 == d3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Double 包装对象和包装对象使用 equals 比较 : &quot;</span> + d2.equals(d3));</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">bl1</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bl2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">bl3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 基本类型和包装对象使用 == 比较 : &quot;</span> + (bl1 == bl2));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 基本类型和包装对象使用 equals 比较 : &quot;</span> + bl2.equals(bl1));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 包装对象和包装对象使用 == 比较 : &quot;</span> + (bl2 == bl3));</span><br><span class="line">        System.out.println(<span class="string">&quot;Boolean 包装对象和包装对象使用 equals 比较 : &quot;</span> + bl2.equals(bl3));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDK1<span class="number">.8</span>,实验代码:</span><br><span class="line">Byte 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Byte 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Byte 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Byte 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Short 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Short 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Short 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Short 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Character 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Character 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Character 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Character 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Integer 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Integer 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Integer 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Integer 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Long 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Long 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Long 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Long 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Float 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Float 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Float 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Float 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Double 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Double 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Double 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Double 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">Boolean 基本类型和包装对象使用 == 比较 : <span class="literal">true</span></span><br><span class="line">Boolean 基本类型和包装对象使用 equals 比较 : <span class="literal">true</span></span><br><span class="line">Boolean 包装对象和包装对象使用 == 比较 : <span class="literal">false</span></span><br><span class="line">Boolean 包装对象和包装对象使用 equals 比较 : <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-装箱、拆箱的执行过程"><a href="#5-装箱、拆箱的执行过程" class="headerlink" title="5 装箱、拆箱的执行过程"></a>5 装箱、拆箱的执行过程</h3><p>装箱是基本类型转包装器类型，拆箱反之。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuronekofun;</span><br><span class="line"><span class="comment">/** 装箱、拆箱的执行过程 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Wrapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// JDK1.5之前不支持自动拆装箱，定义Integer对象必须</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.拆装箱的执行过程：</span></span><br><span class="line"><span class="comment">         * 装：调用包装器类的valueOf方法</span></span><br><span class="line"><span class="comment">         * 拆：调用包装器类的xxxValue方法，xxx代表对应的基本类型</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 就是编译器帮我们自动调用了拆装箱的方法，以 Integer 类型变成 int 类型为例子，自动装箱就是编译器自动调用了Integer.valueOf(int i) 方法；自动拆箱就是自动调用了Integer.intValue() 方法,其他基本类型类推。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// JDK1.5开始，支持自动拆装箱</span></span><br><span class="line">        <span class="comment">// int装箱隐式的调用: xw = Integer.valueOf(1)</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">xw</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 自动拆箱,Integer拆箱隐式的调用: x1 = xw.intValue</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x1</span> <span class="operator">=</span> xw;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.包装器类装箱返回的对象</span></span><br><span class="line">        <span class="comment">/** Integer.valueOf返回对象时，在-128~127范围内会返回缓存对象 */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        System.out.println(i1 == i2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(i3 == i4);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">/** Double.valueOf返回新的对象 */</span></span><br><span class="line">        <span class="type">Double</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d2</span> <span class="operator">=</span> <span class="number">100.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d3</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">d4</span> <span class="operator">=</span> <span class="number">200.0</span>;</span><br><span class="line">        System.out.println(d1 == d2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(d3 == d4);<span class="comment">//false</span></span><br><span class="line">        <span class="comment">/* Boolean.valueOf返回Boolean类的静态常量TRUE|FALSE */</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">b4</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        System.out.println(b1 == b2);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b3 == b4);<span class="comment">//true</span></span><br><span class="line">        System.out.println(b1 == b3);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.性能问题：若存在大量的自动装箱，且返回的包装对象不是从缓存中获取，会创建大量新的对象，消耗内存，加重垃圾回收的工作量，我们要正确地声明变量类型，避免因为自动装箱引起的性能问题。</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 再举一个例子，在 Java 中的 HashMap 的性能也受到自动拆装箱的影响。</span></span><br><span class="line"><span class="comment">         * 因为 HashMap 默认接收的参数类型是HashMap &lt;Object, Object&gt;，所以在增删改查的时候，都会对 Key 值进行大量的自动拆装箱，为了解决这个问题，Java提供了 SparseArray，包括 SparseBoolMap, SparseIntMap, SparseLongMap, LongSparseMap。</span></span><br><span class="line"><span class="comment">         * 他们的 Key 值都是基本类型的值，例如 SparseIntMap 就是SparseIntMap&lt;int, Object&gt;,在避免了大量自动拆装箱的同时，还降低了内存消耗。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span> * <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *  s1 = s1 + i，在 s1 被+操作符操作的时候，会对 s1 进行自动拆箱操作，进行数值相加操作，最后发生自动装箱操作转换成 Integer 对象。</span></span><br><span class="line"><span class="comment">             *  s1 = s1.intValue() + i;</span></span><br><span class="line"><span class="comment">             * Integer s1 = new Integer(result);</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            s1 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t2</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Integer，递增相加耗时：&quot;</span> + (t2 - t1));<span class="comment">//使用Integer，递增相加耗时：44</span></span><br><span class="line">        <span class="comment">// 正常情况，不拆装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t3</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;<span class="number">1000</span> * <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            s2 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">t4</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;使用int，递增相加耗时：&quot;</span> + (t4 - t3));<span class="comment">//使用int，递增相加耗时：5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-final、finally、finalize-区别"><a href="#6-final、finally、finalize-区别" class="headerlink" title="6 final、finally、finalize()区别"></a>6 final、finally、finalize()区别</h3><ul>
<li><p>被final修饰的类不能够被继承，被修饰的方法不能重写，能重载。</p>
<p>被修饰的成员变量必须初始化，赋初值后不能直接重新赋值。</p>
</li>
<li><p>finally是异常处理的一部分，只能用在try&#x2F;catch语句中，finally语句块中的代码最后被执行。除了JVM意外结束、在finallt语句块之前直接return或抛出异常、System.exit(0)（系统退出）。<br>抛出异常未执行到 try-finally 语句块<br>系统退出未执行到 finally 语句块</p>
</li>
<li><p>finalize()在java.lang.Object定义，GC回收对象之前自动由JVM调用finalize方法。可重写finalize方法，当对象被回收时释放一些资源，须调用super.finalize()。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;<span class="comment">//直接返回未执行到finally语句块</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    i = i / <span class="number">0</span>;<span class="comment">//抛出异常未执行到finally语句块</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">test3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;try...&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);<span class="comment">//系统退出未执行到finally语句块</span></span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;finally...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7"><a href="#7" class="headerlink" title="7"></a>7</h3>]]></content>
      <categories>
        <category>Java面试题</category>
      </categories>
      <tags>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2022/05/07/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Java有哪些常用容器（集合）"><a href="#Java有哪些常用容器（集合）" class="headerlink" title="Java有哪些常用容器（集合）"></a>Java有哪些常用容器（集合）</h3><p>Java容器分为Collection与Map两大接口。</p>
<img src="/2022/05/07/%E9%9B%86%E5%90%88/20191002072124515__20191013143527.jpg" class="">

<ul>
<li>List：有序，可重复</li>
<li>Set：不重复，linkedHashSet按插入排序，SortedSet可排序，HashSet无序</li>
<li>Map：存储键、值和之间的映射，key唯一</li>
</ul>
<h3 id="ArrayList和Vector的联系和区别"><a href="#ArrayList和Vector的联系和区别" class="headerlink" title="ArrayList和Vector的联系和区别"></a>ArrayList和Vector的联系和区别</h3><ul>
<li><p>底层都使用数组实现</p>
</li>
<li><p>ArrayList是新版本JDK替代Vector的</p>
</li>
<li><p>默认初始化容量都是10</p>
</li>
<li><p>Vector扩容翻倍，ArrayList扩容增加50%</p>
</li>
</ul>
<h3 id="Collection和Collections"><a href="#Collection和Collections" class="headerlink" title="Collection和Collections"></a>Collection和Collections</h3><ul>
<li>Collection是集合的顶级接口，定义了集合类的基本方法。</li>
<li>Collections是集合的工具类，包含集合操作的静态多态方法，不能实例化。</li>
</ul>
]]></content>
      <categories>
        <category>Java面试题</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
</search>
